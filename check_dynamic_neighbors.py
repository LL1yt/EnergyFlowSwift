#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å–µ–¥–µ–π –≤ 3D Cellular Neural Network
=========================================================

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–µ—à–µ—Ç–∫–∏
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ local/functional/distant —Ç–∏—Ä—ã  
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –≤ –∫–∞–∂–¥–æ–º —Ç–∏—Ä–µ
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ legacy 6/26 —Å–æ—Å–µ–¥–µ–π –Ω–∏–≥–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
"""

import torch
import math
from pathlib import Path
import json
import logging
from typing import Dict, List, Any, Tuple

from new_rebuild.config import SimpleProjectConfig

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def calculate_3d_distance(pos1: Tuple[int, int, int], pos2: Tuple[int, int, int]) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è 3D –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    return math.sqrt((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2 + (pos1[2] - pos2[2])**2)


def generate_lattice_positions(dimensions: Tuple[int, int, int]) -> List[Tuple[int, int, int]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ 3D —Ä–µ—à–µ—Ç–∫–µ"""
    positions = []
    for x in range(dimensions[0]):
        for y in range(dimensions[1]):
            for z in range(dimensions[2]):
                positions.append((x, y, z))
    return positions


def analyze_neighbor_distribution(config: SimpleProjectConfig) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    dimensions = config.lattice.dimensions
    max_radius = config.lattice.max_radius
    local_threshold = config.lattice.local_distance_threshold
    functional_threshold = config.lattice.functional_distance_threshold
    distant_threshold = config.lattice.distant_distance_threshold
    
    logger.info(f"üìè Analyzing lattice: {dimensions}")
    logger.info(f"üéØ Max radius: {max_radius:.2f}")
    logger.info(f"üîµ Local threshold: {local_threshold:.2f}")
    logger.info(f"üü° Functional threshold: {functional_threshold:.2f}")
    logger.info(f"üî¥ Distant threshold: {distant_threshold:.2f}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
    positions = generate_lattice_positions(dimensions)
    total_cells = len(positions)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–∑—Ü–æ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
    sample_positions = [
        (0, 0, 0),                              # –£–≥–æ–ª
        (dimensions[0]//2, dimensions[1]//2, dimensions[2]//2),  # –¶–µ–Ω—Ç—Ä
        (dimensions[0]-1, dimensions[1]-1, dimensions[2]-1),     # –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —É–≥–æ–ª
    ]
    
    analysis_results = {
        "lattice_info": {
            "dimensions": dimensions,
            "total_cells": total_cells,
            "max_radius": max_radius,
            "thresholds": {
                "local": local_threshold,
                "functional": functional_threshold,
                "distant": distant_threshold
            }
        },
        "sample_analysis": []
    }
    
    for sample_pos in sample_positions:
        if sample_pos[0] < dimensions[0] and sample_pos[1] < dimensions[1] and sample_pos[2] < dimensions[2]:
            neighbor_analysis = analyze_cell_neighbors(sample_pos, positions, config)
            analysis_results["sample_analysis"].append(neighbor_analysis)
    
    return analysis_results


def analyze_cell_neighbors(
    cell_pos: Tuple[int, int, int], 
    all_positions: List[Tuple[int, int, int]], 
    config: SimpleProjectConfig
) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å–µ–¥–µ–π –¥–ª—è –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏"""
    
    local_threshold = config.lattice.local_distance_threshold
    functional_threshold = config.lattice.functional_distance_threshold
    
    neighbors = {
        "local": [],
        "functional": [], 
        "distant": []
    }
    
    distances = []
    
    for pos in all_positions:
        if pos == cell_pos:
            continue
            
        distance = calculate_3d_distance(cell_pos, pos)
        distances.append(distance)
        
        if distance <= local_threshold:
            neighbors["local"].append((pos, distance))
        elif distance <= functional_threshold:
            neighbors["functional"].append((pos, distance))
        else:
            neighbors["distant"].append((pos, distance))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    for tier in neighbors.values():
        tier.sort(key=lambda x: x[1])
    
    return {
        "cell_position": cell_pos,
        "total_neighbors": len(distances),
        "tier_counts": {
            "local": len(neighbors["local"]),
            "functional": len(neighbors["functional"]),
            "distant": len(neighbors["distant"])
        },
        "tier_percentages": {
            "local": len(neighbors["local"]) / len(distances) * 100 if distances else 0,
            "functional": len(neighbors["functional"]) / len(distances) * 100 if distances else 0,
            "distant": len(neighbors["distant"]) / len(distances) * 100 if distances else 0
        },
        "closest_neighbors": {
            "local": neighbors["local"][:5],  # –ë–ª–∏–∂–∞–π—à–∏–µ 5 –≤ –∫–∞–∂–¥–æ–º —Ç–∏—Ä–µ
            "functional": neighbors["functional"][:5],
            "distant": neighbors["distant"][:5]
        },
        "distance_stats": {
            "min": min(distances) if distances else 0,
            "max": max(distances) if distances else 0,
            "avg": sum(distances) / len(distances) if distances else 0
        }
    }


def check_legacy_neighbor_counts(config: SimpleProjectConfig) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω–∏–≥–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å legacy –∑–Ω–∞—á–µ–Ω–∏–π 6/26 —Å–æ—Å–µ–¥–µ–π"""
    
    issues = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if hasattr(config.model, 'neighbor_count'):
        if config.model.neighbor_count == 6:
            issues.append("‚ùå Found legacy 6-connectivity in model.neighbor_count")
        elif config.model.neighbor_count == 26:
            issues.append("‚ùå Found legacy 26-connectivity in model.neighbor_count")
        elif config.model.neighbor_count == -1:
            warnings.append("‚úÖ Dynamic neighbor count enabled (neighbor_count = -1)")
        else:
            warnings.append(f"‚ÑπÔ∏è Static neighbor count: {config.model.neighbor_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º neighbor settings
    if hasattr(config, 'neighbors') and config.neighbors:
        if hasattr(config.neighbors, 'dynamic_count'):
            if config.neighbors.dynamic_count:
                warnings.append("‚úÖ Dynamic count enabled in NeighborSettings")
            else:
                issues.append("‚ùå Dynamic count disabled in NeighborSettings")
        
        if hasattr(config.neighbors, 'base_neighbor_count'):
            if config.neighbors.base_neighbor_count in [6, 26]:
                issues.append(f"‚ùå Found legacy base_neighbor_count: {config.neighbors.base_neighbor_count}")
    
    return {
        "issues": issues,
        "warnings": warnings,
        "legacy_check_passed": len(issues) == 0
    }


def check_lattice_size_consistency(config: SimpleProjectConfig) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ—à–µ—Ç–∫–∏"""
    
    lattice_dims = config.lattice.dimensions
    target_embedding_dim = config.training_embedding.target_embedding_dim
    total_cells = lattice_dims[0] * lattice_dims[1] * lattice_dims[2]
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
    expected_target_dim = total_cells // 8  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
    if abs(target_embedding_dim - expected_target_dim) > 10:
        issues.append(f"‚ö†Ô∏è target_embedding_dim ({target_embedding_dim}) may not match lattice size ({total_cells} cells)")
    
    return {
        "lattice_dimensions": lattice_dims,
        "total_cells": total_cells,
        "target_embedding_dim": target_embedding_dim,
        "expected_target_dim": expected_target_dim,
        "consistency_issues": issues,
        "dimensions_consistent": len(issues) == 0
    }


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å–µ–¥–µ–π"""
    
    print("üß™ DYNAMIC NEIGHBORS ANALYSIS")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.info("‚öôÔ∏è Loading central configuration...")
    config = SimpleProjectConfig()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º legacy –∑–Ω–∞—á–µ–Ω–∏—è
    print("\nüîç Checking for legacy neighbor counts...")
    legacy_check = check_legacy_neighbor_counts(config)
    
    for warning in legacy_check["warnings"]:
        print(f"   {warning}")
    for issue in legacy_check["issues"]:
        print(f"   {issue}")
    
    if legacy_check["legacy_check_passed"]:
        print("   ‚úÖ No legacy neighbor counts found")
    else:
        print("   ‚ùå Legacy neighbor counts detected!")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤
    print("\nüìè Checking lattice size consistency...")
    size_check = check_lattice_size_consistency(config)
    
    print(f"   üìê Lattice: {size_check['lattice_dimensions']} ({size_check['total_cells']} cells)")
    print(f"   üéØ Target embedding dim: {size_check['target_embedding_dim']}")
    print(f"   üìä Expected target dim: ~{size_check['expected_target_dim']}")
    
    for issue in size_check["consistency_issues"]:
        print(f"   {issue}")
    
    if size_check["dimensions_consistent"]:
        print("   ‚úÖ Dimensions are consistent")
    
    # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å–µ–¥–µ–π
    print(f"\nüéØ Analyzing neighbor distribution for {config.lattice.dimensions}...")
    neighbor_analysis = analyze_neighbor_distribution(config)
    
    print(f"\nüìä NEIGHBOR DISTRIBUTION ANALYSIS:")
    print(f"   üìè Lattice: {neighbor_analysis['lattice_info']['dimensions']}")
    print(f"   üî• Total cells: {neighbor_analysis['lattice_info']['total_cells']}")
    print(f"   üìê Max radius: {neighbor_analysis['lattice_info']['max_radius']:.2f}")
    
    thresholds = neighbor_analysis['lattice_info']['thresholds']
    print(f"   üîµ Local tier: 0 ‚Üí {thresholds['local']:.2f}")
    print(f"   üü° Functional tier: {thresholds['local']:.2f} ‚Üí {thresholds['functional']:.2f}")
    print(f"   üî¥ Distant tier: {thresholds['functional']:.2f} ‚Üí {thresholds['distant']:.2f}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑—Ü–æ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
    for i, sample in enumerate(neighbor_analysis['sample_analysis']):
        pos = sample['cell_position']
        counts = sample['tier_counts']
        percentages = sample['tier_percentages']
        
        if i == 0:
            location = "Corner"
        elif i == 1:
            location = "Center"
        else:
            location = "Opposite Corner"
        
        print(f"\n   üìç {location} cell {pos}:")
        print(f"     Total neighbors: {sample['total_neighbors']}")
        print(f"     üîµ Local: {counts['local']} ({percentages['local']:.1f}%)")
        print(f"     üü° Functional: {counts['functional']} ({percentages['functional']:.1f}%)")
        print(f"     üî¥ Distant: {counts['distant']} ({percentages['distant']:.1f}%)")
        
        stats = sample['distance_stats']
        print(f"     üìä Distance range: {stats['min']:.2f} ‚Üí {stats['max']:.2f} (avg: {stats['avg']:.2f})")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "config_check": {
            "legacy_check": legacy_check,
            "size_check": size_check
        },
        "neighbor_analysis": neighbor_analysis,
        "analysis_timestamp": "2025-01-01T00:00:00"  # Placeholder
    }
    
    results_file = Path("dynamic_neighbors_analysis.json")
    with open(results_file, 'w') as f:
        json.dump(results, f, indent=2)
    
    print(f"\nüìÑ Detailed results saved to: {results_file}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\nüèÜ FINAL ASSESSMENT:")
    
    all_checks_passed = (
        legacy_check["legacy_check_passed"] and
        size_check["dimensions_consistent"]
    )
    
    if all_checks_passed:
        print("‚úÖ All dynamic neighbor checks passed!")
        print("üöÄ System ready for dynamic neighbor computation")
    else:
        print("‚ö†Ô∏è Some issues found - review above")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (4,4,4) —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    test_dims = neighbor_analysis['sample_analysis'][0] if neighbor_analysis['sample_analysis'] else None
    if test_dims and config.lattice.dimensions != (8, 8, 8):
        print(f"\n‚ÑπÔ∏è NOTE: Current lattice size is {config.lattice.dimensions}")
        print("This may be expected for testing purposes")
        print("For real training, ensure lattice.dimensions = (8, 8, 8)")


if __name__ == "__main__":
    main()