"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è dataset –º–æ–¥—É–ª—è
===============================

–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å EnergyConfig —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏:
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏-—É—á–∏—Ç–µ–ª—è
- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö  
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

from dataclasses import dataclass, field
from typing import List, Optional, Dict, Any
from pathlib import Path
import torch

from ..config import EnergyConfig
from ..utils.logging import get_logger

logger = get_logger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GPU –∫–∞–∫ default device –¥–ª—è dataset –º–æ–¥—É–ª—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ energy_config.py)
if torch.cuda.is_available():
    torch.set_default_device('cuda')
    torch.set_default_dtype(torch.float32)
    logger.info(f"üöÄ Dataset Module: Default device set to CUDA ({torch.cuda.get_device_name()})")
else:
    logger.info("‚ö†Ô∏è Dataset Module: CUDA not available, using CPU")


@dataclass
class DatasetConfig:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è dataset –º–æ–¥—É–ª—è
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å EnergyConfig –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
    """
    
    # –ú–æ–¥–µ–ª—å-—É—á–∏—Ç–µ–ª—å
    teacher_model: str = "distilbert-base-uncased"
    use_local_model: bool = True  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    local_model_path: str = "models/local_cache/distilbert-base-uncased"
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Ä—è–¥–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    dataset_sources: List[str] = field(default_factory=lambda: ["precomputed", "snli"])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    batch_size: int = 32
    max_samples_per_source: Optional[int] = None  # None = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    shuffle_data: bool = True
    normalize_embeddings: bool = True
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SNLI
    snli_fraction: float = 0.2  # –ö–∞–∫—É—é —á–∞—Å—Ç—å SNLI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (0.2 = 20%)
    snli_min_text_length: int = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    embedding_cache_enabled: bool = True
    cache_batch_size: int = 64
    max_cache_size_mb: int = 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –≤ MB
    
    # –ü—É—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    data_dir: str = "data"
    embeddings_dir: str = "data/embeddings"
    cache_dir: str = "cache"
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    validate_embeddings: bool = True
    min_embedding_norm: float = 0.01
    max_embedding_norm: float = 100.0
    check_nan_inf: bool = True
    
    # GPU/CPU –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –∏–∑ EnergyConfig –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã)
    device: Optional[str] = None
    dtype: Optional[torch.dtype] = None
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        valid_sources = {"precomputed", "snli", "cache"}
        invalid = set(self.dataset_sources) - valid_sources
        if invalid:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {invalid}. –î–æ—Å—Ç—É–ø–Ω—ã: {valid_sources}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        assert 0 < self.snli_fraction <= 1.0, "snli_fraction –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ (0, 1]"
        assert self.batch_size > 0, "batch_size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0"
        assert self.cache_batch_size > 0, "cache_batch_size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0"
        assert self.max_cache_size_mb > 0, "max_cache_size_mb –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–µ–π
        Path(self.data_dir).mkdir(parents=True, exist_ok=True)
        Path(self.embeddings_dir).mkdir(parents=True, exist_ok=True) 
        Path(self.cache_dir).mkdir(parents=True, exist_ok=True)
        
        # –õ–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info(f"DatasetConfig initialized: sources={self.dataset_sources}, "
                   f"teacher_model={self.teacher_model}, use_local={self.use_local_model}")
    
    def get_absolute_local_model_path(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        return Path(self.local_model_path).resolve()
    
    def get_absolute_embeddings_dir(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        return Path(self.embeddings_dir).resolve()
    
    def get_absolute_cache_dir(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞"""
        return Path(self.cache_dir).resolve()
    
    def update_from_energy_config(self, energy_config: EnergyConfig):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ EnergyConfig
        
        Args:
            energy_config: –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è energy_flow
        """
        # –ù–∞—Å–ª–µ–¥—É–µ–º device –∏ dtype –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
        if self.device is None:
            self.device = energy_config.device
        if self.dtype is None:
            self.dtype = energy_config.dtype
            
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º batch_size –ø–æ–¥ —Ä–µ–∂–∏–º
        if hasattr(energy_config, 'batch_size'):
            # –î–ª—è dataset –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ batch_size —á—Ç–æ –∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            self.batch_size = energy_config.batch_size
            
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–¥ —Ä–µ–∂–∏–º (DEBUG/EXPERIMENT/OPTIMIZED)
        if energy_config.lattice_width <= 30:  # DEBUG mode
            self.max_samples_per_source = 1000
            self.cache_batch_size = 32
            self.max_cache_size_mb = 256
        elif energy_config.lattice_width <= 70:  # EXPERIMENT mode  
            self.max_samples_per_source = 5000
            self.cache_batch_size = 64
            self.max_cache_size_mb = 512
        else:  # OPTIMIZED mode
            self.max_samples_per_source = None  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            self.cache_batch_size = 128
            self.max_cache_size_mb = 1024
            
        logger.info(f"Dataset config updated from EnergyConfig: "
                   f"device={self.device}, batch_size={self.batch_size}, "
                   f"max_samples={self.max_samples_per_source}")
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            k: v for k, v in self.__dict__.items() 
            if not k.startswith('_') and not callable(v)
        }


def create_dataset_config_from_energy(energy_config: EnergyConfig, **overrides) -> DatasetConfig:
    """
    –°–æ–∑–¥–∞—Ç—å DatasetConfig –Ω–∞ –æ—Å–Ω–æ–≤–µ EnergyConfig —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    
    Args:
        energy_config: –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è energy_flow
        **overrides: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        
    Returns:
        DatasetConfig –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥ energy_config
    """
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏
    dataset_config = DatasetConfig(**overrides)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ energy_config
    dataset_config.update_from_energy_config(energy_config)
    
    return dataset_config


def create_debug_dataset_config() -> DatasetConfig:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    return DatasetConfig(
        dataset_sources=["precomputed"],  # –¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        max_samples_per_source=500,
        batch_size=8,
        cache_batch_size=16,
        max_cache_size_mb=128,
        snli_fraction=0.05,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å SNLI
        validate_embeddings=True
    )


def create_production_dataset_config() -> DatasetConfig:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–∞"""
    return DatasetConfig(
        dataset_sources=["precomputed", "snli", "cache"],  # –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        max_samples_per_source=None,  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        batch_size=32,
        cache_batch_size=128,
        max_cache_size_mb=2048,
        snli_fraction=0.3,  # –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SNLI
        validate_embeddings=True
    )


@dataclass
class GeneratorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    mode: str = "experiment"  # debug, experiment, production, custom
    target_pairs: int = 5000
    sources: List[str] = field(default_factory=lambda: ["precomputed", "snli"])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SNLI
    snli_fraction: float = 0.2
    snli_min_text_length: int = 10
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    normalize_embeddings: bool = True
    shuffle_data: bool = True
    validate_data: bool = True
    
    # –ü—É—Ç–∏ –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    output_dir: str = "data/energy_flow/active"
    archive_dir: str = "data/energy_flow/archive"
    name_template: str = "{mode}_{sources}_{count}pairs_{timestamp}"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    save_text_pairs: bool = True  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    save_metadata: bool = True
    max_file_size_mb: int = 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        assert self.mode in ["debug", "experiment", "production", "custom"], \
            f"Invalid mode: {self.mode}"
        assert self.target_pairs > 0, "target_pairs must be > 0"
        assert 0 < self.snli_fraction <= 1.0, "snli_fraction must be in (0, 1]"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path(self.output_dir).mkdir(parents=True, exist_ok=True)
        Path(self.archive_dir).mkdir(parents=True, exist_ok=True)
    
    def get_sources_string(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        if set(self.sources) == {"precomputed", "snli"}:
            return "mixed"
        elif self.sources == ["snli"]:
            return "snli"
        elif self.sources == ["precomputed"]:
            return "precomputed"
        else:
            return "custom"
    
    def generate_filename(self, actual_count: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        sources_str = self.get_sources_string()
        
        filename = self.name_template.format(
            mode=self.mode,
            sources=sources_str,
            count=actual_count,
            timestamp=timestamp
        )
        
        return f"{filename}.pt"


# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
def create_debug_generator_config() -> GeneratorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    return GeneratorConfig(
        mode="debug",
        target_pairs=500,
        sources=["precomputed"],  # –¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        snli_fraction=0.05,
        max_file_size_mb=64
    )


def create_experiment_generator_config() -> GeneratorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    return GeneratorConfig(
        mode="experiment", 
        target_pairs=5000,
        sources=["precomputed", "snli"],
        snli_fraction=0.2,
        max_file_size_mb=256
    )


def create_production_generator_config() -> GeneratorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –æ–±—É—á–µ–Ω–∏—è"""
    return GeneratorConfig(
        mode="production",
        target_pairs=50000,
        sources=["precomputed", "snli"],
        snli_fraction=0.3,
        max_file_size_mb=1024
    )