#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è Lattice 3D

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è LatticeConfig
3. –†–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç Position3D  
4. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å NeighborTopology
5. –ó–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML
"""

import sys
import traceback
from pathlib import Path

def test_imports():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ lattice_3d")
    
    try:
        from core.lattice_3d import (
            LatticeConfig, Position3D, NeighborTopology, 
            BoundaryCondition, Face, load_lattice_config,
            create_lattice_from_config, validate_lattice_config,
            Coordinates3D, Dimensions3D, Lattice3D
        )
        print("  ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_lattice_config():
    """–¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è LatticeConfig"""
    print("\nüß™ –¢–µ—Å—Ç 2: LatticeConfig —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    
    try:
        from core.lattice_3d import LatticeConfig, BoundaryCondition, Face
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = LatticeConfig(
            dimensions=(3, 3, 3),
            boundary_conditions=BoundaryCondition.WALLS
        )
        
        print(f"  ‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config.dimensions}")
        print(f"    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫: {config.total_cells}")
        print(f"    - –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {config.boundary_conditions.value}")
        print(f"    - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {config.device}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        assert config.total_cells == 27, f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫: {config.total_cells}"
        assert config.dimensions == (3, 3, 3), f"–ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {config.dimensions}"
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        for bc in BoundaryCondition:
            test_config = LatticeConfig(dimensions=(5, 5, 5), boundary_conditions=bc)
            assert test_config.boundary_conditions == bc
            print(f"    - –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è {bc.value}: ‚úÖ")
            
        print("  ‚úÖ LatticeConfig –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ LatticeConfig: {e}")
        traceback.print_exc()
        return False


def test_position_3d():
    """–¢–µ—Å—Ç 3: –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç Position3D"""
    print("\nüß™ –¢–µ—Å—Ç 3: Position3D - —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
    
    try:
        from core.lattice_3d import Position3D
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        pos_system = Position3D((4, 4, 4))
        print(f"  ‚úÖ Position3D —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–µ—à–µ—Ç–∫–∏ {pos_system.dimensions}")
        
        # –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        test_coords = [
            (0, 0, 0),    # –£–≥–æ–ª
            (1, 1, 1),    # –¶–µ–Ω—Ç—Ä
            (3, 3, 3),    # –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —É–≥–æ–ª
            (2, 1, 3),    # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
        ]
        
        for coords in test_coords:
            # 3D -> –ª–∏–Ω–µ–π–Ω—ã–π -> 3D
            linear_idx = pos_system.to_linear_index(coords)
            back_coords = pos_system.to_3d_coordinates(linear_idx)
            
            assert coords == back_coords, f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å: {coords} -> {linear_idx} -> {back_coords}"
            print(f"    - {coords} ‚Üî {linear_idx}: ‚úÖ")
            
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        valid_coords = (1, 1, 1)
        invalid_coords = (5, 5, 5)  # –í–Ω–µ –≥—Ä–∞–Ω–∏—Ü
        
        assert pos_system.is_valid_coordinates(valid_coords), "–í–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É"
        assert not pos_system.is_valid_coordinates(invalid_coords), "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É"
        
        # –¢–µ—Å—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        coord1, coord2 = (0, 0, 0), (1, 1, 1)
        manhattan_dist = pos_system.manhattan_distance(coord1, coord2)
        euclidean_dist = pos_system.euclidean_distance(coord1, coord2)
        
        assert manhattan_dist == 3, f"–ù–µ–≤–µ—Ä–Ω–æ–µ –º–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {manhattan_dist}"
        assert abs(euclidean_dist - 1.732) < 0.01, f"–ù–µ–≤–µ—Ä–Ω–æ–µ –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {euclidean_dist}"
        
        print(f"    - –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {coord1}-{coord2}: {manhattan_dist}")
        print(f"    - –ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {coord1}-{coord2}: {euclidean_dist:.3f}")
        
        print("  ‚úÖ Position3D –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ Position3D: {e}")
        traceback.print_exc()
        return False


def test_neighbor_topology():
    """–¢–µ—Å—Ç 4: –¢–æ–ø–æ–ª–æ–≥–∏—è —Å–æ—Å–µ–¥—Å—Ç–≤–∞ NeighborTopology"""
    print("\nüß™ –¢–µ—Å—Ç 4: NeighborTopology - —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Å–µ–¥—Å—Ç–≤–∞")
    
    try:
        from core.lattice_3d import NeighborTopology, LatticeConfig, BoundaryCondition
        
        # –¢–µ—Å—Ç —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ "—Å—Ç–µ–Ω–∫–∏"
        config = LatticeConfig(dimensions=(3, 3, 3), boundary_conditions=BoundaryCondition.WALLS)
        topology = NeighborTopology(config)
        
        print(f"  ‚úÖ NeighborTopology —Å–æ–∑–¥–∞–Ω –¥–ª—è {config.dimensions} —Å {config.boundary_conditions.value}")
        
        # –¢–µ—Å—Ç —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 —Å–æ—Å–µ–¥–µ–π)
        center_coords = (1, 1, 1)
        neighbors = topology.get_neighbors(center_coords)
        
        print(f"    - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞ {center_coords} –∏–º–µ–µ—Ç {len(neighbors)} —Å–æ—Å–µ–¥–µ–π")
        assert len(neighbors) == 6, f"–£ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 —Å–æ—Å–µ–¥–µ–π, –∞ –Ω–µ {len(neighbors)}"
        
        expected_neighbors = [
            (0, 1, 1), (2, 1, 1),  # ¬±X
            (1, 0, 1), (1, 2, 1),  # ¬±Y  
            (1, 1, 0), (1, 1, 2),  # ¬±Z
        ]
        
        for expected in expected_neighbors:
            assert expected in neighbors, f"–û–∂–∏–¥–∞–µ–º—ã–π —Å–æ—Å–µ–¥ {expected} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        # –¢–µ—Å—Ç —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –¥–ª—è —É–≥–ª–æ–≤–æ–π –∫–ª–µ—Ç–∫–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å–æ—Å–µ–¥–∞)
        corner_coords = (0, 0, 0)
        corner_neighbors = topology.get_neighbors(corner_coords)
        
        print(f"    - –£–≥–ª–æ–≤–∞—è –∫–ª–µ—Ç–∫–∞ {corner_coords} –∏–º–µ–µ—Ç {len(corner_neighbors)} —Å–æ—Å–µ–¥–µ–π")
        assert len(corner_neighbors) == 3, f"–£ —É–≥–ª–æ–≤–æ–π –∫–ª–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å–æ—Å–µ–¥–∞, –∞ –Ω–µ {len(corner_neighbors)}"
        
        # –¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        periodic_config = LatticeConfig(dimensions=(3, 3, 3), boundary_conditions=BoundaryCondition.PERIODIC)
        periodic_topology = NeighborTopology(periodic_config)
        
        periodic_corner_neighbors = periodic_topology.get_neighbors(corner_coords)
        print(f"    - –£–≥–ª–æ–≤–∞—è –∫–ª–µ—Ç–∫–∞ (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ): {len(periodic_corner_neighbors)} —Å–æ—Å–µ–¥–µ–π")
        assert len(periodic_corner_neighbors) == 6, "–í –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —É –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ 6 —Å–æ—Å–µ–¥–µ–π"
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–ø–æ–ª–æ–≥–∏–∏
        stats = topology.validate_topology()
        print(f"    - –¢–æ–ø–æ–ª–æ–≥–∏—è –≤–∞–ª–∏–¥–Ω–∞: —Å–∏–º–º–µ—Ç—Ä–∏—è={stats['symmetry_check']}")
        print(f"    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å–µ–¥–µ–π: {stats['neighbor_counts']}")
        
        assert stats['symmetry_check'], "–¢–æ–ø–æ–ª–æ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π"
        
        print("  ‚úÖ NeighborTopology –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ NeighborTopology: {e}")
        traceback.print_exc()
        return False


def test_config_loading():
    """–¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML"""
    print("\nüß™ –¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML")
    
    try:
        from core.lattice_3d import load_lattice_config, create_lattice_from_config
        
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        config = load_lattice_config()
        print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ YAML: {config.dimensions}")
        print(f"    - –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {config.boundary_conditions.value}")
        print(f"    - GPU –≤–∫–ª—é—á–µ–Ω: {config.gpu_enabled}")
        print(f"    - –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è cell_prototype: {config.auto_sync_cell_config}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        assert isinstance(config.dimensions, tuple), "–†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å tuple"
        assert len(config.dimensions) == 3, "–†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 3D"
        assert all(dim > 0 for dim in config.dimensions), "–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏"
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—à–µ—Ç–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        lattice = create_lattice_from_config()
        print(f"  ‚úÖ Lattice3D —Å–æ–∑–¥–∞–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print(f"    - –†–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: {lattice.config.dimensions}")
        print(f"    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫: {lattice.config.total_cells}")
        
        print("  ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False


def test_integration():
    """–¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    try:
        from core.lattice_3d import (
            LatticeConfig, Position3D, NeighborTopology, 
            BoundaryCondition, validate_lattice_config
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = LatticeConfig(
            dimensions=(5, 5, 5),
            boundary_conditions=BoundaryCondition.PERIODIC,
            cache_neighbors=True,
            validate_connections=True
        )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validation_result = validate_lattice_config(config)
        print(f"  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {validation_result['valid']}")
        
        if validation_result['warnings']:
            for warning in validation_result['warnings']:
                print(f"    ‚ö†Ô∏è  {warning}")
                
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        pos_system = Position3D(config.dimensions)
        topology = NeighborTopology(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        total_positions = pos_system.total_positions
        assert total_positions == config.total_cells, "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ø–æ–ª–æ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
        all_coords = pos_system.get_all_coordinates()
        neighbor_counts = []
        
        for coords in all_coords:
            neighbors = topology.get_neighbors(coords)
            neighbor_counts.append(len(neighbors))
            
        # –í –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —É –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 —Å–æ—Å–µ–¥–µ–π
        assert all(count == 6 for count in neighbor_counts), "–í –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —É –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 —Å–æ—Å–µ–¥–µ–π"
        
        print(f"    - –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total_positions}")
        print(f"    - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ—Å–µ–¥—Å—Ç–≤–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: ‚úÖ")
        print(f"    - –í—Å–µ –∫–ª–µ—Ç–∫–∏ –∏–º–µ—é—Ç {neighbor_counts[0]} —Å–æ—Å–µ–¥–µ–π")
        
        print("  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–∞")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø LATTICE 3D")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_lattice_config,
        test_position_3d,
        test_neighbor_topology,
        test_config_loading,
        test_integration,
    ]
    
    passed = 0
    total = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç {test_func.__name__} –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –ú–æ–¥—É–ª—å lattice_3d –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        return True
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 