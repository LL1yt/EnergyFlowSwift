#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç BCM –º–µ—Ç–∞–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ (–®–∞–≥ 3.2)
=================================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é Bienenstock-Cooper-Munro (BCM) –ø—Ä–∞–≤–∏–ª–∞ –æ–±—É—á–µ–Ω–∏—è:
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å STDP –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º
- –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
- –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–∞–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å

–†–µ–∑—É–ª—å—Ç–∞—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ BCM –ø—Ä–∞–≤–∏–ª–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ç—å.
"""

import sys
import torch
import numpy as np
import time
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.absolute()))

from core.lattice_3d.config import load_lattice_config
from core.lattice_3d.lattice import create_lattice_from_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_bcm_initialization():
    """–¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BCM –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤"""
    print("üß† –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BCM –º–µ—Ç–∞–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_lattice_config("config/bcm_metaplasticity_test.yaml")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    assert config.enable_metaplasticity == True
    assert config.enable_plasticity == True
    assert config.enable_competitive_learning == True

    print(f"  ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.dimensions} —Ä–µ—à–µ—Ç–∫–∞")
    print(f"  ‚úì BCM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: tau_theta={config.bcm_config['tau_theta']}")
    print(
        f"  ‚úì –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä–æ–≥–æ–≤: [{config.bcm_config['min_threshold']}, {config.bcm_config['max_threshold']}]"
    )

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ config –æ–±—ä–µ–∫—Ç–∞
    from core.lattice_3d.lattice import Lattice3D

    lattice = Lattice3D(config)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ BCM –º–µ—Ö–∞–Ω–∏–∑–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    assert hasattr(lattice, "adaptive_threshold")
    assert lattice.adaptive_threshold is not None
    assert lattice.enable_metaplasticity == True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
    thresholds = lattice.adaptive_threshold.thresholds
    assert thresholds.shape == (config.total_cells,)
    assert torch.all(thresholds >= config.bcm_config["min_threshold"])
    assert torch.all(thresholds <= config.bcm_config["max_threshold"])

    print(f"  ‚úì –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {thresholds.shape}")
    print(
        f"  ‚úì –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏: min={thresholds.min():.4f}, max={thresholds.max():.4f}"
    )
    print(
        f"  ‚úì –†–µ—à–µ—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞: {config.total_cells} –∫–ª–µ—Ç–æ–∫, {config.neighbors} —Å–æ—Å–µ–¥–µ–π"
    )

    return lattice, config


def test_bcm_threshold_adaptation():
    """–¢–µ—Å—Ç 2: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    print("\nüîÑ –¢–µ—Å—Ç 2: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")

    lattice, config = test_bcm_initialization()

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    initial_thresholds = lattice.adaptive_threshold.thresholds.clone()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–≤–æ–¥ –¥–ª—è —Å—Ç–∏–º—É–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    total_cells = config.total_cells
    input_size = 2  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    num_input_cells = len(lattice.input_indices)

    # –°–∏–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫
    external_input = (
        torch.randn(num_input_cells, input_size) * 2.0
    )  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞

    print(
        f"  ‚úì –í–Ω–µ—à–Ω–∏–π –≤–≤–æ–¥: {external_input.shape}, –∞–º–ø–ª–∏—Ç—É–¥–∞={external_input.abs().mean():.3f}"
    )

    # –ù–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
    adaptation_steps = 10
    threshold_history = []

    for step in range(adaptation_steps):
        # Forward pass
        states = lattice.forward(external_input)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤
        current_thresholds = lattice.adaptive_threshold.thresholds.clone()
        threshold_history.append(
            {
                "step": step,
                "thresholds": current_thresholds,
                "mean_threshold": current_thresholds.mean().item(),
                "std_threshold": current_thresholds.std().item(),
            }
        )

        # –ò–∑–º–µ–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–≤–æ–¥ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        external_input = torch.randn(num_input_cells, input_size) * (2.0 + step * 0.1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä–æ–≥–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å
    final_thresholds = lattice.adaptive_threshold.thresholds
    threshold_change = torch.abs(final_thresholds - initial_thresholds).mean()

    print(f"  ‚úì –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∑–∞ {adaptation_steps} —à–∞–≥–æ–≤:")
    print(
        f"    –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏: {initial_thresholds.mean():.4f} ¬± {initial_thresholds.std():.4f}"
    )
    print(
        f"    –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏: {final_thresholds.mean():.4f} ¬± {final_thresholds.std():.4f}"
    )
    print(f"    –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {threshold_change:.4f}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å
    assert (
        threshold_change > 1e-4
    ), f"–ü–æ—Ä–æ–≥–∏ –Ω–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å: –∏–∑–º–µ–Ω–µ–Ω–∏–µ={threshold_change}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä–æ–≥–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö
    assert torch.all(final_thresholds >= config.bcm_config["min_threshold"])
    assert torch.all(final_thresholds <= config.bcm_config["max_threshold"])

    print(f"  ‚úì –ê–¥–∞–ø—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ—Ä–æ–≥–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö")

    return lattice, config, threshold_history


def test_bcm_stdp_integration():
    """–¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è BCM —Å STDP"""
    print("\nüîó –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è BCM —Å STDP...")

    lattice, config, _ = test_bcm_threshold_adaptation()

    # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è STDP
    num_input_cells = len(lattice.input_indices)
    input_size = 2

    # –ù–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    for step in range(5):
        external_input = torch.randn(num_input_cells, input_size) * 1.5
        lattice.forward(external_input)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∞
    assert len(lattice.activity_history) >= 2
    print(f"  ‚úì –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {len(lattice.activity_history)} –∑–∞–ø–∏—Å–µ–π")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º BCM-enhanced STDP
    stdp_stats = lattice.apply_stdp_update()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É STDP
    assert "stdp_updates" in stdp_stats
    assert "active_cells" in stdp_stats

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º BCM-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if lattice.enable_metaplasticity:
        assert "bcm_updates" in stdp_stats
        assert "adaptive_thresholds" in stdp_stats

        bcm_updates = stdp_stats["bcm_updates"]
        print(f"  ‚úì BCM LTP –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {bcm_updates.get('bcm_ltp_updates', 0)}")
        print(f"  ‚úì BCM LTD –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {bcm_updates.get('bcm_ltd_updates', 0)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é STDP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stdp_updates = stdp_stats["stdp_updates"]
    print(f"  ‚úì –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π STDP LTP: {stdp_updates['ltp_updates']}")
    print(f"  ‚úì –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π STDP LTD: {stdp_updates['ltd_updates']}")
    print(f"  ‚úì –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–µ—Ç–∫–∏: {stdp_stats['active_cells']}")
    print(f"  ‚úì –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤: {stdp_stats['total_weight_change']:.6f}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Å–æ–≤ —Å–≤—è–∑–µ–π
    weights_stats = stdp_stats["connection_weights_stats"]
    print(f"  ‚úì –í–µ—Å–∞ —Å–≤—è–∑–µ–π: {weights_stats['mean']:.4f} ¬± {weights_stats['std']:.4f}")

    return lattice, config, stdp_stats


def test_combined_plasticity():
    """–¢–µ—Å—Ç 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å (STDP + –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ + BCM)"""
    print("\nüéØ –¢–µ—Å—Ç 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å...")

    lattice, config, _ = test_bcm_stdp_integration()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å
    combined_stats = lattice.apply_combined_plasticity()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    assert "stdp" in combined_stats
    assert "competitive" in combined_stats
    assert "combined_stats" in combined_stats

    stdp_stats = combined_stats["stdp"]
    competitive_stats = combined_stats["competitive"]
    overall_stats = combined_stats["combined_stats"]

    print(f"  ‚úì STDP –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    if "stdp_updates" in stdp_stats:
        print(f"    LTP: {stdp_stats['stdp_updates']['ltp_updates']}")
        print(f"    LTD: {stdp_stats['stdp_updates']['ltd_updates']}")
    if "bcm_updates" in stdp_stats:
        print(f"    BCM LTP: {stdp_stats['bcm_updates']['bcm_ltp_updates']}")
        print(f"    BCM LTD: {stdp_stats['bcm_updates']['bcm_ltd_updates']}")

    print(f"  ‚úì –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:")
    if isinstance(competitive_stats, dict) and "winner_updates" in competitive_stats:
        print(f"    –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {competitive_stats['winner_updates']}")
        print(f"    –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ: {competitive_stats['lateral_inhibition_updates']}")
        print(f"    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: {competitive_stats.get('normalized_cells', 0)}")

    print(f"  ‚úì –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"    –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–µ—Ç–∫–∏: {overall_stats['total_active_cells']}")
    print(f"    –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏: {overall_stats['plasticity_operations']}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤–µ—Å–æ–≤
    weights_stability = overall_stats["weight_stability"]
    print(
        f"    –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤–µ—Å–æ–≤: {weights_stability['mean']:.4f} ¬± {weights_stability['std']:.4f}"
    )

    return lattice, config, combined_stats


def test_long_term_stability():
    """–¢–µ—Å—Ç 5: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å BCM"""
    print("\n‚öñÔ∏è –¢–µ—Å—Ç 5: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å...")

    lattice, config, _ = test_combined_plasticity()

    # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    num_epochs = 20
    stability_metrics = []

    num_input_cells = len(lattice.input_indices)
    input_size = 2

    print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ {num_epochs} —ç–ø–æ—Ö–∞—Ö...")

    for epoch in range(num_epochs):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        for micro_step in range(3):
            external_input = torch.randn(num_input_cells, input_size) * (
                1.0 + epoch * 0.05
            )
            lattice.forward(external_input)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å
        combined_stats = lattice.apply_combined_plasticity()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if "combined_stats" in combined_stats:
            stability = combined_stats["combined_stats"]["weight_stability"]
            thresholds = lattice.adaptive_threshold.thresholds

            stability_metrics.append(
                {
                    "epoch": epoch,
                    "weight_mean": stability["mean"],
                    "weight_std": stability["std"],
                    "threshold_mean": thresholds.mean().item(),
                    "threshold_std": thresholds.std().item(),
                    "active_cells": combined_stats["combined_stats"][
                        "total_active_cells"
                    ],
                }
            )

    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    print(f"  ‚úì –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:")

    final_metrics = stability_metrics[-1]
    initial_metrics = stability_metrics[0]

    weight_drift = abs(final_metrics["weight_mean"] - initial_metrics["weight_mean"])
    threshold_drift = abs(
        final_metrics["threshold_mean"] - initial_metrics["threshold_mean"]
    )

    print(f"    –î—Ä–µ–π—Ñ –≤–µ—Å–æ–≤: {weight_drift:.6f}")
    print(f"    –î—Ä–µ–π—Ñ –ø–æ—Ä–æ–≥–æ–≤: {threshold_drift:.6f}")
    print(
        f"    –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞: {final_metrics['weight_mean']:.4f} ¬± {final_metrics['weight_std']:.4f}"
    )
    print(
        f"    –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏: {final_metrics['threshold_mean']:.4f} ¬± {final_metrics['threshold_std']:.4f}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞
    assert weight_drift < 0.5, f"–í–µ—Å–∞ —Å–ª–∏—à–∫–æ–º –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã: –¥—Ä–µ–π—Ñ={weight_drift}"
    assert threshold_drift < 0.1, f"–ü–æ—Ä–æ–≥–∏ —Å–ª–∏—à–∫–æ–º –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã: –¥—Ä–µ–π—Ñ={threshold_drift}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä–æ–≥–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
    final_thresholds = lattice.adaptive_threshold.thresholds
    assert torch.all(final_thresholds >= config.bcm_config["min_threshold"])
    assert torch.all(final_thresholds <= config.bcm_config["max_threshold"])

    print(f"  ‚úì –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

    return lattice, config, stability_metrics


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BCM –º–µ—Ç–∞–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏"""
    print("üß† –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç BCM –º–µ—Ç–∞–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ (–®–∞–≥ 3.2)")
    print("=" * 60)

    start_time = time.time()

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        test_bcm_initialization()
        test_bcm_threshold_adaptation()
        test_bcm_stdp_integration()
        test_combined_plasticity()
        lattice, config, stability_metrics = test_long_term_stability()

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –†–µ—à–µ—Ç–∫–∞: {config.dimensions} = {config.total_cells} –∫–ª–µ—Ç–æ–∫")
        print(f"  –°–æ—Å–µ–¥–µ–π –Ω–∞ –∫–ª–µ—Ç–∫—É: {config.neighbors}")
        print(f"  BCM tau_theta: {config.bcm_config['tau_theta']}")
        print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞")

        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
        final_thresholds = lattice.adaptive_threshold.thresholds
        print(
            f"  –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏: {final_thresholds.mean():.4f} ¬± {final_thresholds.std():.4f}"
        )

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        total_time = time.time() - start_time
        print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f}s")

        print("\n‚úÖ BCM –ú–ï–¢–ê–ü–õ–ê–°–¢–ò–ß–ù–û–°–¢–¨ –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback

        traceback.print_exc()
        return False

    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
