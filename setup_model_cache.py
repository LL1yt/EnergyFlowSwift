#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π
============================================

–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è RTX 5090.
"""

import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

from new_rebuild.utils.model_cache import (
    get_model_cache_manager, 
    setup_model_cache,
    check_model_cache_status
)
from new_rebuild.config.simple_config import get_project_config
from new_rebuild.utils.logging import get_logger

logger = get_logger(__name__)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞"""
    
    logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π")
    logger.info("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_project_config()
    
    logger.info(f"üìÅ Cache directory: {config.embedding.local_models_dir}")
    logger.info(f"üîß Auto download: {config.embedding.auto_download_models}")
    logger.info(f"üíæ Prefer local: {config.embedding.prefer_local_models}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞:")
    status = check_model_cache_status()
    
    logger.info(f"  Cached models: {status['models_count']}")
    logger.info(f"  Total size: {status['total_size_mb']:.1f} MB")
    logger.info(f"  Cache dir: {status['cache_dir']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    for model, info in status['model_status'].items():
        cached_status = "‚úÖ Cached" if info['cached'] else "‚ùå Not cached"
        logger.info(f"    {model}: {cached_status}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—ç—à –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    logger.info("\nüîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π:")
    models_to_cache = ['distilbert-base-uncased']
    
    results = setup_model_cache(models_to_cache)
    
    # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    logger.info("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    for model, success in results.items():
        status = "‚úÖ Success" if success else "‚ùå Failed"
        logger.info(f"  {model}: {status}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    logger.info("\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:")
    final_status = check_model_cache_status()
    
    logger.info(f"  Cached models: {final_status['models_count']}")
    logger.info(f"  Total size: {final_status['total_size_mb']:.1f} MB")
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
    logger.info("\nüß™ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:")
    test_model_loading()
    
    logger.info("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def test_model_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞"""
    try:
        from new_rebuild.core.inference.text_decoder import SimpleTextDecoder
        
        config = get_project_config()
        decoder = SimpleTextDecoder(config)
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        import torch
        test_embeddings = torch.randn(2, 768)
        
        logger.info("  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ–¥–µ—Ä–∞...")
        decoded_texts = decoder.decode_embeddings(test_embeddings)
        
        logger.info("  ‚úÖ Decoder test successful!")
        for i, text in enumerate(decoded_texts):
            logger.info(f"    Test {i}: '{text[:50]}...'")
            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
        cache_stats = decoder.get_cache_stats()
        logger.info(f"  Cache stats: {cache_stats}")
        
    except Exception as e:
        logger.error(f"  ‚ùå Decoder test failed: {e}")


def show_cache_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ"""
    status = check_model_cache_status()
    
    print("\n" + "="*50)
    print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–≠–®–ï –ú–û–î–ï–õ–ï–ô")
    print("="*50)
    
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {status['cache_dir']}")
    print(f"üì¶ –ú–æ–¥–µ–ª–µ–π –≤ –∫—ç—à–µ: {status['models_count']}")
    print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {status['total_size_mb']:.1f} MB")
    
    if status['models']:
        print(f"\nüìã –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for model in status['models']:
            print(f"  ‚úÖ {model}")
    
    print(f"\nüîç –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π:")
    for model, info in status['model_status'].items():
        cached = "‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ" if info['cached'] else "‚ùå –ù–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ"
        print(f"  {model}: {cached}")
        if info['path']:
            print(f"    –ü—É—Ç—å: {info['path']}")


def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π"""
    logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π...")
    
    manager = get_model_cache_manager()
    manager.clear_cache()
    
    logger.info("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!")


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "info":
            show_cache_info()
        elif command == "clear":
            clear_cache()
        elif command == "setup":
            main()
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  python setup_model_cache.py setup  - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—ç—à")
            print("  python setup_model_cache.py info   - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            print("  python setup_model_cache.py clear  - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
    else:
        main()