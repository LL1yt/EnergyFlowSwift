"""
–¢–µ—Å—Ç –¥–ª—è SimpleNeuron - –ø—Ä–æ—Å—Ç–æ–π –Ω–µ–π—Ä–æ–Ω-–∞–≤—Ç–æ–º–∞—Ç
===============================================

–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ SimpleNeuron:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ (~1000 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
- –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
- –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import torch
import torch.nn as nn
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append('/mnt/c/Users/n0n4a/projects/AA')

from energy_flow.core.simple_neuron import SimpleNeuron, create_simple_neuron
from energy_flow.config import create_debug_config, set_energy_config

def test_simple_neuron_init():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SimpleNeuron"""
    print("\n=== –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SimpleNeuron ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = create_debug_config()
    set_energy_config(config)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    neuron = create_simple_neuron(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    total_params = sum(p.numel() for p in neuron.parameters())
    print(f"‚úÖ SimpleNeuron —Å–æ–∑–¥–∞–Ω —Å {total_params:,} –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    print(f"‚úÖ –í—Ö–æ–¥–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {neuron.coord_dim + neuron.embedding_dim}")
    print(f"‚úÖ –°–∫—Ä—ã—Ç–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {neuron.hidden_dim}")
    print(f"‚úÖ –í—ã—Ö–æ–¥–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {neuron.output_dim}")
    
    # –¶–µ–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ~1000
    target_params = 1000
    if total_params <= target_params * 1.5:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 150% –æ—Ç —Ü–µ–ª–∏
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –Ω–æ—Ä–º–µ (—Ü–µ–ª—å: ~{target_params})")
    else:
        print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ü–µ–ª—å: ~{target_params})")
    
    return neuron

def test_simple_neuron_forward():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞"""
    print("\n=== –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ SimpleNeuron ===")
    
    config = create_debug_config()
    set_energy_config(config)
    neuron = create_simple_neuron(config)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥—ã
    batch_size = 4
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    neuron = neuron.to(device)
    
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–∑–∏—Ü–∏–∏ –∏ —á–∞—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    positions = torch.tensor([
        [0, 0, 0],      # –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        [19, 19, 9],    # –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
        [10, 10, 5],    # –¶–µ–Ω—Ç—Ä
        [5, 15, 2]      # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
    ], dtype=torch.float32, device=device)
    
    embedding_parts = torch.randn(batch_size, config.embedding_per_cell, device=device)
    
    print(f"üìù –í—Ö–æ–¥—ã: positions={positions.shape}, embeddings={embedding_parts.shape}")
    
    # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
    with torch.no_grad():
        output = neuron(positions, embedding_parts)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥—ã
    print(f"‚úÖ –í—ã—Ö–æ–¥ SimpleNeuron: {output.shape}")
    print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: [{batch_size}, {config.neuron_output_dim}]")
    
    assert output.shape == (batch_size, config.neuron_output_dim), \
        f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞: {output.shape}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π
    output_mean = output.mean().item()
    output_std = output.std().item()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã—Ö–æ–¥–∞: mean={output_mean:.4f}, std={output_std:.4f}")
    
    return neuron, output

def test_coordinate_normalization():
    """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("\n=== –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ===")
    
    config = create_debug_config()
    set_energy_config(config)
    neuron = create_simple_neuron(config)
    
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    neuron = neuron.to(device)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö —Ä–µ—à–µ—Ç–∫–∏
    test_positions = torch.tensor([
        [0, 0, 0],                                    # –ú–∏–Ω–∏–º—É–º
        [config.lattice_width-1, config.lattice_height-1, config.lattice_depth-1],  # –ú–∞–∫—Å–∏–º—É–º
        [config.lattice_width//2, config.lattice_height//2, config.lattice_depth//2] # –¶–µ–Ω—Ç—Ä
    ], dtype=torch.float32, device=device)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
    normalized = neuron._normalize_coordinates(test_positions)
    
    print(f"üìç –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:")
    for i, pos in enumerate(test_positions):
        print(f"   {i}: {pos.cpu().numpy()}")
    
    print(f"üìç –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:")
    for i, pos in enumerate(normalized):
        print(f"   {i}: {pos.cpu().numpy()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω [-1, 1]
    within_range = (normalized >= -1.0) & (normalized <= 1.0)
    print(f"‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1]: {within_range.all()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–≥–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
    corners_correct = (
        torch.allclose(normalized[0], torch.tensor([-1., -1., -1.], device=device)) and
        torch.allclose(normalized[1], torch.tensor([1., 1., 1.], device=device)) and
        torch.allclose(normalized[2], torch.tensor([0., 0., 0.], device=device), atol=0.1)
    )
    print(f"‚úÖ –£–≥–ª—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {corners_correct}")
    
    return normalized

def test_positional_encoding():
    """–¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    
    config = create_debug_config()
    set_energy_config(config)
    neuron = create_simple_neuron(config)
    
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    neuron = neuron.to(device)
    
    # –†–∞–∑–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–∏–π –≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏
    positions = torch.tensor([
        [0, 0, 0],
        [10, 10, 5],
        [19, 19, 9]
    ], dtype=torch.float32, device=device)
    
    embedding_parts = torch.randn(3, config.embedding_per_cell, device=device)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    with torch.no_grad():
        patterns = neuron.compute_activation_pattern(positions, embedding_parts)
    
    print(f"‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {patterns.shape}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    pattern_diffs = []
    for i in range(len(patterns)):
        for j in range(i+1, len(patterns)):
            diff = torch.norm(patterns[i] - patterns[j]).item()
            pattern_diffs.append(diff)
            print(f"üìä –†–∞–∑–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ {i}-{j}: {diff:.4f}")
    
    avg_diff = sum(pattern_diffs) / len(pattern_diffs)
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ —Ä–∞–∑–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {avg_diff:.4f}")
    
    # –†–∞–∑–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–Ω–æ —Ä–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    distinct_patterns = avg_diff > 0.1
    print(f"‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –¥–∞—é—Ç —Ä–∞–∑–ª–∏—á–∏–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {distinct_patterns}")
    
    return patterns

def test_batch_consistency():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("\n=== –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    neuron = create_simple_neuron(config)
    
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    neuron = neuron.to(device)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    position = torch.tensor([[5, 8, 3]], dtype=torch.float32, device=device)
    embedding = torch.randn(1, config.embedding_per_cell, device=device)
    
    with torch.no_grad():
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É
        single_output = neuron(position, embedding)
        
        # –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        batch_positions = position.repeat(4, 1)
        batch_embeddings = embedding.repeat(4, 1)
        batch_output = neuron(batch_positions, batch_embeddings)
    
    print(f"üìù –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã—Ö–æ–¥: {single_output.shape}")
    print(f"üìù –ë–∞—Ç—á–µ–≤—ã–π –≤—ã—Ö–æ–¥: {batch_output.shape}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞—Ç—á–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    consistency_check = torch.allclose(batch_output[0], single_output[0], atol=1e-6)
    print(f"‚úÖ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏ –±–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {consistency_check}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –±–∞—Ç—á–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    batch_consistency = all(
        torch.allclose(batch_output[0], batch_output[i], atol=1e-6) 
        for i in range(1, batch_output.shape[0])
    )
    print(f"‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞—Ç—á–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ: {batch_consistency}")
    
    return single_output, batch_output

def test_lattice_dimensions():
    """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–µ—à–µ—Ç–∫–∏"""
    print("\n=== –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–µ—à–µ—Ç–∫–∏ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    neuron = create_simple_neuron(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    initial_dims = neuron._lattice_dims
    print(f"üìè –ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: {initial_dims}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    new_width, new_height, new_depth = 50, 50, 20
    neuron.set_lattice_dimensions(new_width, new_height, new_depth)
    
    updated_dims = neuron._lattice_dims
    print(f"üìè –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: {updated_dims}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    dims_updated = updated_dims == (new_width, new_height, new_depth)
    print(f"‚úÖ –†–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {dims_updated}")
    
    return updated_dims

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è SimpleNeuron")
    print("=" * 50)
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        neuron = test_simple_neuron_init()
        neuron, output = test_simple_neuron_forward()
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        normalized = test_coordinate_normalization()
        patterns = test_positional_encoding()
        single_out, batch_out = test_batch_consistency()
        dims = test_lattice_dimensions()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã SimpleNeuron –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {next(neuron.parameters()).device}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_params = sum(p.numel() for p in neuron.parameters())
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")
        print(f"üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã + {neuron.embedding_dim}D —ç–º–±–µ–¥–¥–∏–Ω–≥ ‚Üí {neuron.hidden_dim}D ‚Üí {neuron.output_dim}D")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)