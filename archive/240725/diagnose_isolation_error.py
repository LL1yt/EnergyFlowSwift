#!/usr/bin/env python3
"""
Diagnostic script to identify the root cause of cell isolation errors.
"""

import torch
import numpy as np
import sys
import os

# Add the new_rebuild path
sys.path.insert(0, 'new_rebuild')

from new_rebuild.config import create_debug_config, set_project_config

def diagnose_isolation_error():
    """Diagnose why cells 106 and 331 have 0 neighbors."""
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫...")
    
    # Load debug configuration
    config = create_debug_config()
    set_project_config(config)
    
    # Get lattice dimensions
    lattice_size = config.lattice.dimensions[0]  # 15 for debug mode
    total_cells = config.lattice.total_cells
    
    print(f"üìä –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {lattice_size}x{lattice_size}x{lattice_size} = {total_cells} –∫–ª–µ—Ç–æ–∫")
    
    # Check adaptive radius from DebugPreset
    adaptive_radius = config.lattice.max_radius
    print(f"‚öôÔ∏è  –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å: {adaptive_radius} (0.4 √ó {lattice_size})")
    
    # Check distance thresholds
    local_threshold = config.lattice.local_distance_threshold
    functional_threshold = config.lattice.functional_distance_threshold
    distant_threshold = config.lattice.distant_distance_threshold
    
    print(f"üìè –ü–æ—Ä–æ–≥–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π:")
    print(f"   LOCAL: ‚â§{local_threshold:.2f}")
    print(f"   FUNCTIONAL: ‚â§{functional_threshold:.2f}")
    print(f"   DISTANT: ‚â§{distant_threshold:.2f}")
    
    # Calculate expected neighbors for boundary cells
    max_distance = adaptive_radius
    
    # Check specific problematic cells
    problem_cells = [106, 331]
    
    # Create distance calculator
    from new_rebuild.core.moe.distance_calculator import DistanceCalculator
    distance_calc = DistanceCalculator(config.lattice.dimensions)
    
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫:")
    
    for cell_id in problem_cells:
        if cell_id >= total_cells:
            print(f"‚ùå –ö–ª–µ—Ç–∫–∞ {cell_id} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–µ—à–µ—Ç–∫–∏ (–º–∞–∫—Å: {total_cells-1})")
            continue
            
        # Get cell position
        x, y, z = distance_calc.linear_to_3d(cell_id)
        print(f"\nüìç –ö–ª–µ—Ç–∫–∞ {cell_id}: –ø–æ–∑–∏—Ü–∏—è ({x}, {y}, {z})")
        
        # Check if it's at boundary
        is_boundary = any(p <= max_distance or p >= lattice_size - max_distance - 1 
                         for p in [x, y, z])
        print(f"   –ì—Ä–∞–Ω–∏—á–Ω–∞—è –∫–ª–µ—Ç–∫–∞: {'–î–∞' if is_boundary else '–ù–µ—Ç'}")
        
        # Calculate actual possible neighbors
        possible_neighbors = 0
        actual_distances = []
        
        for dx in range(-int(max_distance)-2, int(max_distance)+3):
            for dy in range(-int(max_distance)-2, int(max_distance)+3):
                for dz in range(-int(max_distance)-2, int(max_distance)+3):
                    if dx == 0 and dy == 0 and dz == 0:
                        continue
                    
                    nx, ny, nz = x + dx, y + dy, z + dz
                    if 0 <= nx < lattice_size and 0 <= ny < lattice_size and 0 <= nz < lattice_size:
                        distance = np.sqrt(dx*dx + dy*dy + dz*dz)
                        if distance <= max_distance:
                            possible_neighbors += 1
                            actual_distances.append(distance)
        
        print(f"   –í–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π: {possible_neighbors}")
        
        if possible_neighbors == 0:
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–∂–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ 0 —Å–æ—Å–µ–¥–µ–π!")
            print(f"   üí° –†–µ—à–µ–Ω–∏–µ: —É–≤–µ–ª–∏—á–∏—Ç—å adaptive_radius_ratio —Å 0.4 –¥–æ 0.6-0.8")
        elif possible_neighbors < 5:
            print(f"   ‚ö†Ô∏è  –ú–∞–ª–æ —Å–æ—Å–µ–¥–µ–π: {possible_neighbors} (–Ω–æ—Ä–º–∞–ª—å–Ω–æ > 10)")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ç–æ–ø–æ–ª–æ–≥–∏—é")
        else:
            print(f"   ‚úÖ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Å–µ–¥–µ–π: {possible_neighbors}")
    
    print(f"\nüìã –†–ï–ó–Æ–ú–ï:")
    print(f"   - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å: {adaptive_radius}")
    print(f"   - –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–∞–¥–∏—É—Å {adaptive_radius} –∫–ª–µ—Ç–æ–∫ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞")
    print(f"   - –î–ª—è 15√ó15√ó15 —Ä–µ—à–µ—Ç–∫–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫")
    print(f"   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 0.6-0.8 –¥–ª—è debug —Ä–µ–∂–∏–º–∞")

if __name__ == "__main__":
    diagnose_isolation_error()