#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π –¥–ª—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
===============================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π:
768D (DistilBERT) -> 400 —Å–∫–∞–ª—è—Ä–æ–≤ -> –æ–±—Ä–∞–±–æ—Ç–∫–∞ -> 768D (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å teacher)
"""

import torch
import sys
import os

# Default device –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ energy_config

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from energy_flow.config import create_debug_config, set_energy_config
from energy_flow.core.embedding_mapper import EnergyFlowMapper
from energy_flow.core import FlowProcessor
from energy_flow.utils.logging import setup_logging

def test_full_dimensions_pipeline():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π"""
    # –í–∫–ª—é—á–∞–µ–º debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    setup_logging(debug_mode=True, debug_categories=['energy'])
    
    print("üß™ –¢–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π energy_flow –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = create_debug_config()
    set_energy_config(config)
    
    print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   –†–µ—à–µ—Ç–∫–∞: {config.lattice_width}x{config.lattice_height}x{config.lattice_depth}")
    print(f"   –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å: {config.lattice_width * config.lattice_height} –∫–ª–µ—Ç–æ–∫")
    print(f"   –≠–º–±–µ–¥–¥–∏–Ω–≥ —É—á–∏—Ç–µ–ª—è: {config.input_embedding_dim_from_teacher}D")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    mapper = EnergyFlowMapper(config)
    processor = FlowProcessor(config)
    
    # –≠–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç DistilBERT
    batch_size = 2
    teacher_embeddings = torch.randn(batch_size, config.input_embedding_dim_from_teacher)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ GPU
    
    print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π:")
    print(f"   –í—Ö–æ–¥: {teacher_embeddings.shape}")
    
    # 1. –¢–µ—Å—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
    print("\n1Ô∏è‚É£ –í—Ö–æ–¥–Ω–æ–π –º–∞–ø–ø–∏–Ω–≥ (768D -> —Å–∫–∞–ª—è—Ä—ã):")
    cell_energies = mapper.map_to_surface(teacher_embeddings)
    print(f"   –°–æ–∑–¥–∞–Ω–æ {len(cell_energies)} –ø–æ—Ç–æ–∫–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–∏–ª —Å–∫–∞–ª—è—Ä–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é
    sample_energy = cell_energies[0][1]  # (position, energy, batch_idx)
    print(f"   –†–∞–∑–º–µ—Ä —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É: {sample_energy.shape}")
    assert sample_energy.shape == torch.Size([1]), f"–≠–Ω–µ—Ä–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫–∞–ª—è—Ä–Ω–æ–π, –ø–æ–ª—É—á–∏–ª–∏ {sample_energy.shape}"
    
    # 2. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ FlowProcessor
    print("\n2Ô∏è‚É£ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ FlowProcessor:")
    try:
        output_embeddings = processor.forward(teacher_embeddings, max_steps=5)
        print(f"   –í—ã—Ö–æ–¥: {output_embeddings.shape}")
        assert output_embeddings.shape == teacher_embeddings.shape, \
            f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {output_embeddings.shape} != {teacher_embeddings.shape}"
        
        print("   ‚úÖ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã!")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π:")
        print(f"   –í—Ö–æ–¥–Ω–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥: [{teacher_embeddings.min():.3f}, {teacher_embeddings.max():.3f}]")
        print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥: [{output_embeddings.min():.3f}, {output_embeddings.max():.3f}]")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å teacher'–æ–º
        print("\n4Ô∏è‚É£ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å teacher'–æ–º:")
        target_embeddings = torch.randn_like(teacher_embeddings)  # –≠–º—É–ª—è—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞-–æ—Ç–≤–µ—Ç–∞
        
        # MSE Loss
        mse_loss = torch.nn.functional.mse_loss(output_embeddings, target_embeddings)
        print(f"   MSE Loss: {mse_loss.item():.6f}")
        
        # Cosine Similarity
        cos_sim = torch.nn.functional.cosine_similarity(
            output_embeddings.view(-1), target_embeddings.view(-1), dim=0
        )
        print(f"   Cosine Similarity: {cos_sim.item():.6f}")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_energy_thresholds():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏"""
    print("\nüîß –¢–µ—Å—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤:")
    
    config = create_debug_config()
    print(f"   energy_threshold: {config.energy_threshold}")
    print(f"   spawn_threshold: {config.spawn_threshold}")
    print(f"   max_spawn_per_step: {config.max_spawn_per_step}")
    print(f"   carrier_dropout: {config.carrier_dropout}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫–∞–ª—è—Ä–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1]
    test_energies = torch.tensor([-0.9, -0.1, 0.0, 0.05, 0.1, 0.6, 0.8, 1.0])
    
    print("\n   –¢–µ—Å—Ç survival energy:")
    for energy in test_energies:
        survives = abs(energy.item()) > config.energy_threshold
        print(f"     –≠–Ω–µ—Ä–≥–∏—è {energy.item():+.2f}: {'‚úÖ –≤—ã–∂–∏–≤–∞–µ—Ç' if survives else '‚ùå —É–º–∏—Ä–∞–µ—Ç'}")
    
    print("\n   –¢–µ—Å—Ç spawn energy:")
    spawn_probs = torch.sigmoid(test_energies)  # –≠–º—É–ª—è—Ü–∏—è spawn probability
    for i, prob in enumerate(spawn_probs):
        spawns = prob.item() > config.spawn_threshold
        print(f"     Prob {prob.item():.3f}: {'üê£ spawn' if spawns else '‚≠ï no spawn'}")

if __name__ == "__main__":
    success = test_full_dimensions_pipeline()
    test_energy_thresholds()
    
    if success:
        print("\nüöÄ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ç—Ä–µ–Ω–µ—Ä–∞!")
    else:
        print("\nüõ†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.")