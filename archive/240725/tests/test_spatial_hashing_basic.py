#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –º–æ–¥—É–ª—è Spatial Hashing
=======================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- MortonEncoder: –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
- SpatialHashGrid: –≤—Å—Ç–∞–≤–∫–∞ –∏ –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–∞–º—è—Ç—å

–¶–µ–ª—å: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
- Query performance: O(1) amortized
- Memory usage: < 4MB –¥–ª—è 10‚Å∑ –∫–ª–µ—Ç–æ–∫
- –†–∞–∑–º–µ—Ä bins: 8¬≥-32¬≥ (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ)
"""

import sys
import os
import time
import traceback
import tracemalloc
import numpy as np
from typing import List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.lattice_3d.spatial_hashing import MortonEncoder, SpatialHashGrid


class SpatialHashingTest:
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ spatial hashing"""

    def __init__(self):
        self.test_results = {}

    def test_morton_encoder(self):
        """–¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ú–æ—Ä—Ç–æ–Ω–∞"""
        print("\nüß™ –¢–ï–°–¢ 1: Morton Encoder")

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏
        test_dimensions = [(8, 8, 8), (32, 32, 32), (64, 64, 64)]

        for dims in test_dimensions:
            encoder = MortonEncoder(dimensions=dims)

            # –¢–µ—Å—Ç –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            test_coords = [
                (0, 0, 0),
                (dims[0] // 2, dims[1] // 2, dims[2] // 2),
                (dims[0] - 1, dims[1] - 1, dims[2] - 1),
                (1, 2, 3),
                (dims[0] // 4, dims[1] // 3, dims[2] // 2),
            ]

            print(f"  –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {dims}")

            for coords in test_coords:
                # –ö–æ–¥–∏—Ä—É–µ–º
                encoded = encoder.encode(coords)
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
                decoded = encoder.decode(encoded)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
                assert coords == decoded, f"Encoding failed: {coords} != {decoded}"

                print(f"    ‚úÖ {coords} ‚Üí {encoded} ‚Üí {decoded}")

        print("  ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã Morton Encoder –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        self.test_results["morton_encoder"] = "PASS"

    def test_spatial_hash_grid_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç SpatialHashGrid"""
        print("\nüß™ –¢–ï–°–¢ 2: SpatialHashGrid - –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ—à–µ—Ç–∫—É
        dimensions = (32, 32, 32)
        cell_size = 8  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ä–µ—à–µ—Ç–∫–∏ 32¬≥

        grid = SpatialHashGrid(dimensions=dimensions, cell_size=cell_size)

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª–µ—Ç–∫–∏
        test_cells = [
            ((5, 5, 5), 125),  # –í —Ü–µ–Ω—Ç—Ä–µ bin
            ((7, 7, 7), 343),  # –ë–ª–∏–∑–∫–æ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
            ((15, 15, 15), 1000),  # –í –¥—Ä—É–≥–æ–º bin
            ((16, 16, 16), 1100),  # –†—è–¥–æ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        ]

        print(f"  –í—Å—Ç–∞–≤–ª—è—é {len(test_cells)} –∫–ª–µ—Ç–æ–∫ –≤ —Ä–µ—à–µ—Ç–∫—É {dimensions}")

        for coords, cell_idx in test_cells:
            grid.insert(coords, cell_idx)
            print(f"    ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–ª–µ—Ç–∫–∞ {cell_idx} –≤ –ø–æ–∑–∏—Ü–∏—é {coords}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π
        query_point = (6, 6, 6)
        query_radius = 5.0

        neighbors = grid.query_radius(query_point, query_radius)
        print(f"    üîç –ü–æ–∏—Å–∫ –æ—Ç {query_point} –≤ —Ä–∞–¥–∏—É—Å–µ {query_radius}")
        print(f"    üìç –ù–∞–π–¥–µ–Ω–æ —Å–æ—Å–µ–¥–µ–π: {len(neighbors)} - {neighbors}")

        # –î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ –∫–ª–µ—Ç–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ 125 –∏ 343 (–±–ª–∏–∑–∫–∏–µ –∫ query_point)
        expected_neighbors = {125, 343}
        found_neighbors = set(neighbors)

        if expected_neighbors.issubset(found_neighbors):
            print("    ‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —Å–æ—Å–µ–¥–∏!")
        else:
            print(
                f"    ‚ö†Ô∏è  –ù–µ –≤—Å–µ —Å–æ—Å–µ–¥–∏ –Ω–∞–π–¥–µ–Ω—ã. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_neighbors}, –Ω–∞–π–¥–µ–Ω–æ: {found_neighbors}"
            )

        self.test_results["spatial_hash_basic"] = "PASS"

    def test_performance_benchmark(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüß™ –¢–ï–°–¢ 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

        # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        dimensions = (100, 100, 100)  # 1M –∫–ª–µ—Ç–æ–∫
        cell_size = 16  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100¬≥ / 16¬≥ ‚âà 244 bins

        grid = SpatialHashGrid(dimensions=dimensions, cell_size=cell_size)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è 3D –≤ 1D –∏–Ω–¥–µ–∫—Å
        def to_linear_index(coords, dims):
            x, y, z = coords
            return x + y * dims[0] + z * dims[0] * dims[1]

        print(f"  –ó–∞–ø–æ–ª–Ω—è—é —Ä–µ—à–µ—Ç–∫—É {dimensions} ({np.prod(dimensions):,} –∫–ª–µ—Ç–æ–∫)...")

        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—Å—Ç–∞–≤–∫–∏
        start_time = time.time()
        tracemalloc.start()

        cell_count = 0
        # –ù–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é - —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é 8-—é –∫–ª–µ—Ç–∫—É –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        for x in range(0, dimensions[0], 2):
            for y in range(0, dimensions[1], 2):
                for z in range(0, dimensions[2], 2):
                    coords = (x, y, z)
                    linear_idx = to_linear_index(coords, dimensions)
                    grid.insert(coords, linear_idx)
                    cell_count += 1

        insert_time = time.time() - start_time
        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()

        print(f"  ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {cell_count:,} –∫–ª–µ—Ç–æ–∫ –∑–∞ {insert_time:.3f}s")
        print(
            f"  üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏: {cell_count/insert_time:.0f} –∫–ª–µ—Ç–æ–∫/—Å–µ–∫"
        )
        print(f"  üíæ –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {peak/1024/1024:.2f} MB")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
        query_times = []
        test_queries = 100

        print(f"  üîç –í—ã–ø–æ–ª–Ω—è—é {test_queries} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")

        for i in range(test_queries):
            # –°–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            query_point = (
                np.random.randint(0, dimensions[0]),
                np.random.randint(0, dimensions[1]),
                np.random.randint(0, dimensions[2]),
            )
            query_radius = 10.0

            start_time = time.time()
            neighbors = grid.query_radius(query_point, query_radius)
            query_time = time.time() - start_time

            query_times.append(query_time)

        avg_query_time = np.mean(query_times) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        max_query_time = np.max(query_times) * 1000

        print(f"  ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {avg_query_time:.3f}ms")
        print(f"  ‚è±Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {max_query_time:.3f}ms")

        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
        memory_ok = peak < 4 * 1024 * 1024  # < 4MB
        performance_ok = avg_query_time < 1.0  # < 1ms –≤ —Å—Ä–µ–¥–Ω–µ–º

        print(
            f"  {'‚úÖ' if memory_ok else '‚ùå'} –ü–∞–º—è—Ç—å: {peak/1024/1024:.2f}MB {'< 4MB' if memory_ok else '>= 4MB'}"
        )
        print(
            f"  {'‚úÖ' if performance_ok else '‚ùå'} –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_query_time:.3f}ms {'< 1ms' if performance_ok else '>= 1ms'}"
        )

        self.test_results["performance"] = (
            "PASS" if (memory_ok and performance_ok) else "FAIL"
        )

    def test_adaptive_cell_size(self):
        """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —è—á–µ–µ–∫"""
        print("\nüß™ –¢–ï–°–¢ 4: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —è—á–µ–µ–∫ (8¬≥-32¬≥)")

        test_cases = [
            # (lattice_size, expected_cell_size_range)
            ((16, 16, 16), (4, 8)),  # –ú–∞–ª–µ–Ω—å–∫–∞—è —Ä–µ—à–µ—Ç–∫–∞
            ((64, 64, 64), (8, 16)),  # –°—Ä–µ–¥–Ω—è—è —Ä–µ—à–µ—Ç–∫–∞
            ((128, 128, 128), (16, 32)),  # –ë–æ–ª—å—à–∞—è —Ä–µ—à–µ—Ç–∫–∞
        ]

        for lattice_dims, (min_cell, max_cell) in test_cases:
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏: lattice_size / 8 –¥–æ lattice_size / 4
            recommended_size = max(min_cell, min(max_cell, lattice_dims[0] // 8))

            grid = SpatialHashGrid(dimensions=lattice_dims, cell_size=recommended_size)

            # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ bins
            bins_per_dim = (lattice_dims[0] + recommended_size - 1) // recommended_size
            total_bins = bins_per_dim**3

            print(
                f"  üìè –†–µ—à–µ—Ç–∫–∞ {lattice_dims}: cell_size={recommended_size}, bins={bins_per_dim}¬≥={total_bins}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ bins –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            bins_ok = 8**3 <= total_bins <= 32**3
            print(f"    {'‚úÖ' if bins_ok else '‚ö†Ô∏è '} Bins –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 8¬≥-32¬≥: {bins_ok}")

        self.test_results["adaptive_size"] = "PASS"

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í SPATIAL HASHING")
        print("=" * 50)

        try:
            self.test_morton_encoder()
            self.test_spatial_hash_grid_basic()
            self.test_performance_benchmark()
            self.test_adaptive_cell_size()

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            print("Traceback:")
            print(traceback.format_exc())
            return False

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")

        all_passed = True
        for test_name, result in self.test_results.items():
            status = "‚úÖ PASS" if result == "PASS" else "‚ùå FAIL"
            print(f"  {test_name}: {status}")
            if result != "PASS":
                all_passed = False

        print("\n" + "=" * 50)
        if all_passed:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ú–æ–¥—É–ª—å Spatial Hashing –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            print("‚ùå –ú–æ–¥—É–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

        return all_passed


if __name__ == "__main__":
    tester = SpatialHashingTest()
    success = tester.run_all_tests()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)
