#!/usr/bin/env python3
"""–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ connection cache"""

import torch
from new_rebuild.core.moe.connection_classifier import UnifiedConnectionClassifier
from new_rebuild.config import SimpleProjectConfig

print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ connection cache...")

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = SimpleProjectConfig()
print(f"Lattice dimensions: {config.lattice.dimensions}")
print(f"Adaptive radius: {config.calculate_adaptive_radius()}")
print(f"Local threshold: {config.lattice.local_distance_threshold}")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
classifier = UnifiedConnectionClassifier(
    lattice_dimensions=config.lattice.dimensions,
    enable_cache=True
)

print(f"\nüìä Classifier thresholds:")
if hasattr(classifier, 'local_threshold'):
    print(f"  Local: {classifier.local_threshold:.3f}")
    print(f"  Functional: {classifier.functional_threshold:.3f}")
    print(f"  Distant: {classifier.distant_threshold:.3f}")
else:
    print("  –ü–æ—Ä–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã, –∏—â–µ–º –≤ cache_manager...")
    if hasattr(classifier.cache_manager, 'local_threshold'):
        print(f"  Local: {classifier.cache_manager.local_threshold:.3f}")
        print(f"  Functional: {classifier.cache_manager.functional_threshold:.3f}")
        print(f"  Distant: {classifier.cache_manager.distant_threshold:.3f}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞
if hasattr(classifier, 'cache_manager') and classifier.cache_manager:
    cache_manager = classifier.cache_manager
    print(f"\nüóÇÔ∏è Cache manager state:")
    print(f"  Total cells: {cache_manager.total_cells}")
    print(f"  Cache size: {len(cache_manager.cache) if hasattr(cache_manager, 'cache') else 'NO CACHE'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
    test_cells = [0, 100, 200, 327, 391, 500]
    for cell_idx in test_cells:
        if cell_idx < cache_manager.total_cells:
            if hasattr(cache_manager, 'cache') and cell_idx in cache_manager.cache:
                cached_data = cache_manager.cache[cell_idx]
                local_count = len(cached_data.get('local', []))
                functional_count = len(cached_data.get('functional_candidates', []))
                distant_count = len(cached_data.get('distant', []))
                print(f"    Cell {cell_idx}: LOCAL={local_count}, FUNC={functional_count}, DIST={distant_count}")
            else:
                print(f"    Cell {cell_idx}: –ù–ï–¢ –í –ö–≠–®–ï")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫—ç—à–∞
    if not hasattr(cache_manager, 'cache') or len(cache_manager.cache) == 0:
        print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ö—ç—à –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print("–ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...")
        
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if hasattr(cache_manager, '_build_cache'):
                cache_manager._build_cache()
                print("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω")
                print(f"   –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(cache_manager.cache)}")
            elif hasattr(cache_manager, 'build_cache'):
                cache_manager.build_cache()
                print("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω")
                print(f"   –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(cache_manager.cache)}")
            else:
                print("‚ùå –ú–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")
            import traceback
            traceback.print_exc()
else:
    print("\n‚ùå Cache manager –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –∫–ª–µ—Ç–∫–∏ 327:")

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
state_size = config.model.state_size
cell_state = torch.randn(state_size)
neighbor_indices = [327]  # –¢–æ–ª—å–∫–æ —Å–∞–º–∞ –∫–ª–µ—Ç–∫–∞ –∫–∞–∫ —Å–æ—Å–µ–¥
neighbor_states = torch.randn(len(neighbor_indices), state_size)

try:
    result = classifier.classify_connections(
        cell_idx=327,
        neighbor_indices=neighbor_indices,
        cell_state=cell_state,
        neighbor_states=neighbor_states
    )
    
    for category, connections in result.items():
        print(f"  {category.name}: {len(connections)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    import traceback
    traceback.print_exc()

print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")