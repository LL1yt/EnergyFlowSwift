#!/usr/bin/env python3
"""–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—ç—à–∞ –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π"""

from new_rebuild.core.moe.connection_classifier import UnifiedConnectionClassifier
from new_rebuild.core.lattice.spatial_optimization.unified_spatial_optimizer import create_unified_spatial_optimizer
from new_rebuild.config import SimpleProjectConfig

print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞ vs –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π...")

config = SimpleProjectConfig()
print(f"Lattice dimensions: {config.lattice.dimensions}")

# –°–æ–∑–¥–∞–µ–º spatial optimizer 
spatial_optimizer = create_unified_spatial_optimizer(config.lattice.dimensions)

# –°–æ–∑–¥–∞–µ–º classifier
classifier = UnifiedConnectionClassifier(
    lattice_dimensions=config.lattice.dimensions,
    enable_cache=True
)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–µ—Ç–∫—É 447
cell_idx = 447
print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–µ—Ç–∫—É {cell_idx}:")

# –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–µ–π —á–µ—Ä–µ–∑ spatial optimizer
neighbors_from_spatial = spatial_optimizer.find_neighbors_by_radius_safe(cell_idx)
print(f"–°–æ—Å–µ–¥–∏ –æ—Ç spatial optimizer: {len(neighbors_from_spatial)} - {neighbors_from_spatial[:10]}...")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –∫—ç—à–µ –¥–ª—è —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏
cache_manager = classifier.cache_manager
if cell_idx in cache_manager.cache:
    cached_data = cache_manager.cache[cell_idx]
    local_cached = [conn.target_idx for conn in cached_data.get('local', [])]
    functional_cached = [conn.target_idx for conn in cached_data.get('functional_candidates', [])]
    distant_cached = [conn.target_idx for conn in cached_data.get('distant', [])]
    
    print(f"–ö—ç—à LOCAL: {len(local_cached)} - {local_cached[:10]}")
    print(f"–ö—ç—à FUNCTIONAL: {len(functional_cached)} - {functional_cached[:10]}")
    print(f"–ö—ç—à DISTANT: {len(distant_cached)} - {distant_cached[:10]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    neighbors_set = set(neighbors_from_spatial)
    local_set = set(local_cached)
    functional_set = set(functional_cached)
    distant_set = set(distant_cached)
    all_cached = local_set | functional_set | distant_set
    
    intersection = neighbors_set & all_cached
    print(f"\nüìä –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ spatial –∏ –∫—ç—à–∞: {len(intersection)} –∏–∑ {len(neighbors_from_spatial)}")
    print(f"   –°–æ—Å–µ–¥–∏ –ù–ï –≤ –∫—ç—à–µ: {len(neighbors_set - all_cached)}")
    print(f"   –ü—Ä–∏–º–µ—Ä—ã –ù–ï –≤ –∫—ç—à–µ: {list(neighbors_set - all_cached)[:10]}")
    
else:
    print(f"‚ùå –ö–ª–µ—Ç–∫–∞ {cell_idx} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ!")
    
print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")