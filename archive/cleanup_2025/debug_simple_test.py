#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

print("üîÑ Starting debug test...")

try:
    from new_rebuild.config import SimpleProjectConfig
    print("‚úÖ Config imported")
    
    config = SimpleProjectConfig()
    print(f"‚úÖ Config created")
    print(f"   fallback_cpu: {config.device.fallback_cpu}")
    print(f"   max_total_samples: {config.training_embedding.max_total_samples}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º –º–∞–ª—ã–π –ª–∏–º–∏—Ç
    config.training_embedding.max_total_samples = 10
    print(f"‚úÖ Set max_total_samples to: {config.training_embedding.max_total_samples}")
    
    from new_rebuild.utils.device_manager import get_device_manager
    print("‚úÖ DeviceManager imported")
    
    device_manager = get_device_manager()
    print(f"‚úÖ GPU available: {device_manager.is_cuda()}")
    
    if device_manager.is_cuda():
        print(f"‚úÖ GPU memory: {device_manager.get_available_memory_gb():.1f}GB")
    
    print("\nüîÑ Testing dataset creation...")
    
    from new_rebuild.core.training.utils import create_training_dataloader
    print("‚úÖ Import successful")
    
    print("üîÑ Creating dataloader...")
    dataloader, stats = create_training_dataloader(
        config=config,
        max_total_samples=5,  # –ö—Ä–æ—à–µ—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        shuffle=False,
        num_workers=0  # –ë–µ–∑ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è Windows
    )
    print(f"‚úÖ DataLoader created!")
    print(f"   Total samples: {stats.total_samples}")
    print(f"   Sources: {stats.source_distribution}")
    
    print("\nüîÑ Testing one batch...")
    for i, batch in enumerate(dataloader):
        embeddings = batch['embedding']
        print(f"‚úÖ Batch {i}: {embeddings.shape}, device: {embeddings.device}")
        break
    
    print("\n‚úÖ DEBUG TEST COMPLETED!")
    
except Exception as e:
    print(f"‚ùå ERROR: {e}")
    import traceback
    traceback.print_exc()