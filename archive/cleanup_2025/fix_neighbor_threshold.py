#!/usr/bin/env python3
"""
Fix for the neighbor threshold issue.
The problem: adaptive_radius finds neighbors beyond distant_threshold.
The solution: Filter neighbors to only include those within distant_threshold.
"""

import torch
import numpy as np
from typing import List, Dict

def fix_connection_cache_manager():
    """
    Fix the _compute_all_neighbors_gpu method to respect distant_threshold
    """
    
    fix_code = '''
    def _compute_all_neighbors_gpu(self) -> Dict[int, List[int]]:
        """GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π"""
        try:
            x_dim, y_dim, z_dim = self.lattice_dimensions
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –Ω–∞ GPU
            all_indices = torch.arange(self.total_cells, device=self.device)
            
            x_coords = all_indices % x_dim
            y_coords = (all_indices // x_dim) % y_dim
            z_coords = all_indices // (x_dim * y_dim)
            
            all_coords = torch.stack([x_coords, y_coords, z_coords], dim=1).float()
            
            logger.info(
                f"üíæ GPU memory –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {all_coords.numel() * 4 / 1024**2:.1f}MB"
            )
            
            all_neighbors = {}
            batch_size = min(self.gpu_batch_size, self.total_cells)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            for start_idx in range(0, self.total_cells, batch_size):
                end_idx = min(start_idx + batch_size, self.total_cells)
                batch_coords = all_coords[start_idx:end_idx]
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∫–ª–µ—Ç–æ–∫
                # batch_coords: [batch_size, 3], all_coords: [total_cells, 3]
                distances = torch.cdist(
                    batch_coords, all_coords
                )  # [batch_size, total_cells]
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ—Å–µ–¥–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ (–∏—Å–∫–ª—é—á–∞—è —Å–∞–º—É –∫–ª–µ—Ç–∫—É)
                for i, cell_idx in enumerate(range(start_idx, end_idx)):
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º distant_threshold –≤–º–µ—Å—Ç–æ adaptive_radius
                    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ—Å–µ–¥–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    neighbor_mask = (distances[i] <= self.distant_threshold) & (
                        distances[i] > 0
                    )
                    neighbor_indices = torch.where(neighbor_mask)[0].cpu().tolist()
                    all_neighbors[cell_idx] = neighbor_indices
                
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º GPU –ø–∞–º—è—Ç—å
                del distances
                torch.cuda.empty_cache()
                
                if start_idx % (batch_size * 10) == 0:
                    logger.info(
                        f"üöÄ GPU: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {end_idx}/{self.total_cells} –∫–ª–µ—Ç–æ–∫"
                    )
            
            self._all_neighbors_cache = all_neighbors
            logger.info(f"‚úÖ GPU: –í—ã—á–∏—Å–ª–µ–Ω—ã —Å–æ—Å–µ–¥–∏ –¥–ª—è {len(all_neighbors)} –∫–ª–µ—Ç–æ–∫")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            total_neighbors = sum(len(neighbors) for neighbors in all_neighbors.values())
            avg_neighbors = total_neighbors / len(all_neighbors) if all_neighbors else 0
            logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –Ω–∞ –∫–ª–µ—Ç–∫—É: {avg_neighbors:.1f}")
            logger.info(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–æ—Ä–æ–≥: {self.distant_threshold} (distant_threshold)")
            
            return all_neighbors
            
        except Exception as e:
            logger.warning(f"GPU computation failed, falling back to CPU: {e}")
            return self._compute_all_neighbors_cpu()
    '''
    
    print("Fix for ConnectionCacheManager:")
    print("=" * 80)
    print(fix_code)
    print("=" * 80)
    print("\n–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∞:")
    print("1. –í –º–µ—Ç–æ–¥–µ _compute_all_neighbors_gpu –∑–∞–º–µ–Ω–∏—Ç—å self.adaptive_radius –Ω–∞ self.distant_threshold")
    print("2. –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ—Å–µ–¥–∏ –±—É–¥—É—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö distant_threshold")
    print("3. –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∏–∫–∞–∫–∏—Ö —Å–æ—Å–µ–¥–µ–π –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø–æ—Ä–æ–≥–∞!")

def fix_gpu_spatial_processor():
    """
    Alternative fix in GPUSpatialProcessor
    """
    
    print("\n\nAlternative fix for GPUSpatialProcessor:")
    print("=" * 80)
    print("""
    –í –º–µ—Ç–æ–¥–µ find_neighbors –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é:
    
    # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è neighbor_lists
    neighbor_lists = self.adaptive_hash.query_radius_batch(coords_tensor, radius)
    
    # –î–û–ë–ê–í–ò–¢–¨: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    if neighbor_lists and len(neighbor_lists) > 0:
        neighbors_tensor = neighbor_lists[0]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        if hasattr(self, 'pos_helper'):
            filtered_neighbors = []
            center_coords = coords_tensor[0]
            
            for neighbor_idx in neighbors_tensor.cpu().tolist():
                neighbor_coords = self.pos_helper.to_3d_coordinates(neighbor_idx)
                neighbor_coords_tensor = torch.tensor(neighbor_coords, device=self.device, dtype=torch.float32)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                dist = torch.norm(center_coords - neighbor_coords_tensor).item()
                
                # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ <= radius
                if dist <= radius and neighbor_idx != center_idx:
                    filtered_neighbors.append(neighbor_idx)
            
            return filtered_neighbors
    """)

def show_config_adjustment():
    """
    Show how to adjust config to avoid the issue
    """
    
    print("\n\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:")
    print("=" * 80)
    print("""
    –í config_components.py –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏—Ç—å adaptive_radius_ratio:
    
    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    adaptive_radius_ratio: float = 0.2  # –î–∞–µ—Ç radius = 3.0 –¥–ª—è —Ä–µ—à–µ—Ç–∫–∏ 15x15x15
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    adaptive_radius_ratio: float = 0.19  # –î–∞—Å—Ç radius = 2.85, –≤—Å–µ —Å–æ—Å–µ–¥–∏ –±—É–¥—É—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Ä–æ–≥–∞
    
    –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥!
    """)

if __name__ == "__main__":
    print("–ê–ù–ê–õ–ò–ó –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –° –°–û–°–ï–î–Ø–ú–ò")
    print("=" * 80)
    print("\n–ü—Ä–æ–±–ª–µ–º–∞:")
    print("- spatial_optimizer –Ω–∞—Ö–æ–¥–∏—Ç 191 —Å–æ—Å–µ–¥–∞")
    print("- –∏–∑ –Ω–∏—Ö 117 –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ distant_threshold (3.0)")
    print("- —ç—Ç–∏ –ª–∏—à–Ω–∏–µ —Å–æ—Å–µ–¥–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ DISTANT")
    print("- –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ª—É—á–∞–µ–º 197 DISTANT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ 24")
    
    print("\n–†–µ—à–µ–Ω–∏–µ:")
    fix_connection_cache_manager()
    fix_gpu_spatial_processor()
    show_config_adjustment()
    
    print("\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
    print("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–∫—Å –≤ ConnectionCacheManager._compute_all_neighbors_gpu")
    print("–≠—Ç–æ —Å–∞–º–æ–µ —á–∏—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–∏—Ç –ø—Ä–æ–±–ª–µ–º—É –≤ –∫–æ—Ä–Ω–µ.")