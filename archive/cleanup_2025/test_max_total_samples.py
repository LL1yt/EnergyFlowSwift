#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ create_training_dataloader —Å –Ω–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º max_total_samples
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

from new_rebuild.config import SimpleProjectConfig
from new_rebuild.core.training.utils import create_training_dataloader
from new_rebuild.utils.logging import get_logger

logger = get_logger(__name__)

def test_max_total_samples():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—ç–º–ø–ª–æ–≤"""
    
    logger.info("üß™ TESTING MAX_TOTAL_SAMPLES FUNCTIONALITY")
    logger.info("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º fallback –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    config = SimpleProjectConfig()
    config.device.fallback_cpu = True  # –†–∞–∑—Ä–µ—à–∞–µ–º CPU fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    # –¢–µ—Å—Ç 1: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    logger.info("\nüî¨ Test 1: No limit")
    dataloader1, stats1 = create_training_dataloader(
        config=config,
        max_total_samples=None,
        shuffle=False
    )
    logger.info(f"Result: {stats1.total_samples} samples")
    
    # –¢–µ—Å—Ç 2: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü–∏–∏
    logger.info("\nüî¨ Test 2: Limit via function parameter (100 samples)")
    dataloader2, stats2 = create_training_dataloader(
        config=config,
        max_total_samples=100,
        shuffle=False
    )
    logger.info(f"Result: {stats2.total_samples} samples")
    assert stats2.total_samples <= 100, f"Expected ‚â§100, got {stats2.total_samples}"
    
    # –¢–µ—Å—Ç 3: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.info("\nüî¨ Test 3: Limit via config (50 samples)")
    config.training_embedding.max_total_samples = 50
    dataloader3, stats3 = create_training_dataloader(
        config=config,
        max_total_samples=200,  # –î–æ–ª–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        shuffle=False
    )
    logger.info(f"Result: {stats3.total_samples} samples")
    assert stats3.total_samples <= 50, f"Expected ‚â§50, got {stats3.total_samples}"
    
    # –¢–µ—Å—Ç 4: –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –ª–∏–º–∏—Ç
    logger.info("\nüî¨ Test 4: Very small limit (5 samples)")
    config.training_embedding.max_total_samples = 5
    dataloader4, stats4 = create_training_dataloader(
        config=config,
        shuffle=False
    )
    logger.info(f"Result: {stats4.total_samples} samples")
    assert stats4.total_samples <= 5, f"Expected ‚â§5, got {stats4.total_samples}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞—Å–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤
    logger.info("\nüî¨ Test 5: DataLoader consistency check")
    total_batches = 0
    total_samples_in_batches = 0
    for batch in dataloader4:
        total_batches += 1
        total_samples_in_batches += len(batch['embedding'])
        
    logger.info(f"Batches: {total_batches}, Samples in batches: {total_samples_in_batches}")
    
    logger.info("\n‚úÖ ALL TESTS PASSED!")
    
    return {
        'no_limit': stats1.total_samples,
        'param_limit_100': stats2.total_samples,
        'config_limit_50': stats3.total_samples,
        'config_limit_5': stats4.total_samples,
        'dataloader_samples': total_samples_in_batches
    }

if __name__ == "__main__":
    results = test_max_total_samples()
    print("\nüìä Test Results Summary:")
    for test, result in results.items():
        print(f"  {test}: {result} samples")