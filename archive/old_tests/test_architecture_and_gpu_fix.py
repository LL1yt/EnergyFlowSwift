#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ GPU –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
1. ‚úÖ DynamicConfigGenerator –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cell_architecture = "nca" –≤ hybrid —Ä–µ–∂–∏–º–µ
2. ‚úÖ config_initializer –ª–æ–≥–∏—Ä—É–µ—Ç NCA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–º–µ—Å—Ç–æ gMLP
3. ‚úÖ GPU configuration –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ stage_runner
"""

import sys
import torch
import tempfile
import yaml
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(str(Path(__file__).parent))


def test_dynamic_config_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è DynamicConfigGenerator"""
    print("üß™ –¢–ï–°–¢ 1: DynamicConfigGenerator –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    print("-" * 50)

    try:
        from utils.config_manager.dynamic_config import DynamicConfigGenerator

        generator = DynamicConfigGenerator()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è development —Ä–µ–∂–∏–º–∞ (–∏–º–µ–µ—Ç hybrid_mode)
        config = generator.generate_config("development")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        architecture = config.get("architecture", {})
        emergent_training = config.get("emergent_training", {})

        print(f"‚úÖ hybrid_mode: {architecture.get('hybrid_mode')}")
        print(f"‚úÖ neuron_architecture: {architecture.get('neuron_architecture')}")
        print(
            f"‚úÖ connection_architecture: {architecture.get('connection_architecture')}"
        )
        print(f"‚úÖ cell_architecture: {emergent_training.get('cell_architecture')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        hybrid_mode = architecture.get("hybrid_mode", False)
        neuron_arch = architecture.get("neuron_architecture")
        cell_arch = emergent_training.get("cell_architecture")

        if hybrid_mode and neuron_arch == "minimal_nca" and cell_arch == "nca":
            print(
                "üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–†–ê–ë–û–¢–ê–õ–û: cell_architecture = 'nca' –≤ hybrid —Ä–µ–∂–∏–º–µ!"
            )
            return True
        else:
            print(
                f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞: hybrid={hybrid_mode}, neuron={neuron_arch}, cell={cell_arch}"
            )
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False


def test_config_initializer_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è config_initializer –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–ï–°–¢ 2: config_initializer –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    print("-" * 50)

    try:
        from smart_resume_training.core.config_initializer import ConfigInitializer
        from utils.config_manager.dynamic_config import DynamicConfigGenerator

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ DynamicConfigGenerator (–∏–º–µ–µ—Ç hybrid_mode=True)
        generator = DynamicConfigGenerator()
        test_config = generator.generate_config("development")

        # –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª
        print("üîç –î–ï–ë–ê–ì: –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        architecture_debug = test_config.get("architecture", {})
        emergent_debug = test_config.get("emergent_training", {})
        print(f"   architecture.hybrid_mode: {architecture_debug.get('hybrid_mode')}")
        print(
            f"   architecture.neuron_architecture: {architecture_debug.get('neuron_architecture')}"
        )
        print(
            f"   emergent_training.cell_architecture: {emergent_debug.get('cell_architecture')}"
        )

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        with tempfile.NamedTemporaryFile(mode="w", suffix=".yaml", delete=False) as f:
            yaml.dump(test_config, f)
            temp_path = f.name

        # –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ —Ñ–∞–π–ª
        print("üîç –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        with open(temp_path, "r", encoding="utf-8") as f:
            file_content = f.read()
            if "hybrid_mode: true" in file_content:
                print("   ‚úÖ hybrid_mode: true –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ")
            else:
                print("   ‚ùå hybrid_mode: true –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConfigInitializer
        initializer = ConfigInitializer(temp_path)

        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        print("üìä –õ–æ–≥–∏ config_initializer:")

        # –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ _log_config_details
        config = initializer.config

        # –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ConfigInitializer –∑–∞–≥—Ä—É–∑–∏–ª
        print("üîç –î–ï–ë–ê–ì: –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        architecture_loaded = config.get("architecture", {})
        emergent_loaded = config.get("emergent_training", {})
        print(
            f"   –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è architecture.hybrid_mode: {architecture_loaded.get('hybrid_mode')}"
        )
        print(
            f"   –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è emergent_training.cell_architecture: {emergent_loaded.get('cell_architecture')}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ hybrid —Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è NCA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        architecture = config.get("architecture", {})
        emergent_training = config.get("emergent_training", {})

        hybrid_mode = architecture.get("hybrid_mode", False)
        cell_architecture = emergent_training.get("cell_architecture", "gmlp")

        if hybrid_mode and cell_architecture == "nca":
            nca_config = emergent_training.get("nca_config", {})
            if nca_config:
                print(
                    f"‚úÖ NCA (hybrid) state size: {nca_config.get('state_size')}, hidden_dim: {nca_config.get('hidden_dim')}"
                )
                print(f"‚úÖ Architecture: Hybrid NCA+gMLP mode")
                success = True
            else:
                minimal_nca = config.get("minimal_nca_cell", {})
                if minimal_nca:
                    print(
                        f"‚úÖ NCA (hybrid) state size: {minimal_nca.get('state_size')}, hidden_dim: {minimal_nca.get('hidden_dim')}"
                    )
                    print(f"‚úÖ Architecture: Hybrid NCA+gMLP mode")
                    success = True
                else:
                    print("‚ùå NCA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    success = False
        else:
            print(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: hybrid={hybrid_mode}, cell_arch={cell_architecture}"
            )
            success = False

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Path(temp_path).unlink()

        if success:
            print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–†–ê–ë–û–¢–ê–õ–û: –õ–æ–≥–∏—Ä—É—é—Ç—Å—è NCA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ hybrid —Ä–µ–∂–∏–º–µ!")

        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False


def test_gpu_configuration_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–ï–°–¢ 3: GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    print("-" * 50)

    try:
        from training.automated_training.stage_runner import TrainingStageRunner
        from training.automated_training.types import StageConfig

        # –°–æ–∑–¥–∞–µ–º StageConfig —Å memory optimizations
        stage_config = StageConfig(
            stage=1,
            dataset_limit=10,
            epochs=1,
            batch_size=4,
            description="GPU Test",
            memory_optimizations=True,
            progressive_scaling=False,
        )

        # –°–æ–∑–¥–∞–µ–º runner
        runner = TrainingStageRunner(mode="development", verbose=True)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ)
        temp_config_path = runner._generate_temp_config(stage_config)

        if temp_config_path:
            # –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open(temp_config_path, "r", encoding="utf-8") as f:
                config_data = yaml.safe_load(f)

            print("üìä GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º lattice_3d –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            lattice_3d = config_data.get("lattice_3d", {})
            print(f"‚úÖ lattice_3d.gpu_enabled: {lattice_3d.get('gpu_enabled')}")
            print(
                f"‚úÖ lattice_3d.parallel_processing: {lattice_3d.get('parallel_processing')}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º training –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            training = config_data.get("training", {})
            print(f"‚úÖ training.device: {training.get('device')}")
            print(f"‚úÖ training.pin_memory: {training.get('pin_memory')}")
            print(f"‚úÖ training.mixed_precision: {training.get('mixed_precision')}")
            print(
                f"‚úÖ training.gradient_checkpointing: {training.get('gradient_checkpointing')}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            cuda_available = torch.cuda.is_available()
            print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {cuda_available}")

            if cuda_available:
                print(f"‚úÖ GPU: {torch.cuda.get_device_name(0)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            expected_device = "cuda" if cuda_available else "cpu"
            actual_device = training.get("device")

            gpu_enabled = lattice_3d.get("gpu_enabled", False)

            success = (
                actual_device == expected_device
                and (gpu_enabled == cuda_available)
                and training.get("pin_memory", False) == cuda_available
            )

            if success:
                print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–†–ê–ë–û–¢–ê–õ–û: GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            else:
                print(
                    f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞: device={actual_device}, expected={expected_device}, gpu_enabled={gpu_enabled}"
                )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            Path(temp_config_path).unlink()

            return success
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_end_to_end_configuration():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞"""
    print("\nüß™ –¢–ï–°–¢ 4: End-to-end –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("-" * 50)

    try:
        from training.automated_training.automated_trainer import AutomatedTrainer
        from training.automated_training.types import StageConfig

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        stage_configs = [
            StageConfig(
                stage=1,
                dataset_limit=5,  # –û—á–µ–Ω—å –º–∞–ª–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
                epochs=1,
                batch_size=2,
                description="End-to-end test",
                plasticity_profile="discovery",
                clustering_enabled=False,
                memory_optimizations=True,
                progressive_scaling=True,
            )
        ]

        # –°–æ–∑–¥–∞–µ–º AutomatedTrainer
        trainer = AutomatedTrainer(
            mode="development",
            scale=0.005,  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π scale –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
            timeout_multiplier=1.0,
            verbose=True,
        )

        print("üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
        runner = trainer.stage_runner
        temp_config_path = runner._generate_temp_config(stage_configs[0])

        if temp_config_path:
            with open(temp_config_path, "r", encoding="utf-8") as f:
                config_data = yaml.safe_load(f)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            architecture = config_data.get("architecture", {})
            emergent_training = config_data.get("emergent_training", {})
            print(
                f"‚úÖ Architecture type: {architecture.get('neuron_architecture')} (hybrid: {architecture.get('hybrid_mode')})"
            )
            print(f"‚úÖ Cell architecture: {emergent_training.get('cell_architecture')}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU
            lattice_3d = config_data.get("lattice_3d", {})
            training = config_data.get("training", {})
            print(f"‚úÖ GPU enabled: {lattice_3d.get('gpu_enabled')}")
            print(f"‚úÖ Training device: {training.get('device')}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏
            lattice = config_data.get("lattice", {})
            print(
                f"‚úÖ Lattice dimensions: {lattice.get('lattice_width')}√ó{lattice.get('lattice_height')}√ó{lattice.get('lattice_depth')}"
            )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            Path(temp_config_path).unlink()

            print("üéâ END-TO-END –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ì–û–¢–û–í–ê!")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ end-to-end —Ç–µ—Å—Ç–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ò GPU –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print()

    tests = [
        ("DynamicConfigGenerator Fix", test_dynamic_config_fix),
        ("ConfigInitializer Fix", test_config_initializer_fix),
        ("GPU Configuration Fix", test_gpu_configuration_fix),
        ("End-to-End Configuration", test_end_to_end_configuration),
    ]

    results = {}

    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = "‚úÖ PASS" if result else "‚ùå FAIL"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = "‚ùå ERROR"

    print("\n" + "=" * 80)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print()

    for test_name, result in results.items():
        print(f"   {result} | {test_name}")

    passed = sum(1 for r in results.values() if r == "‚úÖ PASS")
    total = len(results)

    print(f"\nüìä –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")

    if passed == total:
        print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!")
        print()
        print("üöÄ –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£:")
        print("   python test_phase4_full_training_cycle.py")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
