#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ adaptive_radius —Å MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. MoeSpatialOptimizer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
2. connection_distributions –±–µ—Ä–µ—Ç—Å—è –∏–∑ ProjectConfig
3. adaptive_radius –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
4. Deprecated –º–µ—Ç–æ–¥—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), "new_rebuild"))

import torch
from new_rebuild.config.project_config import (
    ProjectConfig,
    get_project_config,
    set_project_config,
)
from new_rebuild.core.lattice.spatial_optimization import create_moe_spatial_optimizer


def test_moe_spatial_optimizer_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MoeSpatialOptimizer —Å ProjectConfig"""
    print("\nüîß –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò MoE SPATIAL OPTIMIZER –° CONFIG")
    print("=" * 70)

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = ProjectConfig()
    config.lattice_dimensions = (20, 20, 20)
    config.adaptive_radius_ratio = 0.25  # 25%
    config.adaptive_radius_min = 2.0
    config.adaptive_radius_max = 30.0
    config.local_connections_ratio = 0.15  # –ò–∑–º–µ–Ω—è–µ–º –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö 10%
    config.functional_connections_ratio = 0.50  # –ò–∑–º–µ–Ω—è–µ–º –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö 55%
    config.distant_connections_ratio = 0.35  # –û—Å—Ç–∞–µ—Ç—Å—è 35%

    set_project_config(config)

    dimensions = config.lattice_dimensions

    print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {dimensions}")
    print(f"   Adaptive radius ratio: {config.adaptive_radius_ratio}")
    print(
        f"   Connection ratios: {config.local_connections_ratio}/{config.functional_connections_ratio}/{config.distant_connections_ratio}"
    )

    # –°–æ–∑–¥–∞–µ–º MoE spatial optimizer
    print(f"\nüõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ MoE Spatial Optimizer...")
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    optimizer = create_moe_spatial_optimizer(dimensions, device=device)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ connection_distributions –±–µ—Ä–µ—Ç—Å—è –∏–∑ config
    expected_distributions = {
        "local": config.local_connections_ratio,
        "functional": config.functional_connections_ratio,
        "distant": config.distant_connections_ratio,
    }

    print(f"\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ connection_distributions:")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ: {expected_distributions}")
    print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ: {optimizer.connection_distributions}")

    for key in expected_distributions:
        assert (
            abs(optimizer.connection_distributions[key] - expected_distributions[key])
            < 1e-6
        ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π {key}: {optimizer.connection_distributions[key]} != {expected_distributions[key]}"

    print("‚úÖ Connection distributions –±–µ—Ä—É—Ç—Å—è –∏–∑ ProjectConfig")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º adaptive_radius
    expected_radius = config.calculate_adaptive_radius()
    max_dim = max(dimensions)
    expected_calculation = max_dim * config.adaptive_radius_ratio

    print(f"\nüìê –ü—Ä–æ–≤–µ—Ä–∫–∞ adaptive_radius:")
    print(f"   Max dimension: {max_dim}")
    print(f"   Ratio: {config.adaptive_radius_ratio}")
    print(f"   –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å: {expected_radius}")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞—Å—á–µ—Ç: {expected_calculation}")

    assert expected_radius == expected_calculation, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–¥–∏—É—Å–∞"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ radius –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ optimizer
    # –≠—Ç–æ –∫–æ—Å–≤–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ —Ç–æ, —á—Ç–æ optimizer —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç config
    print("‚úÖ Adaptive radius –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    optimizer.cleanup()
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è MoE —Å ProjectConfig —Ä–∞–±–æ—Ç–∞–µ—Ç!")


def test_adaptive_radius_configuration_flexibility():
    """–¢–µ—Å—Ç –≥–∏–±–∫–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ adaptive_radius"""
    print("\nüîÄ –¢–ï–°–¢ –ì–ò–ë–ö–û–°–¢–ò –ù–ê–°–¢–†–û–ô–ö–ò ADAPTIVE RADIUS")
    print("=" * 70)

    test_cases = [
        # (dimensions, ratio, expected_radius)
        ((10, 10, 10), 0.1, 1.0),  # 10 * 0.1 = 1.0
        ((30, 30, 30), 0.2, 6.0),  # 30 * 0.2 = 6.0
        ((50, 30, 40), 0.3, 15.0),  # 50 * 0.3 = 15.0
        ((100, 100, 100), 0.4, 40.0),  # 100 * 0.4 = 40.0
    ]

    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏:")

    for dimensions, ratio, expected in test_cases:
        config = ProjectConfig()
        config.lattice_dimensions = dimensions
        config.adaptive_radius_ratio = ratio
        config.adaptive_radius_min = 0.1
        config.adaptive_radius_max = 100.0

        calculated = config.calculate_adaptive_radius()
        max_dim = max(dimensions)

        print(f"   {dimensions} √ó {ratio} = {calculated} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")

        assert (
            abs(calculated - expected) < 1e-6
        ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è {dimensions} √ó {ratio}: {calculated} != {expected}"

    print("‚úÖ –ì–∏–±–∫–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ adaptive_radius —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_moe_versus_legacy_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ MoE –∏ Legacy –ø–æ–¥—Ö–æ–¥–æ–≤"""
    print("\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï MoE VS LEGACY")
    print("=" * 70)

    config = ProjectConfig()
    config.lattice_dimensions = (30, 30, 30)
    config.adaptive_radius_ratio = 0.3

    print(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π:")
    print(f"   Legacy (deprecated): local=70%, functional=20%, distant=10%")
    print(
        f"   MoE (–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ): local={config.local_connections_ratio*100:.0f}%, "
        f"functional={config.functional_connections_ratio*100:.0f}%, "
        f"distant={config.distant_connections_ratio*100:.0f}%"
    )

    print(f"\nüìê –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–æ–≤:")
    print(f"   Legacy (deprecated): hardcoded 5.0")
    print(f"   MoE (–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ): {config.calculate_adaptive_radius()} (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ MoE —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è —ç–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    assert (
        config.functional_connections_ratio > config.local_connections_ratio
    ), "Functional –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–æ–±–ª–∞–¥–∞—Ç—å –Ω–∞–¥ local –¥–ª—è —ç–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ—Å—Ç–∏"
    assert (
        config.functional_connections_ratio > config.distant_connections_ratio
    ), "Functional –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"

    print("‚úÖ MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è —ç–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ—Å—Ç–∏")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        test_moe_spatial_optimizer_config_integration()
        # test_deprecated_tiered_neighbor_indices()
        test_adaptive_radius_configuration_flexibility()
        test_moe_versus_legacy_comparison()

        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ADAPTIVE RADIUS –ü–†–û–®–õ–ò!")
        print("=" * 70)
        print("‚úÖ MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print("‚úÖ Adaptive radius –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π")
        print("‚úÖ Deprecated –º–µ—Ç–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–º–µ—á–µ–Ω—ã")
        print("‚úÖ Connection distributions –±–µ—Ä—É—Ç—Å—è –∏–∑ ProjectConfig")
        print("üöÄ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback

        traceback.print_exc()
        return False

    return True


if __name__ == "__main__":
    main()
