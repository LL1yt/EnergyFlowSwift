#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ GPU –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
1. gMLP –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ NCA (8/8 parameters)
2. GPU –ø–∞–º—è—Ç—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (0.0MB GPU)

–¶–µ–ª—å: –ù–∞–π—Ç–∏ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
"""

import sys
import torch
import yaml
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(str(Path(__file__).parent))


def diagnose_gpu_integration():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GPU –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê GPU –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    cuda_available = torch.cuda.is_available()
    print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {cuda_available}")

    if cuda_available:
        device_count = torch.cuda.device_count()
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {device_count}")

        for i in range(device_count):
            name = torch.cuda.get_device_name(i)
            memory = torch.cuda.get_device_properties(i).total_memory / (1024**3)
            print(f"   GPU {i}: {name} ({memory:.1f}GB)")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ device selection –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö
    print("\nüìä –ü–†–û–í–ï–†–ö–ê DEVICE SELECTION:")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º dynamic config
    try:
        from utils.config_manager.dynamic_config import DynamicConfigGenerator

        generator = DynamicConfigGenerator()
        detected_mode = generator.detect_hardware_mode()
        print(f"   DynamicConfigGenerator mode: {detected_mode}")
    except Exception as e:
        print(f"   DynamicConfigGenerator error: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º config loader
    try:
        from utils.config_loader import ConfigManager

        cm = ConfigManager()
        device_config = cm.get_device_config()
        print(f"   ConfigManager device: {device_config}")
    except Exception as e:
        print(f"   ConfigManager error: {e}")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ lattice_3d GPU settings
    print("\nüß± –ü–†–û–í–ï–†–ö–ê LATTICE_3D GPU SETTINGS:")

    try:
        from core.lattice_3d.config import LatticeConfig

        config = LatticeConfig()
        print(f"   gpu_enabled: {config.gpu_enabled}")
        print(f"   parallel_processing: {config.parallel_processing}")
    except Exception as e:
        print(f"   LatticeConfig error: {e}")

    return cuda_available


def diagnose_architecture_selection():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("\nüèóÔ∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–´–ë–û–†–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 60)

    # 1. –ê–Ω–∞–ª–∏–∑ debug_final_config.yaml
    print("üìã –ê–ù–ê–õ–ò–ó debug_final_config.yaml:")

    config_path = "debug_final_config.yaml"
    if Path(config_path).exists():
        with open(config_path, "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–µ–∫—Ü–∏–∏
        architecture = config.get("architecture", {})
        print(f"   hybrid_mode: {architecture.get('hybrid_mode')}")
        print(f"   neuron_architecture: {architecture.get('neuron_architecture')}")
        print(
            f"   connection_architecture: {architecture.get('connection_architecture')}"
        )

        emergent_training = config.get("emergent_training", {})
        print(f"   cell_architecture: {emergent_training.get('cell_architecture')}")

        gmlp_config = emergent_training.get("gmlp_config", {})
        print(f"   gmlp state_size: {gmlp_config.get('state_size')}")
        print(f"   gmlp hidden_dim: {gmlp_config.get('hidden_dim')}")

        minimal_nca = config.get("minimal_nca_cell", {})
        print(f"   nca state_size: {minimal_nca.get('state_size')}")
        print(f"   nca hidden_dim: {minimal_nca.get('hidden_dim')}")

        # –ü–†–û–ë–õ–ï–ú–ê: config_initializer –ª–æ–≥–∏—Ä—É–µ—Ç gmlp —Å–µ–∫—Ü–∏—é –¥–∞–∂–µ –≤ hybrid —Ä–µ–∂–∏–º–µ!

    else:
        print(f"   ‚ùå {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ config_initializer
    print("\nüîß –ü–†–û–í–ï–†–ö–ê CONFIG_INITIALIZER:")

    config_init_path = "smart_resume_training/core/config_initializer.py"
    if Path(config_init_path).exists():
        with open(config_init_path, "r", encoding="utf-8") as f:
            content = f.read()

        # –ò—â–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ gmlp
        if "gMLP state size" in content:
            print("   ‚ùå –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: config_initializer –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ—Ç gMLP")
            print("      –ö–æ–¥ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é 'gmlp' –¥–∞–∂–µ –≤ hybrid —Ä–µ–∂–∏–º–µ")
            print("      –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É architecture_type!")
        else:
            print("   ‚úÖ gMLP –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ emergent_training
    print("\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê EMERGENT_TRAINING –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")

    try:
        from emergent_training.config.config import EmergentTrainingConfig
        from emergent_training.core.trainer import EmergentCubeTrainer

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = EmergentTrainingConfig()
        print(f"   enable_nca: {config.enable_nca}")
        print(f"   gmlp_config: {config.gmlp_config}")
        print(f"   nca_config: {config.nca_config}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ trainer'–∞

    except Exception as e:
        print(f"   EmergentTraining error: {e}")


def diagnose_hybrid_architecture_confusion():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã –≤ hybrid –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"""
    print("\nüîÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê HYBRID –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 60)

    # –ü—Ä–æ–±–ª–µ–º–∞: –≤ –ª–æ–≥–∞—Ö config_initializer.py –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç gMLP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    # –Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ hybrid_mode —Å minimal_nca

    print("üéØ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
    print("   1. debug_final_config.yaml –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:")
    print("      - hybrid_mode: true")
    print("      - neuron_architecture: minimal_nca")
    print("      - cell_architecture: gmlp (–≤ emergent_training)")
    print()
    print("   2. config_initializer.py –ª–æ–≥–∏—Ä—É–µ—Ç:")
    print("      - 'gMLP state size: 8, hidden_dim: 8'")
    print("      - –ù–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å NCA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!")
    print()
    print("   3. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
    print("      a) config_initializer –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç hybrid_mode")
    print(
        "      b) emergent_training.cell_architecture –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç neuron_architecture"
    )
    print("      c) –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π mapping –≤ DynamicConfigGenerator")


def create_architecture_fix():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("\nüîß –°–û–ó–î–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 60)

    print("üìù –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print()
    print("1. –ò–°–ü–†–ê–í–ò–¢–¨ config_initializer.py:")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É hybrid_mode")
    print("   - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É (NCA vs gMLP)")
    print()
    print("2. –ò–°–ü–†–ê–í–ò–¢–¨ DynamicConfigGenerator:")
    print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ hybrid_mode –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
    print("   - emergent_training.cell_architecture –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'nca' –≤ hybrid —Ä–µ–∂–∏–º–µ")
    print()
    print("3. –ò–°–ü–†–ê–í–ò–¢–¨ GPU –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é:")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ gpu_enabled –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –Ω–∞ GPU")


def create_gpu_fix():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è GPU"""
    print("\nüíæ –°–û–ó–î–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø GPU")
    print("=" * 60)

    cuda_available = torch.cuda.is_available()

    if not cuda_available:
        print("‚ùå CUDA –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É PyTorch —Å CUDA")
        return False

    print("üìù –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø GPU:")
    print()
    print("1. –î–û–ë–ê–í–ò–¢–¨ EXPLICIT GPU SETTINGS:")
    print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ lattice_3d.gpu_enabled = True")
    print("   - –î–æ–±–∞–≤–∏—Ç—å device='cuda' –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    print()
    print("2. –ü–†–û–í–ï–†–ò–¢–¨ DEVICE PLACEMENT:")
    print("   - –í—Å–µ –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ GPU")
    print("   - –í—Å–µ tensors –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ GPU")
    print()
    print("3. –î–û–ë–ê–í–ò–¢–¨ GPU MEMORY MONITORING:")
    print("   - torch.cuda.memory_allocated() –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ò GPU –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 80)
    print("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º:")
    print("- gMLP –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–º–µ—Å—Ç–æ NCA (8/8 params)")
    print("- GPU –ø–∞–º—è—Ç—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (0.0MB)")
    print()

    try:
        # 1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GPU
        gpu_ok = diagnose_gpu_integration()

        # 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        diagnose_architecture_selection()

        # 3. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ hybrid confusion
        diagnose_hybrid_architecture_confusion()

        # 4. –ü–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        create_architecture_fix()
        gpu_fix_ok = create_gpu_fix()

        print("\n" + "=" * 80)
        print("üéØ –í–´–í–û–î–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print()

        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê 1: config_initializer.py –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É")
        print(
            "   –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É hybrid_mode –∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
        )
        print()

        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê 2: –ü—É—Ç–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É neuron_architecture –∏ cell_architecture")
        print("   neuron_architecture = minimal_nca (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å primary)")
        print("   cell_architecture = gmlp (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç neuron_architecture)")
        print()

        if gpu_ok and gpu_fix_ok:
            print("‚úÖ –ü–†–û–ë–õ–ï–ú–ê 3: GPU –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            print("   –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤–∏—Ç—å explicit GPU configuration")
        else:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê 3: GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        print()
        print("üîß –ö–†–ò–¢–ò–ß–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å mapping –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ DynamicConfigGenerator")
        print("2. –û–±–Ω–æ–≤–∏—Ç—å config_initializer –¥–ª—è hybrid —Ä–µ–∂–∏–º–∞")
        print("3. –î–æ–±–∞–≤–∏—Ç—å explicit GPU device configuration")
        print("4. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")

        return True

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
