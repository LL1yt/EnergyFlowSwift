"""
–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Å–µ–¥–µ–π –≤ 3D Cellular Neural Network
====================================================

–ò—Å—Å–ª–µ–¥—É–µ–º –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∏ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è —Å–æ—Å–µ–¥–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:
1. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ vs —á–∏—Å–ª–æ–≤–∞—è
2. –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π
3. –í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ—à–µ—Ç–∫–∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π
4. Spatial hashing vs –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å–µ–¥–∏
"""

import sys

sys.path.append(".")

from new_rebuild.config import get_project_config
from new_rebuild.core.lattice.topology import NeighborTopology
from new_rebuild.core.lattice.position import Position3D
from new_rebuild.core.lattice.enums import NeighborStrategy
import numpy as np


def analyze_neighbor_strategies():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π"""

    print("=== –ê–ù–ê–õ–ò–ó –°–¢–†–ê–¢–ï–ì–ò–ô –ü–û–ò–°–ö–ê –°–û–°–ï–î–ï–ô ===\n")

    config = get_project_config()
    print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {config.architecture_type}")
    print(f"–†–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: {config.lattice_dimensions}")
    print(f"Effective neighbors: {config.effective_neighbors}")
    print(f"Total cells: {config.total_cells}")
    print()

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ—à–µ—Ç–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    pos_helper = Position3D(config.lattice_dimensions)
    all_coords = pos_helper.get_all_coordinates()

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–æ–ª–æ–≥–∏—é —Å–æ—Å–µ–¥–µ–π
    topology = NeighborTopology(all_coords)

    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {topology.strategy}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π: {topology.num_neighbors}")
    print()

    return topology, pos_helper


def analyze_local_neighbors(topology, pos_helper):
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π (Von Neumann vs Moore)"""

    print("=== 1. –õ–û–ö–ê–õ–¨–ù–´–ï –°–û–°–ï–î–ò (LOCAL STRATEGY) ===\n")

    # –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
    print("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π (Von Neumann):")
    for i, direction in enumerate(topology._LOCAL_NEIGHBOR_DIRECTIONS):
        print(f"  {i}: {direction}")
    print()

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–ª–µ—Ç–∫—É
    center_coords = (3, 3, 3) if pos_helper.dimensions == (6, 6, 6) else (13, 13, 13)
    center_linear = pos_helper.to_linear_index(center_coords)

    # –ü–æ–ª—É—á–∏–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
    local_neighbors = topology._get_local_neighbor_indices(center_linear)

    print(f"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞: coords={center_coords}, linear_index={center_linear}")
    print(f"–õ–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(local_neighbors)}")
    print("–õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å–µ–¥–∏:")

    for i, neighbor_idx in enumerate(local_neighbors):
        neighbor_coords = pos_helper.to_3d_coordinates(neighbor_idx)
        distance = pos_helper.euclidean_distance(center_coords, neighbor_coords)
        direction = (
            neighbor_coords[0] - center_coords[0],
            neighbor_coords[1] - center_coords[1],
            neighbor_coords[2] - center_coords[2],
        )
        print(
            f"  {i}: idx={neighbor_idx}, coords={neighbor_coords}, direction={direction}, distance={distance:.1f}"
        )
    print()


def analyze_current_strategy(topology, pos_helper):
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (HYBRID/TIERED)"""

    print(f"=== 2. –¢–ï–ö–£–©–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: {topology.strategy} ===\n")

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç—É –∂–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–ª–µ—Ç–∫—É
    center_coords = (3, 3, 3) if pos_helper.dimensions == (6, 6, 6) else (13, 13, 13)
    center_linear = pos_helper.to_linear_index(center_coords)

    all_neighbors = topology.get_neighbor_indices(center_linear)

    print(f"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞: coords={center_coords}, linear_index={center_linear}")
    print(f"–í—Å–µ–≥–æ —Å–æ—Å–µ–¥–µ–π: {len(all_neighbors)} (—Ü–µ–ª—å: {topology.num_neighbors})")
    print()

    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    distances = []
    for neighbor_idx in all_neighbors:
        neighbor_coords = pos_helper.to_3d_coordinates(neighbor_idx)
        distance = pos_helper.euclidean_distance(center_coords, neighbor_coords)
        distances.append(distance)

    distances = np.array(distances)
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π:")
    print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {distances.min():.2f}")
    print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {distances.max():.2f}")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ: {distances.mean():.2f}")
    print(f"  –ú–µ–¥–∏–∞–Ω–∞: {np.median(distances):.2f}")
    print()

    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã—Ö 10 —Å–æ—Å–µ–¥–µ–π
    print("–ü–µ—Ä–≤—ã–µ 10 —Å–æ—Å–µ–¥–µ–π:")
    for i, neighbor_idx in enumerate(all_neighbors[:10]):
        neighbor_coords = pos_helper.to_3d_coordinates(neighbor_idx)
        distance = pos_helper.euclidean_distance(center_coords, neighbor_coords)
        print(
            f"  {i}: idx={neighbor_idx}, coords={neighbor_coords}, distance={distance:.2f}"
        )
    print()


def analyze_coordinate_vs_numerical():
    """–ê–Ω–∞–ª–∏–∑: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞?"""

    print("=== 3. –ö–û–û–†–î–ò–ù–ê–¢–´ VS –ß–ò–°–õ–ê ===\n")

    print("–û–¢–í–ï–¢: –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ö–û–û–†–î–ò–ù–ê–¢–´, –Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ:")
    print()
    print("1. üéØ –ö–û–û–†–î–ò–ù–ê–¢–ù–ê–Ø –û–°–ù–û–í–ê:")
    print("   - –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –±–∞–∑–∏—Ä—É—é—Ç—Å—è –Ω–∞ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (x, y, z)")
    print("   - Position3D –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º")
    print("   - –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ")
    print()

    print("2. üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ß–ï–†–ï–ó –õ–ò–ù–ï–ô–ù–´–ï –ò–ù–î–ï–ö–°–´:")
    print("   - 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Üí –ª–∏–Ω–µ–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("   - –§–æ—Ä–º—É–ª–∞: z + y*depth + x*depth*height")
    print("   - –í—Å–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –Ω–∞ GPU")
    print()

    print("3. üîç SPATIAL HASHING (–¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫):")
    print("   - –†–∞–∑–±–∏–≤–∞–µ—Ç 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞ —è—á–µ–π–∫–∏")
    print("   - –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ O(1)")
    print("   - Morton encoding –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç–∏")
    print()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    config = get_project_config()
    pos_helper = Position3D(config.lattice_dimensions)

    test_coords = [(1, 2, 3), (0, 0, 0), (5, 5, 5)]
    print("4. üìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ô:")
    for coords in test_coords:
        if pos_helper.is_valid_coordinates(coords):
            linear = pos_helper.to_linear_index(coords)
            back_coords = pos_helper.to_3d_coordinates(linear)
            print(f"   3D: {coords} ‚Üí Linear: {linear} ‚Üí 3D: {back_coords}")
    print()


def analyze_effective_neighbors():
    """–ê–Ω–∞–ª–∏–∑ effective_neighbors - –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π"""

    print("=== 4. EFFECTIVE NEIGHBORS - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï ===\n")

    config = get_project_config()

    print("–õ–û–ì–ò–ö–ê –í–´–ß–ò–°–õ–ï–ù–ò–Ø:")
    print(f"  –¢–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã: {config.lattice_dimensions}")
    print(f"  Total cells: {config.total_cells}")
    print(f"  Effective neighbors: {config.effective_neighbors}")
    print()

    # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–∫—É –∏–∑ ProjectConfig
    print("–ê–õ–ì–û–†–ò–¢–ú (–∏–∑ ProjectConfig.effective_neighbors):")
    print("  if total_cells <= 216:    # 6x6x6")
    print("      return 26             # –ë–∞–∑–æ–≤–æ–µ —Å–æ—Å–µ–¥—Å—Ç–≤–æ")
    print("  elif total_cells <= 1000: # –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–µ—à–µ—Ç–∫–∏")
    print("      return min(100, total_cells // 10)")
    print("  elif total_cells <= 19683: # 27x27x27")
    print("      return 2000           # –°—Ä–µ–¥–Ω–∏–µ —Ä–µ—à–µ—Ç–∫–∏")
    print("  elif total_cells <= 125000: # 50x50x50")
    print("      return 5000           # –ë–æ–ª—å—à–∏–µ —Ä–µ—à–µ—Ç–∫–∏")
    print("  else:")
    print("      return min(max_neighbors, 19683) # –ö—Ä—É–ø–Ω—ã–µ —Ä–µ—à–µ—Ç–∫–∏")
    print()

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    test_sizes = [
        ((6, 6, 6), 216),
        ((10, 10, 10), 1000),
        ((27, 27, 27), 19683),
        ((50, 50, 50), 125000),
        ((100, 100, 100), 1000000),
    ]

    print("–ü–†–ò–ú–ï–†–´ –î–õ–Ø –†–ê–ó–ù–´–• –†–ê–ó–ú–ï–†–û–í:")
    for dims, total in test_sizes:
        if total <= 216:
            neighbors = 26
        elif total <= 1000:
            neighbors = min(100, total // 10)
        elif total <= 19683:
            neighbors = 2000
        elif total <= 125000:
            neighbors = 5000
        else:
            neighbors = min(10000, 19683)

        percentage = (neighbors / total) * 100
        print(f"  {dims}: {total} –∫–ª–µ—Ç–æ–∫ ‚Üí {neighbors} —Å–æ—Å–µ–¥–µ–π ({percentage:.1f}%)")
    print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""

    print("üîç –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –°–û–°–ï–î–ï–ô –í 3D CELLULAR NEURAL NETWORK")
    print("=" * 60)
    print()

    try:
        # 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        topology, pos_helper = analyze_neighbor_strategies()

        # 2. –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å–µ–¥–∏
        analyze_local_neighbors(topology, pos_helper)

        # 3. –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        analyze_current_strategy(topology, pos_helper)

        # 4. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã vs —á–∏—Å–ª–∞
        analyze_coordinate_vs_numerical()

        # 5. Effective neighbors
        analyze_effective_neighbors()

        print("‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("  - –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ö–û–û–†–î–ò–ù–ê–¢–´ (–Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞)")
        print("  - Von Neumann –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö (6 —Å–æ—Å–µ–¥–µ–π)")
        print("  - Spatial hashing –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö —Å–æ—Å–µ–¥–µ–π")
        print("  - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ä–µ—à–µ—Ç–∫–∏")
        print("  - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–Ω–µ–π–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
