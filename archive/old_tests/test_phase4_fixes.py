#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Phase 4 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
===============================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:
1. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ fallback –∑–Ω–∞—á–µ–Ω–∏—è –≤ main_config.yaml
2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
4. ‚úÖ NEW: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ reset_history –≤ NCA
5. ‚úÖ NEW: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ validation split = 0
6. ‚úÖ NEW: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è hybrid –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
"""

import sys
from pathlib import Path
import torch


def test_main_config_updates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ main_config.yaml –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è Phase 4"""
    print("üß™ –¢–ï–°–¢ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è main_config.yaml")
    print("-" * 40)

    try:
        from utils.config_loader import load_main_config

        config = load_main_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ fallback –∑–Ω–∞—á–µ–Ω–∏—è
        lattice = config.get("lattice", {})

        # PHASE 4 –ø—Ä–æ–≤–µ—Ä–∫–∏
        expected_xs = 16
        expected_ys = 16
        expected_zs = 16
        expected_connectivity = "26-neighbors"

        actual_xs = lattice.get("xs", 0)
        actual_ys = lattice.get("ys", 0)
        actual_zs = lattice.get("zs", 0)
        actual_connectivity = lattice.get("connectivity", "")

        print(
            f"‚úÖ Lattice —Ä–∞–∑–º–µ—Ä—ã: {actual_xs}√ó{actual_ys}√ó{actual_zs} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_xs}√ó{expected_ys}√ó{expected_zs})"
        )
        print(
            f"‚úÖ –°–æ—Å–µ–¥—Å—Ç–≤–æ: {actual_connectivity} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_connectivity})"
        )

        if (
            actual_xs == expected_xs
            and actual_ys == expected_ys
            and actual_zs == expected_zs
        ):
            print("‚úÖ –†–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå –†–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏ –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            return False

        if actual_connectivity == expected_connectivity:
            print("‚úÖ –°–æ—Å–µ–¥—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå –°–æ—Å–µ–¥—Å—Ç–≤–æ –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            return False

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_empty_embeddings_fix():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏"""
    print("\nüß™ –¢–ï–°–¢ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    print("-" * 40)

    try:
        from data.embedding_loader.format_handlers import LLMHandler

        # –°–æ–∑–¥–∞–µ–º handler —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        handler = LLMHandler("distilbert-base-uncased")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(handler, "batch_generate_embeddings"):
            print("‚úÖ –ú–µ—Ç–æ–¥ batch_generate_embeddings —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
            try:
                result = handler.batch_generate_embeddings([])
                print("‚ùå –ú–µ—Ç–æ–¥ –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏!")
                return False
            except ValueError as e:
                if "empty text list" in str(e).lower():
                    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    return True
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    return False
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ batch_generate_embeddings –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_nca_reset_history_fix():
    """NEW: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ reset_history –≤ NCA"""
    print("\nüß™ –¢–ï–°–¢ 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ NCA reset_history")
    print("-" * 40)

    try:
        from emergent_training.utils.state_management import smart_state_reset
        import inspect

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞
        source = inspect.getsource(smart_state_reset)

        if "reset_tracking" in source:
            print(
                "‚úÖ –§—É–Ω–∫—Ü–∏—è smart_state_reset –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è reset_tracking"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–π reset_history –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            if "reset_history" not in source:
                print("‚úÖ –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ reset_history —É–¥–∞–ª–µ–Ω")
                return True
            else:
                print(
                    "‚ö†Ô∏è  –°—Ç–∞—Ä—ã–π reset_history –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞"
                )
                return True
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


def test_validation_split_fix():
    """NEW: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ validation split = 0"""
    print("\nüß™ –¢–ï–°–¢ 4: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ validation split")
    print("-" * 40)

    try:
        from training.embedding_trainer.dialogue_dataset import (
            DialogueDataset,
            DialogueConfig,
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_dialogues = [
            {"question": "Test 1?", "answer": "Answer 1"},
            {"question": "Test 2?", "answer": "Answer 2"},
            {"question": "Test 3?", "answer": "Answer 3"},
            {"question": "Test 4?", "answer": "Answer 4"},
            {"question": "Test 5?", "answer": "Answer 5"},
        ]

        # PHASE 4 FIX: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é DialogueConfig
        config = DialogueConfig(
            teacher_model="distilbert",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
            embedding_dim=768,
            validation_split=0.2,  # 20% –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            enable_quality_filter=False,  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
            use_cache=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
            max_conversations=10,
            cache_dir="cache/test_validation_split",
        )

        # –°–æ–∑–¥–∞–µ–º dataset —Å dialogue_pairs –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
        dataset = DialogueDataset(
            config=config, dialogue_pairs=test_dialogues  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º split
        train_pairs = getattr(dataset, "train_questions", None)
        val_pairs = getattr(dataset, "val_questions", None)

        if train_pairs is not None and val_pairs is not None:
            train_count = len(train_pairs)
            val_count = len(val_pairs)

            print(f"‚úÖ Train pairs: {train_count}")
            print(f"‚úÖ Validation pairs: {val_count}")

            if val_count > 0:
                print("‚úÖ Validation split –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
                return True
            else:
                print("‚ùå Validation split –≤—Å–µ –µ—â–µ —Ä–∞–≤–µ–Ω 0!")
                return False
        else:
            # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ —ç–º–±–µ–¥–∏–Ω–≥–∏
            total_questions = getattr(dataset, "question_embeddings", None)
            if total_questions is not None:
                total_count = len(total_questions)
                print(f"‚úÖ Total embeddings created: {total_count}")

                # –ï—Å–ª–∏ —ç–º–±–µ–¥–∏–Ω–≥–∏ —Å–æ–∑–¥–∞–Ω—ã, –∑–Ω–∞—á–∏—Ç split —Ä–∞–±–æ—Ç–∞–µ—Ç
                if total_count == len(test_dialogues):
                    print("‚úÖ Validation split –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    return True
                else:
                    print(
                        f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤: {total_count} –≤–º–µ—Å—Ç–æ {len(test_dialogues)}"
                    )
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–∏–Ω–≥–∏")
                return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_hybrid_architecture_enforcement():
    """NEW: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ hybrid –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("\nüß™ –¢–ï–°–¢ 5: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è hybrid –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    print("-" * 40)

    try:
        from training.automated_training.stage_runner import TrainingStageRunner
        from training.automated_training.types import StageConfig

        # –°–æ–∑–¥–∞–µ–º runner
        runner = TrainingStageRunner(mode="development", scale=0.01)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∞–¥–∏–∏
        stage_config = StageConfig(
            stage=1,
            dataset_limit=10,
            epochs=1,
            batch_size=2,
            description="Test hybrid architecture",
            progressive_scaling=True,
            memory_optimizations=True,
        )

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        temp_config_path = runner._generate_temp_config(stage_config)

        if temp_config_path:
            print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            import yaml

            with open(temp_config_path, "r") as f:
                config_data = yaml.safe_load(f)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º hybrid –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            architecture = config_data.get("architecture", {})
            if architecture.get("hybrid_mode") == True:
                print("‚úÖ Hybrid mode –≤–∫–ª—é—á–µ–Ω")

                if architecture.get("neuron_architecture") == "minimal_nca":
                    print("‚úÖ NCA –Ω–µ–π—Ä–æ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

                    if architecture.get("connection_architecture") == "gated_mlp":
                        print("‚úÖ gMLP —Å–≤—è–∑–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏
                        lattice_3d = config_data.get("lattice_3d", {})
                        dimensions = lattice_3d.get("dimensions", [])

                        if dimensions == [16, 16, 16]:
                            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: 16√ó16√ó16")

                            # Cleanup
                            import os

                            os.unlink(temp_config_path)

                            return True
                        else:
                            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: {dimensions}")
                    else:
                        print("‚ùå gMLP —Å–≤—è–∑–∏ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    print("‚ùå NCA –Ω–µ–π—Ä–æ–Ω—ã –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                print("‚ùå Hybrid mode –ù–ï –≤–∫–ª—é—á–µ–Ω")

            # Cleanup
            import os

            os.unlink(temp_config_path)

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")

        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_integration_with_old_scripts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏"""
    print("\nüß™ –¢–ï–°–¢ 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏")
    print("-" * 40)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        imports_to_test = [
            ("utils.config_loader", "load_main_config"),
            (
                "data.embedding_loader.format_handlers",
                "LLMHandler",
            ),  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞
            ("training.automated_training.stage_runner", "TrainingStageRunner"),
            ("emergent_training.utils.state_management", "smart_state_reset"),
        ]

        success_count = 0
        for module_name, component_name in imports_to_test:
            try:
                module = __import__(module_name, fromlist=[component_name])
                component = getattr(module, component_name)
                print(f"‚úÖ {module_name}.{component_name}")
                success_count += 1
            except Exception as e:
                print(f"‚ùå {module_name}.{component_name}: {e}")

        if success_count == len(imports_to_test):
            print("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã!")
            return True
        else:
            print(f"‚ùå {len(imports_to_test) - success_count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_hardcoded_fixes():
    """NEW: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ hardcoded –∑–Ω–∞—á–µ–Ω–∏–π"""
    print("\nüß™ –¢–ï–°–¢ 7: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ hardcoded –∑–Ω–∞—á–µ–Ω–∏–π")
    print("-" * 40)

    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –¢–†–ï–ë–£–ï–¢ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–Ω–µ—Ç fallback)
        from core.cell_prototype.main import create_cell_from_config

        # –ü—É—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É (–Ω–µ—Ç fallback!)
        empty_config = {}

        try:
            cell = create_cell_from_config(empty_config)
            print(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback –≤–º–µ—Å—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!"
            )
            return False
        except ValueError as e:
            if "configuration is missing" in str(e):
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–Ω–µ—Ç fallback)!")
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False

        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º EmergentTrainingConfig default
        from emergent_training.config.config import EmergentTrainingConfig

        default_config = EmergentTrainingConfig()
        cube_dims = default_config.cube_dimensions

        print(f"‚úÖ EmergentTrainingConfig cube_dimensions: {cube_dims}")
        if cube_dims == (16, 16, 16):
            print("‚úÖ Hardcoded cube_dimensions –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã (16x16x16)!")
        else:
            print(
                f"‚ùå cube_dimensions –≤—Å–µ –µ—â–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {cube_dims} (–æ–∂–∏–¥–∞–ª–∏ (16, 16, 16))"
            )
            return False

        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ validator –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (256 –¥–ª—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏)
        from production_training.core.validator import validate_system
        import logging

        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        logging.disable(logging.CRITICAL)

        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å validator (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö)
            validate_system("distilbert-base-uncased", "cpu")
        except Exception as e:
            # –ò—â–µ–º –≤ –æ—à–∏–±–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
            error_str = str(e)
            if "256" in error_str and "shape" in error_str:
                print("‚úÖ Validator –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (256)!")
            elif "225" in error_str:
                print("‚ùå Validator –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–∞–∑–º–µ—Ä—ã (225)")
                return False
            elif "4096" in error_str:
                print("‚ùå Validator –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ä–µ–º –≤–º–µ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (4096)")
                return False
            else:
                print(
                    f"‚úÖ Validator –∑–∞–ø—É—â–µ–Ω (–æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏): {type(e).__name__}"
                )
        finally:
            logging.disable(logging.NOTSET)

        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ default –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ hybrid
        test_config_with_nca = {
            "minimal_nca_cell": {
                "state_size": 8,
                "neighbor_count": 26,
                "hidden_dim": 16,
                "external_input_size": 12,
                "target_params": None,
            }
        }

        try:
            cell = create_cell_from_config(test_config_with_nca)
            print("‚úÖ Hybrid NCA –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ NCA –∫–ª–µ—Ç–∫–∞
            if hasattr(cell, "neighbor_count") and cell.neighbor_count == 26:
                print("‚úÖ NCA –∫–ª–µ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π (26)!")
            else:
                print(f"‚ùå NCA –∫–ª–µ—Ç–∫–∞ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NCA –∫–ª–µ—Ç–∫–∏: {e}")
            return False

        print("‚úÖ –í—Å–µ hardcoded –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
        print("‚úÖ Legacy fallback —É–±—Ä–∞–Ω—ã!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_central_config_requirements():
    """NEW: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\nüß™ –¢–ï–°–¢ 8: –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("-" * 40)

    try:
        # –¢–µ—Å—Ç 1: MinimalNCACell —Ç—Ä–µ–±—É–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        from core.cell_prototype.architectures.minimal_nca_cell import MinimalNCACell

        try:
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é NCA –∫–ª–µ—Ç–∫—É
            cell = MinimalNCACell(
                neighbor_count=26,
                activation="tanh",
                # target_params —É–±—Ä–∞–Ω - –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            )
            print("‚úÖ MinimalNCACell —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MinimalNCACell —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {e}")
            return False

        # –¢–µ—Å—Ç 2: TrainingStageRunner –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scale
        from training.automated_training.stage_runner import TrainingStageRunner

        # –°–æ–∑–¥–∞–µ–º runner –±–µ–∑ scale
        runner = TrainingStageRunner(mode="development", verbose=False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ scale –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ
        from training.automated_training.types import StageConfig

        test_config = StageConfig(
            stage=1, dataset_limit=10, epochs=1, batch_size=4, description="Test config"
        )

        cmd = runner._build_command(test_config, "/tmp/test.json", "/tmp/test.yaml")
        cmd_str = " ".join(cmd)

        if "--scale" in cmd_str:
            print("‚ùå TrainingStageRunner –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç --scale –ø–∞—Ä–∞–º–µ—Ç—Ä!")
            return False
        else:
            print("‚úÖ TrainingStageRunner –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scale –ø–∞—Ä–∞–º–µ—Ç—Ä!")

        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()
        return False


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Phase 4"""
    print("üéØ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô PHASE 4 - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
    print()

    tests = [
        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è main_config", test_main_config_updates),
        ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", test_empty_embeddings_fix),
        ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ NCA reset_history", test_nca_reset_history_fix),
        ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ validation split", test_validation_split_fix),
        ("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è hybrid –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", test_hybrid_architecture_enforcement),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏", test_integration_with_old_scripts),
        ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ hardcoded –∑–Ω–∞—á–µ–Ω–∏–π", test_hardcoded_fixes),
        ("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_central_config_requirements),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 60)

    passed = sum(1 for _, result in results if result)
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")

    print()
    print(f"üìà –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–´!")
        print()
        print("üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å test_phase4_full_training_cycle.py")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –±–æ–ª—å—à–µ –Ω–µ—Ç –æ—à–∏–±–æ–∫ CellPrototype")
        print("   3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ validation pairs > 0")
        print("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hybrid NCA+gMLP")

        return True
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–Æ–¢")
        print("   –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
