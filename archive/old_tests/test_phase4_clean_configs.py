#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —á–∏—Å—Ç—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π Phase 4
======================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
2. –ò—Å–ø–æ–ª—å–∑—É—é—Ç –≥–∏–±—Ä–∏–¥–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É NCA+gMLP
3. –í–∫–ª—é—á–∞—é—Ç –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
4. –°–æ–≤–º–µ—Å—Ç–∏–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±—É—á–µ–Ω–∏—è
"""

import sys
import yaml
from pathlib import Path


def test_lattice_3d_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ lattice_3d"""
    print("üß™ –¢–ï–°–¢ 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è lattice_3d")
    print("-" * 40)

    try:
        from core.lattice_3d.config import load_lattice_config

        config_path = "core/lattice_3d/config/hybrid_nca_gmlp.yaml"

        if not Path(config_path).exists():
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        lattice_config = load_lattice_config(config_path)

        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"‚úÖ –†–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: {lattice_config.dimensions}")
        print(f"‚úÖ GPU –≤–∫–ª—é—á–µ–Ω: {lattice_config.gpu_enabled}")
        print(f"‚úÖ –ü–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å: {lattice_config.enable_plasticity}")
        print(f"‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: {lattice_config.enable_competitive_learning}")
        print(f"‚úÖ BCM –º–µ—Ç–∞–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å: {lattice_config.enable_metaplasticity}")
        print(f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: {lattice_config.enable_clustering}")
        print(f"‚úÖ Mixed precision: {lattice_config.mixed_precision}")
        print(f"‚úÖ Checkpointing: {lattice_config.use_checkpointing}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        assert tuple(lattice_config.dimensions) == (
            16,
            16,
            16,
        ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {lattice_config.dimensions}"
        assert lattice_config.gpu_enabled == True, "GPU –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω"
        assert (
            lattice_config.neighbors == 26
        ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π: {lattice_config.neighbors}"
        assert (
            lattice_config.enable_plasticity == True
        ), "–ü–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞"

        print("üéâ LATTICE_3D –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ lattice_3d –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_cell_prototype_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ cell_prototype"""
    print("\nüß™ –¢–ï–°–¢ 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è cell_prototype")
    print("-" * 40)

    try:
        config_path = "core/cell_prototype/config/hybrid_nca_gmlp.yaml"

        if not Path(config_path).exists():
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º YAML
        with open(config_path, "r", encoding="utf-8") as f:
            config_data = yaml.safe_load(f)

        print(f"‚úÖ YAML –∑–∞–≥—Ä—É–∂–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert "architecture" in config_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è architecture"
        assert "minimal_nca_cell" in config_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è minimal_nca_cell"
        assert "gmlp_cell" in config_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è gmlp_cell"
        assert "integration" in config_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è integration"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        arch = config_data["architecture"]
        assert arch["hybrid_mode"] == True, "–ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω"
        assert arch["neuron_architecture"] == "minimal_nca", "–ù–µ–π—Ä–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å NCA"
        assert arch["connection_architecture"] == "gated_mlp", "–°–≤—è–∑–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å gMLP"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º NCA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        nca = config_data["minimal_nca_cell"]
        assert (
            nca["state_size"] == 4
        ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π state_size –¥–ª—è NCA: {nca['state_size']}"
        assert (
            nca["neighbor_count"] == 26
        ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π neighbor_count –¥–ª—è NCA: {nca['neighbor_count']}"
        assert (
            nca["target_params"] == 362
        ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π target_params –¥–ª—è NCA: {nca['target_params']}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º gMLP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        gmlp = config_data["gmlp_cell"]
        assert (
            gmlp["state_size"] == 8
        ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π state_size –¥–ª—è gMLP: {gmlp['state_size']}"
        assert (
            gmlp["neighbor_count"] == 26
        ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π neighbor_count –¥–ª—è gMLP: {gmlp['neighbor_count']}"
        assert gmlp["use_memory"] == False, "gMLP –Ω–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        integration = config_data["integration"]
        assert (
            integration["state_synchronization"] == True
        ), "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞"

        print(f"‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {arch['hybrid_mode']}")
        print(f"‚úÖ NCA state_size: {nca['state_size']}")
        print(f"‚úÖ NCA target_params: {nca['target_params']}")
        print(f"‚úÖ gMLP state_size: {gmlp['state_size']}")
        print(f"‚úÖ gMLP use_memory: {gmlp['use_memory']}")
        print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {integration['state_synchronization']}")

        print("üéâ CELL_PROTOTYPE –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ cell_prototype –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    print("\nüß™ –¢–ï–°–¢ 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    print("-" * 40)

    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        lattice_path = "core/lattice_3d/config/hybrid_nca_gmlp.yaml"
        cell_path = "core/cell_prototype/config/hybrid_nca_gmlp.yaml"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(lattice_path, "r", encoding="utf-8") as f:
            lattice_data = yaml.safe_load(f)

        with open(cell_path, "r", encoding="utf-8") as f:
            cell_data = yaml.safe_load(f)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º
        combined_config = {}
        combined_config.update(lattice_data)
        combined_config.update(cell_data)

        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä
        lattice_arch = lattice_data.get("architecture", {})
        cell_arch = cell_data.get("architecture", {})

        assert lattice_arch.get("hybrid_mode") == cell_arch.get(
            "hybrid_mode"
        ), "–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ hybrid_mode"
        assert lattice_arch.get("neuron_architecture") == cell_arch.get(
            "neuron_architecture"
        ), "–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ neuron_architecture"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é neighbor_count
        lattice_neighbors = lattice_data["lattice_3d"]["topology"]["neighbors"]
        nca_neighbors = cell_data["minimal_nca_cell"]["neighbor_count"]
        gmlp_neighbors = cell_data["gmlp_cell"]["neighbor_count"]

        assert (
            lattice_neighbors == nca_neighbors == gmlp_neighbors
        ), f"–ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ neighbors: {lattice_neighbors}, {nca_neighbors}, {gmlp_neighbors}"

        print(f"‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        print(f"‚úÖ Neighbors —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {lattice_neighbors}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å LatticeConfig
        from core.lattice_3d.config import _build_lattice_config_from_data

        lattice_config = _build_lattice_config_from_data(combined_config)

        print(f"‚úÖ LatticeConfig —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ –†–∞–∑–º–µ—Ä—ã: {lattice_config.dimensions}")
        print(f"‚úÖ Neighbors: {lattice_config.neighbors}")
        print(f"‚úÖ –ü–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å: {lattice_config.enable_plasticity}")

        print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô –£–°–ü–ï–®–ù–ê!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_dynamic_config_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å DynamicConfigGenerator"""
    print("\nüß™ –¢–ï–°–¢ 4: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å DynamicConfigGenerator")
    print("-" * 40)

    try:
        from utils.config_manager.dynamic_config import DynamicConfigGenerator

        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = DynamicConfigGenerator()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ development
        config = generator.generate_config("development")

        print("‚úÖ DynamicConfigGenerator —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ hybrid —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω
        architecture = config.get("architecture", {})
        assert (
            architecture.get("hybrid_mode") == True
        ), "Hybrid —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å NCA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        assert "minimal_nca_cell" in config, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç minimal_nca_cell"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º emergent_training
        emergent = config.get("emergent_training", {})
        assert (
            emergent.get("cell_architecture") == "nca"
        ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è cell_architecture: {emergent.get('cell_architecture')}"

        print(f"‚úÖ Hybrid mode: {architecture.get('hybrid_mode')}")
        print(f"‚úÖ Cell architecture: {emergent.get('cell_architecture')}")
        print(f"‚úÖ NCA state_size: {config['minimal_nca_cell']['state_size']}")

        print("üéâ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° DYNAMIC CONFIG –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        import traceback

        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢ –ù–û–í–´–• –ß–ò–°–¢–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô PHASE 4")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print()

    tests = [
        ("Lattice 3D Config", test_lattice_3d_config),
        ("Cell Prototype Config", test_cell_prototype_config),
        ("Config Integration", test_config_integration),
        ("Dynamic Config Compatibility", test_dynamic_config_compatibility),
    ]

    results = {}

    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = "‚úÖ PASS" if result else "‚ùå FAIL"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = "‚ùå ERROR"

    print("\n" + "=" * 60)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print()

    for test_name, result in results.items():
        print(f"   {result} | {test_name}")

    passed = sum(1 for r in results.values() if r == "‚úÖ PASS")
    total = len(results)

    print(f"\nüìä –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")

    if passed == total:
        print("üéâ –í–°–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
        print()
        print("üöÄ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
        print("   - core/lattice_3d/config/hybrid_nca_gmlp.yaml")
        print("   - core/cell_prototype/config/hybrid_nca_gmlp.yaml")
        print()
        print("üéØ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:")
        print("   python test_phase4_full_training_cycle.py")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
