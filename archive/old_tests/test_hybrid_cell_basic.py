#!/usr/bin/env python3
"""
–¢–µ—Å—Ç HybridCell (NCA + GNN) - Phase 3.3
=======================================

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–π:
- NCA (10% –≤–ª–∏—è–Ω–∏–µ) - –ª–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
- GNN (90% –≤–ª–∏—è–Ω–∏–µ) - –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
"""

import torch
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "new_rebuild"))

from new_rebuild.config import get_project_config, set_project_config, ProjectConfig
from new_rebuild.core.cells import HybridCell, CellFactory
from new_rebuild.utils.logging import setup_logging, get_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging(debug_mode=True)
logger = get_logger(__name__)


def test_hybrid_cell_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è HybridCell"""
    logger.info("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è HybridCell")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è hybrid –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    config = ProjectConfig(
        architecture_type="hybrid",
        debug_mode=True,
        lattice_dimensions=(6, 6, 6),
        # NCA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞)
        nca_state_size=4,
        nca_hidden_dim=3,
        nca_external_input_size=1,
        nca_neighbor_count=26,
        nca_target_params=69,
        # GNN –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è)
        gnn_state_size=32,
        gnn_message_dim=16,
        gnn_hidden_dim=32,
        gnn_external_input_size=8,
        gnn_neighbor_count=26,
        gnn_target_params=8000,
        # Hybrid –≤–µ—Å–∞
        hybrid_nca_weight=0.1,
        hybrid_gnn_weight=0.9,
    )
    set_project_config(config)

    # –°–æ–∑–¥–∞–µ–º HybridCell
    hybrid_cell = HybridCell()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    total_params = sum(p.numel() for p in hybrid_cell.parameters())
    logger.info(f"‚úÖ HybridCell —Å–æ–∑–¥–∞–Ω–∞:")
    logger.info(f"   Total params: {total_params:,}")
    logger.info(f"   Target params: {hybrid_cell.target_params:,}")
    logger.info(f"   State size: {hybrid_cell.state_size}")
    logger.info(f"   NCA weight: {hybrid_cell.nca_weight:.1f}")
    logger.info(f"   GNN weight: {hybrid_cell.gnn_weight:.1f}")

    return hybrid_cell, total_params


def test_hybrid_cell_forward():
    """–¢–µ—Å—Ç forward pass HybridCell"""
    logger.info("üß™ –¢–µ—Å—Ç forward pass HybridCell")

    hybrid_cell, total_params = test_hybrid_cell_creation()

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 2
    num_neighbors = 26
    state_size = hybrid_cell.state_size  # 32 (GNN —Ä–∞–∑–º–µ—Ä)
    external_input_size = hybrid_cell.external_input_size  # 8

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã
    neighbor_states = torch.randn(batch_size, num_neighbors, state_size)
    own_state = torch.randn(batch_size, state_size)
    external_input = torch.randn(batch_size, external_input_size)

    logger.info(f"üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    logger.info(f"   neighbor_states: {neighbor_states.shape}")
    logger.info(f"   own_state: {own_state.shape}")
    logger.info(f"   external_input: {external_input.shape}")

    # Forward pass
    with torch.no_grad():
        new_state = hybrid_cell(
            neighbor_states=neighbor_states,
            own_state=own_state,
            external_input=external_input,
        )

    logger.info(f"üìä –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    logger.info(f"   new_state: {new_state.shape}")
    logger.info(
        f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {torch.mean(torch.abs(new_state - own_state)):.6f}"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert (
        new_state.shape == own_state.shape
    ), f"–†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–∞ {new_state.shape} != —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞ {own_state.shape}"
    assert not torch.allclose(
        new_state, own_state
    ), "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)"

    logger.info("‚úÖ Forward pass —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    return hybrid_cell, new_state


def test_hybrid_component_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ HybridCell"""
    logger.info("üß™ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ HybridCell")

    hybrid_cell, _ = test_hybrid_cell_creation()

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 2
    num_neighbors = 26
    state_size = hybrid_cell.state_size
    external_input_size = hybrid_cell.external_input_size

    neighbor_states = torch.randn(batch_size, num_neighbors, state_size)
    own_state = torch.randn(batch_size, state_size)
    external_input = torch.randn(batch_size, external_input_size)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    with torch.no_grad():
        component_states = hybrid_cell.get_component_states(
            neighbor_states=neighbor_states,
            own_state=own_state,
            external_input=external_input,
        )

    logger.info("üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    logger.info(f"   GNN state shape: {component_states['gnn_state'].shape}")
    logger.info(f"   NCA state (expanded) shape: {component_states['nca_state'].shape}")
    logger.info(
        f"   NCA state (small) shape: {component_states['nca_state_small'].shape}"
    )
    logger.info(f"   Hybrid state shape: {component_states['hybrid_state'].shape}")
    logger.info(f"   GNN weight: {component_states['gnn_weight']:.1f}")
    logger.info(f"   NCA weight: {component_states['nca_weight']:.1f}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∏—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    gnn_influence = torch.mean(torch.abs(component_states["gnn_state"] - own_state))
    nca_influence = torch.mean(torch.abs(component_states["nca_state"] - own_state))
    hybrid_influence = torch.mean(
        torch.abs(component_states["hybrid_state"] - own_state)
    )

    logger.info(f"üìä –í–ª–∏—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    logger.info(f"   GNN influence: {gnn_influence:.6f}")
    logger.info(f"   NCA influence: {nca_influence:.6f}")
    logger.info(f"   Hybrid influence: {hybrid_influence:.6f}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert component_states["gnn_state"].shape == own_state.shape
    assert component_states["nca_state"].shape == own_state.shape
    assert (
        component_states["nca_state_small"].shape[1] == hybrid_cell.nca_state_size
    )  # 4
    assert component_states["hybrid_state"].shape == own_state.shape

    logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")

    return component_states


def test_cell_factory_hybrid():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è HybridCell —á–µ—Ä–µ–∑ CellFactory"""
    logger.info("üß™ –¢–µ—Å—Ç CellFactory –¥–ª—è HybridCell")

    config = get_project_config()
    gnn_config = config.get_gnn_config()

    # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    hybrid_cell_factory = CellFactory.create_cell("hybrid", gnn_config)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
    assert isinstance(
        hybrid_cell_factory, HybridCell
    ), f"–û–∂–∏–¥–∞–ª—Å—è HybridCell, –ø–æ–ª—É—á–µ–Ω {type(hybrid_cell_factory)}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    total_params = sum(p.numel() for p in hybrid_cell_factory.parameters())
    logger.info(f"‚úÖ CellFactory —Å–æ–∑–¥–∞–ª HybridCell:")
    logger.info(f"   Total params: {total_params:,}")
    logger.info(f"   Type: {type(hybrid_cell_factory).__name__}")

    return hybrid_cell_factory


def test_parameter_analysis():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ HybridCell"""
    logger.info("üß™ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

    hybrid_cell, total_params = test_hybrid_cell_creation()

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    nca_params = sum(p.numel() for p in hybrid_cell.nca_cell.parameters())
    gnn_params = sum(p.numel() for p in hybrid_cell.gnn_cell.parameters())
    aligner_params = sum(p.numel() for p in hybrid_cell.state_aligner.parameters())

    logger.info("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:")
    logger.info(f"   NCA component: {nca_params:,} params")
    logger.info(f"   GNN component: {gnn_params:,} params")
    logger.info(f"   State Aligner: {aligner_params:,} params")
    logger.info(f"   Total: {total_params:,} params")
    logger.info(f"   Target: {hybrid_cell.target_params:,} params")

    # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    efficiency = (
        total_params / hybrid_cell.target_params if hybrid_cell.target_params else None
    )
    logger.info(f"   Efficiency: {efficiency:.2f}x –æ—Ç —Ü–µ–ª–∏")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    config = get_project_config()
    expected_nca = config.nca_target_params  # 69
    expected_gnn = config.gnn_target_params  # 8000
    expected_total = expected_nca + expected_gnn  # 8069

    logger.info("üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º:")
    logger.info(
        f"   NCA: {nca_params} / {expected_nca} = {nca_params/expected_nca:.2f}x"
    )
    logger.info(
        f"   GNN: {gnn_params} / {expected_gnn} = {gnn_params/expected_gnn:.2f}x"
    )
    logger.info(
        f"   Total: {total_params} / {expected_total} = {total_params/expected_total:.2f}x"
    )

    return {
        "total": total_params,
        "nca": nca_params,
        "gnn": gnn_params,
        "aligner": aligner_params,
        "efficiency": efficiency,
    }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HybridCell (Phase 3.3)")

    try:
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        logger.info("\n" + "=" * 50)
        hybrid_cell, total_params = test_hybrid_cell_creation()

        # –¢–µ—Å—Ç 2: Forward pass
        logger.info("\n" + "=" * 50)
        hybrid_cell, new_state = test_hybrid_cell_forward()

        # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("\n" + "=" * 50)
        component_states = test_hybrid_component_analysis()

        # –¢–µ—Å—Ç 4: CellFactory
        logger.info("\n" + "=" * 50)
        factory_cell = test_cell_factory_hybrid()

        # –¢–µ—Å—Ç 5: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.info("\n" + "=" * 50)
        param_analysis = test_parameter_analysis()

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        logger.info("\n" + "üéâ" + "=" * 48)
        logger.info("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("‚úÖ HybridCell (NCA + GNN) —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        logger.info(
            f"‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: NCA ({param_analysis['nca']:,}) + GNN ({param_analysis['gnn']:,}) + Aligner ({param_analysis['aligner']:,})"
        )
        logger.info(f"‚úÖ –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {param_analysis['total']:,}")
        logger.info(f"‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {param_analysis['efficiency']:.2f}x –æ—Ç —Ü–µ–ª–∏")
        logger.info("‚úÖ Phase 3.3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
