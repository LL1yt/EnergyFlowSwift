#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Phase 2: –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 3D Lattice
==============================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–ª–µ—Ç–æ–∫ —Å 3D —Ä–µ—à–µ—Ç–∫–æ–π.
"""

import torch
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from new_rebuild.utils.logging import setup_logging
from new_rebuild.config import get_project_config

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è debug_mode
config = get_project_config()
setup_logging(debug_mode=config.debug_mode)


def test_phase2_lattice_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é lattice —Å –∫–ª–µ—Ç–∫–∞–º–∏."""

    print("üß™ PHASE 2 TEST: Lattice Integration")
    print("=" * 50)

    try:
        # –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from new_rebuild.config import get_project_config
        from new_rebuild.core.lattice import create_lattice

        print("‚úÖ Imports successful")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_project_config()
        print(f"‚úÖ Config loaded: {config.architecture_type}")
        print(f"   Lattice dimensions: {config.lattice_dimensions}")
        print(f"   Device: {config.device}")

        # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É
        print("\nüèóÔ∏è Creating lattice...")
        lattice = create_lattice()
        print(f"‚úÖ Lattice created successfully")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print(f"   Total cells: {lattice.pos_helper.total_positions}")
        print(f"   State shape: {lattice.states.shape}")
        print(f"   Cell type: {type(lattice.cells).__name__}")
        print(f"   Input points: {len(lattice.input_points)}")
        print(f"   Output points: {len(lattice.output_points)}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
        print("\nüîÑ Testing forward pass...")
        initial_states = lattice.states.clone()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤
        for step in range(3):
            new_states = lattice.forward()
            print(
                f"   Step {step+1}: states changed = {not torch.equal(initial_states, new_states)}"
            )
            initial_states = new_states.clone()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        print("\nüìä Validation...")
        validation_stats = lattice.validate_lattice()
        print(f"   Architecture: {validation_stats['architecture_type']}")
        print(
            f"   Topology neighbors: {validation_stats['topology']['avg_neighbors']:.1f}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        perf_stats = lattice.get_performance_stats()
        print(f"   Steps performed: {perf_stats['total_steps']}")
        print(f"   Avg time per step: {perf_stats['avg_time_per_step']*1000:.2f}ms")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º I/O –æ–ø–µ—Ä–∞—Ü–∏–∏
        print("\nüì•üì§ Testing I/O operations...")
        input_states = lattice.get_input_states()
        output_states = lattice.get_output_states()
        print(f"   Input states shape: {input_states.shape}")
        print(f"   Output states shape: {output_states.shape}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        random_inputs = torch.randn_like(input_states) * 0.5
        lattice.set_input_states(random_inputs)
        print("   ‚úÖ Input states set successfully")

        # –í—ã–ø–æ–ª–Ω—è–µ–º forward pass —Å –Ω–æ–≤—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏
        states_after_input = lattice.forward()
        print(f"   ‚úÖ Forward pass with inputs successful")

        print("\nüéâ PHASE 2 TEST COMPLETED SUCCESSFULLY!")
        print(f"üìä Final Statistics:")
        print(
            f"   Total parameters: ~{sum(p.numel() for p in lattice.cells.parameters()):,}"
        )
        print(f"   Memory usage: ~{lattice.states.numel() * 4 / 1024:.1f} KB")
        print(
            f"   Topology efficiency: {validation_stats['topology']['avg_neighbors']:.1f}/{validation_stats['topology']['target_neighbors']} neighbors"
        )

        return True

    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        import traceback

        traceback.print_exc()
        return False


def test_lattice_configurations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ—à–µ—Ç–∫–∏."""

    print("\nüîß Testing Different Configurations")
    print("-" * 40)

    try:
        from new_rebuild.config import get_project_config

        config = get_project_config()
        original_arch = config.architecture_type

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        architectures = ["nca", "gmlp", "hybrid"]

        for arch in architectures:
            print(f"\nüß™ Testing {arch.upper()} architecture...")

            # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            config.architecture_type = arch

            from new_rebuild.core.lattice import create_lattice

            lattice = create_lattice()

            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
            states = lattice.forward()
            print(
                f"   ‚úÖ {arch}: forward pass successful, output shape: {states.shape}"
            )

            # –û—á–∏—Å—Ç–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
            del lattice
            torch.cuda.empty_cache() if torch.cuda.is_available() else None

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        config.architecture_type = original_arch

        print("\n‚úÖ All architecture configurations tested successfully!")
        return True

    except Exception as e:
        print(f"‚ùå Configuration test error: {str(e)}")
        return False


if __name__ == "__main__":
    print("üöÄ STARTING PHASE 2 LATTICE TESTS")
    print("=" * 60)

    success = True

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    success &= test_phase2_lattice_integration()

    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    success &= test_lattice_configurations()

    print("\n" + "=" * 60)
    if success:
        print("üéâ ALL TESTS PASSED! Phase 2 lattice integration is working correctly.")
    else:
        print("‚ùå SOME TESTS FAILED! Check the errors above.")

    print("=" * 60)
