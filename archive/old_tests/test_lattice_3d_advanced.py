#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥—É–ª—è Lattice 3D - –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import torch
import numpy as np
import logging
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from core.lattice_3d import (
    Lattice3D, LatticeConfig, Position3D, NeighborTopology,
    BoundaryCondition, Face, load_lattice_config, create_lattice_from_config
)

def test_lattice_3d_full():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Lattice3D"""
    print("üöÄ –†–ê–°–®–ò–†–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LATTICE 3D - –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨")
    print("=" * 80)
    
    try:
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–µ—à–µ—Ç–∫–∏
        print("üß™ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–µ—à–µ—Ç–∫–∏ Lattice3D")
        
        config = LatticeConfig(
            dimensions=(4, 4, 4),
            boundary_conditions=BoundaryCondition.WALLS,
            initialization_method="normal",
            initialization_std=0.1,
            parallel_processing=True,
            track_performance=True,
            gpu_enabled=False  # –û—Ç–∫–ª—é—á–∞–µ–º GPU –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        )
        
        lattice = Lattice3D(config)
        print(f"  ‚úÖ Lattice3D —Å–æ–∑–¥–∞–Ω: {config.dimensions}")
        print(f"    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫: {config.total_cells}")
        print(f"    - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {config.device}")
        print(f"    - –†–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–∫–∏: {lattice.cell_prototype.state_size}")
        print(f"    - –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞ –∫–ª–µ—Ç–∫–∏: {lattice.cell_prototype.input_size}")
        print(f"    - –§–æ—Ä–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ—à–µ—Ç–∫–∏: {lattice._states.shape}")
        
        # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ forward pass –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –≤—Ö–æ–¥–æ–≤
        print("\nüß™ –¢–µ—Å—Ç 2: Forward pass –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –≤—Ö–æ–¥–æ–≤")
        
        initial_states = lattice.get_states()
        print(f"  üìä –ù–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {initial_states.shape}")
        print(f"    - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {initial_states.mean().item():.4f}")
        print(f"    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {initial_states.std().item():.4f}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —à–∞–≥
        new_states = lattice.forward()
        print(f"  üìä –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ forward: {new_states.shape}")
        print(f"    - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_states.mean().item():.4f}")
        print(f"    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {new_states.std().item():.4f}")
        print(f"    - –ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {not torch.equal(initial_states, new_states)}")
        print(f"    - –°—á–µ—Ç—á–∏–∫ —à–∞–≥–æ–≤: {lattice.step_count}")
        
        # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ forward pass —Å –≤–Ω–µ—à–Ω–∏–º–∏ –≤—Ö–æ–¥–∞–º–∏
        print("\nüß™ –¢–µ—Å—Ç 3: Forward pass —Å –≤–Ω–µ—à–Ω–∏–º–∏ –≤—Ö–æ–¥–∞–º–∏")
        
        # –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –≤—Ö–æ–¥—ã –¥–ª—è –≤—Ö–æ–¥–Ω–æ–π –≥—Ä–∞–Ω–∏
        input_face_size = len(lattice._face_indices[config.input_face])
        external_input_size = min(4, lattice.cell_prototype.input_size)  # –ë–µ—Ä–µ–º —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        external_inputs = torch.randn(input_face_size, external_input_size)
        
        print(f"  üìä –í–Ω–µ—à–Ω–∏–µ –≤—Ö–æ–¥—ã: {external_inputs.shape}")
        print(f"    - –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–π –≥—Ä–∞–Ω–∏: {input_face_size}")
        print(f"    - –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥–∞: {external_input_size}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –≤—Ö–æ–¥–∞–º–∏
        states_before = lattice.get_states()
        new_states_with_input = lattice.forward(external_inputs)
        
        print(f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–Ω–µ—à–Ω–∏–º–∏ –≤—Ö–æ–¥–∞–º–∏:")
        print(f"    - –§–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {new_states_with_input.shape}")
        print(f"    - –ò–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {not torch.equal(states_before, new_states_with_input)}")
        print(f"    - –°—á–µ—Ç—á–∏–∫ —à–∞–≥–æ–≤: {lattice.step_count}")
        
        # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–µ–π –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
        print("\nüß™ –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ (–≥—Ä–∞–Ω–∏)")
        
        for face in Face:
            face_states = lattice.get_face_states(face)
            face_indices = lattice._face_indices[face]
            print(f"  üìä –ì—Ä–∞–Ω—å {face.name}:")
            print(f"    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫: {len(face_indices)}")
            print(f"    - –§–æ—Ä–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {face_states.shape}")
            print(f"    - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {face_states.mean().item():.4f}")
        
        # –¢–µ—Å—Ç 5: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        print("\nüß™ –¢–µ—Å—Ç 5: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_states = lattice.get_states()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        random_states = torch.randn_like(current_states)
        lattice.set_states(random_states)
        retrieved_states = lattice.get_states()
        
        print(f"  üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
        print(f"    - –°–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {torch.allclose(random_states, retrieved_states)}")
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
        lattice.reset_states()
        reset_states = lattice.get_states()
        print(f"  üìä –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
        print(f"    - –°—á–µ—Ç—á–∏–∫ —à–∞–≥–æ–≤ —Å–±—Ä–æ—à–µ–Ω: {lattice.step_count == 0}")
        print(f"    - –§–æ—Ä–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {reset_states.shape}")
        
        # –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\nüß™ –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for i in range(5):
            lattice.forward()
            
        perf_stats = lattice.get_performance_stats()
        print(f"  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ forward: {perf_stats['forward_calls']}")
        print(f"    - –û–±—â–µ–µ –≤—Ä–µ–º—è: {perf_stats['total_time']:.4f} —Å–µ–∫")
        print(f"    - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —à–∞–≥: {perf_stats['avg_time_per_step']:.4f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç 7: –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
        print("\nüß™ –¢–µ—Å—Ç 7: –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        lattice.reset_states()
        
        # –ü–æ–¥–∞–µ–º —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—Ö–æ–¥–Ω—É—é –≥—Ä–∞–Ω—å
        strong_input = torch.ones(input_face_size, external_input_size) * 2.0
        
        states_history = []
        for step in range(8):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ —Ä–µ—à–µ—Ç–∫—É
            if step == 0:
                new_states = lattice.forward(strong_input)
            else:
                new_states = lattice.forward()
            states_history.append(new_states.mean().item())
            
        print(f"  üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ (—Å—Ä–µ–¥–Ω–µ–µ):")
        for i, avg_state in enumerate(states_history):
            print(f"    –®–∞–≥ {i}: {avg_state:.4f}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–≥–Ω–∞–ª —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏–ª—Å—è
        input_face_final = lattice.get_face_states(config.input_face)
        output_face_final = lattice.get_face_states(config.output_face)
        
        print(f"  üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥—Ä–∞–Ω–µ–π:")
        print(f"    - –í—Ö–æ–¥–Ω–∞—è –≥—Ä–∞–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ): {input_face_final.mean().item():.4f}")
        print(f"    - –í—ã—Ö–æ–¥–Ω–∞—è –≥—Ä–∞–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ): {output_face_final.mean().item():.4f}")
        
        # –¢–µ—Å—Ç 8: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("\nüß™ –¢–µ—Å—Ç 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        lattice.config.parallel_processing = True
        lattice.reset_states()
        parallel_result = lattice.forward()
        
        # –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        lattice.config.parallel_processing = False
        lattice.reset_states()
        sequential_result = lattice.forward()
        
        print(f"  üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"    - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å—Ä–µ–¥–Ω–µ–µ): {parallel_result.mean().item():.4f}")
        print(f"    - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å—Ä–µ–¥–Ω–µ–µ): {sequential_result.mean().item():.4f}")
        print(f"    - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã: {torch.allclose(parallel_result, sequential_result, atol=1e-5)}")
        
        print(f"\n  ‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Lattice3D —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Lattice3D: {e}")
        import traceback
        print(traceback.format_exc())
        return False

def test_lattice_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    print("\nüß™ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        lattice = create_lattice_from_config()
        print(f"  ‚úÖ –†–µ—à–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {lattice.config.dimensions}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        initial_states = lattice.get_states()
        new_states = lattice.forward()
        
        print(f"  ‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"    - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {not torch.equal(initial_states, new_states)}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    tests_results = []
    
    tests_results.append(test_lattice_3d_full())
    tests_results.append(test_lattice_integration())
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    passed_tests = sum(tests_results)
    total_tests = len(tests_results)
    
    print("\n" + "=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –†–ê–°–®–ò–†–ï–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –ú–æ–¥—É–ª—å Lattice3D –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É")
        return True
    else:
        print(f"‚ùå {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 