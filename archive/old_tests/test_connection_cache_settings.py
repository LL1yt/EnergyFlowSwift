#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ Connection Cache
==============================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
- –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∞
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import torch
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from new_rebuild.config import get_project_config, set_project_config, ProjectConfig
from new_rebuild.core.moe import create_connection_classifier
from new_rebuild.utils.logging import get_logger

logger = get_logger(__name__)


def test_cache_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""

    print("üß™ –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ Connection Cache")
    print("=" * 50)

    # –¢–µ—Å—Ç 1: –ú–∞–ª—ã–µ —Ä–µ—à–µ—Ç–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –º–∞–ª—ã—Ö —Ä–µ—à–µ—Ç–æ–∫ (5x5x5 = 125 –∫–ª–µ—Ç–æ–∫)")
    config = ProjectConfig()
    config.lattice.dimensions = (5, 5, 5)
    config.expert.cache.enabled = True
    config.expert.cache.auto_disable_threshold = 1000
    config.expert.cache.small_lattice_fallback = True
    set_project_config(config)

    should_use_cache = config.should_use_connection_cache()
    print(f"   Should use cache: {should_use_cache}")

    classifier = create_connection_classifier(lattice_dimensions=(5, 5, 5))

    print(f"   Classifier cache enabled: {classifier.enable_cache}")
    print(f"   Performance monitoring: {classifier.enable_performance_monitoring}")

    # –¢–µ—Å—Ç 2: –°—Ä–µ–¥–Ω–∏–µ —Ä–µ—à–µ—Ç–∫–∏ - –≤–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ä–µ–¥–Ω–∏—Ö —Ä–µ—à–µ—Ç–æ–∫ (15x15x15 = 3375 –∫–ª–µ—Ç–æ–∫)")
    config = ProjectConfig()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.lattice.dimensions = (15, 15, 15)
    config.expert.cache.enabled = True  # –í–∫–ª—é—á–∞–µ–º –∫—ç—à
    set_project_config(config)

    should_use_cache = config.should_use_connection_cache()
    print(f"   Should use cache: {should_use_cache}")

    classifier = create_connection_classifier(lattice_dimensions=(15, 15, 15))

    print(f"   Classifier cache enabled: {classifier.enable_cache}")
    print(f"   Performance monitoring: {classifier.enable_performance_monitoring}")

    # –¢–µ—Å—Ç 3: –°—Ä–µ–¥–Ω–∏–µ —Ä–µ—à–µ—Ç–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ GPU (–∏–∑–º–µ–Ω–µ–Ω–æ —Å –±–æ–ª—å—à–∏—Ö)
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ä–µ–¥–Ω–∏—Ö —Ä–µ—à–µ—Ç–æ–∫ —Å GPU (20x20x20 = 8000 –∫–ª–µ—Ç–æ–∫)")
    config = ProjectConfig()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.lattice.dimensions = (20, 20, 20)
    config.expert.cache.enabled = True  # –í–∫–ª—é—á–∞–µ–º –∫—ç—à
    config.expert.cache.auto_enable_threshold = 3000  # –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥
    config.expert.cache.use_gpu_acceleration = True  # –í–∫–ª—é—á–∞–µ–º GPU
    set_project_config(config)

    should_use_cache = config.should_use_connection_cache()
    print(f"   Should use cache: {should_use_cache}")

    classifier = create_connection_classifier(lattice_dimensions=(30, 30, 30))

    print(f"   Classifier cache enabled: {classifier.enable_cache}")
    print(f"   Performance monitoring: {classifier.enable_performance_monitoring}")

    # –¢–µ—Å—Ç 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∞
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫—ç—à–∞")
    config = ProjectConfig()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.lattice.dimensions = (30, 30, 30)
    config.expert.cache.enabled = False  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º
    set_project_config(config)

    should_use_cache = config.should_use_connection_cache()
    print(f"   Should use cache: {should_use_cache}")

    classifier = create_connection_classifier(lattice_dimensions=(30, 30, 30))

    print(f"   Classifier cache enabled: {classifier.enable_cache}")
    print(f"   Performance monitoring: {classifier.enable_performance_monitoring}")

    # –¢–µ—Å—Ç 5: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    config = ProjectConfig()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.lattice.dimensions = (15, 15, 15)
    config.expert.cache.enabled = True
    config.expert.cache.enable_performance_monitoring = False
    set_project_config(config)

    classifier = create_connection_classifier(lattice_dimensions=(15, 15, 15))

    print(f"   Classifier cache enabled: {classifier.enable_cache}")
    print(f"   Performance monitoring: {classifier.enable_performance_monitoring}")
    print(f"   Performance stats: {classifier.performance_stats}")

    # –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞")
    config = ProjectConfig()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config.lattice.dimensions = (10, 10, 10)
    config.expert.cache.enabled = True
    config.expert.cache.enable_performance_monitoring = True
    config.expert.cache.enable_detailed_stats = True
    set_project_config(config)

    classifier = create_connection_classifier(lattice_dimensions=(10, 10, 10))

    stats = classifier.get_classification_stats()
    print(f"   Cache performance stats: {stats.get('cache_performance', {})}")

    # –¢–µ—Å—Ç 7: –ö—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    print("\n7Ô∏è‚É£ –¢–µ—Å—Ç –∫—ç—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    config = ProjectConfig()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    config.lattice.dimensions = (20, 20, 20)
    config.expert.cache.enabled = True
    set_project_config(config)

    cache_config = config.get_connection_cache_config()
    print(f"   Cache config: {cache_config}")
    print(f"   Total cells: {config.total_cells}")
    print(f"   Should use cache: {config.should_use_connection_cache()}")

    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


def test_performance_comparison():
    """–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    print("\nüèÅ –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)

    # –ù–µ–±–æ–ª—å—à–∞—è —Ä–µ—à–µ—Ç–∫–∞ –¥–ª—è –±—ã—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    dimensions = (8, 8, 8)
    total_cells = 8 * 8 * 8

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # –¢–µ—Å—Ç —Å –∫—ç—à–µ–º
    print(f"\nüìä –¢–µ—Å—Ç —Å –∫—ç—à–µ–º –¥–ª—è —Ä–µ—à–µ—Ç–∫–∏ {dimensions} ({total_cells} –∫–ª–µ—Ç–æ–∫)")

    config = ProjectConfig()
    config.lattice.dimensions = dimensions
    config.expert.cache.enabled = True
    config.expert.cache.enable_performance_monitoring = True
    config.expert.cache.benchmark_small_lattices = True
    set_project_config(config)

    classifier_with_cache = create_connection_classifier(lattice_dimensions=dimensions)

    # –¢–µ—Å—Ç –±–µ–∑ –∫—ç—à–∞
    print(f"\nüìä –¢–µ—Å—Ç –±–µ–∑ –∫—ç—à–∞ –¥–ª—è —Ä–µ—à–µ—Ç–∫–∏ {dimensions} ({total_cells} –∫–ª–µ—Ç–æ–∫)")

    config.expert.cache.enabled = False
    set_project_config(config)

    classifier_without_cache = create_connection_classifier(
        lattice_dimensions=dimensions
    )

    print(f"   Classifier with cache: {classifier_with_cache.enable_cache}")
    print(f"   Classifier without cache: {classifier_without_cache.enable_cache}")

    # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫
    large_dimensions = (20, 20, 20)
    large_total_cells = 20 * 20 * 20

    print(
        f"\nüìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫ {large_dimensions} ({large_total_cells} –∫–ª–µ—Ç–æ–∫)"
    )

    config.lattice.dimensions = large_dimensions
    config.expert.cache.enabled = True
    set_project_config(config)

    should_use_cache = config.should_use_connection_cache()
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à: {should_use_cache}")

    cache_config = config.get_connection_cache_config()
    print(f"   Cache enabled: {cache_config['enabled']}")
    print(f"   Performance monitoring: {cache_config['enable_performance_monitoring']}")

    print("\n‚úÖ –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    test_cache_settings()
    test_performance_comparison()
