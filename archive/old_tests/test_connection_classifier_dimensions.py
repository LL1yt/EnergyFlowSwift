#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π –≤ connection_classifier
"""

import torch
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from new_rebuild.core.moe.connection_classifier import UnifiedConnectionClassifier
from new_rebuild.core.moe.connection_types import ConnectionCategory


def test_dimension_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π –≤ connection_classifier\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    lattice_dims = (5, 5, 5)
    classifier = UnifiedConnectionClassifier(lattice_dims)
    state_size = 32
    
    print("‚úÖ –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π")
    # cell_state: [32], neighbor_states: [5, 32]
    cell_idx = 12
    neighbor_indices = [7, 11, 13, 17, 37]
    cell_state = torch.randn(state_size)
    neighbor_states = torch.randn(5, state_size)
    
    try:
        result = classifier.classify_connections(
            cell_idx, neighbor_indices, cell_state, neighbor_states
        )
        print(f"   cell_state: {cell_state.shape}")
        print(f"   neighbor_states: {neighbor_states.shape}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(len(conns) for conns in result.values())} —Å–≤—è–∑–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ")
        print("   ‚úì –£—Å–ø–µ—à–Ω–æ!\n")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}\n")
    
    print("‚úÖ –¢–µ—Å—Ç 2: cell_state —Å batch dimension")
    # cell_state: [1, 32], neighbor_states: [5, 32]
    cell_state = torch.randn(1, state_size)
    neighbor_states = torch.randn(5, state_size)
    
    try:
        result = classifier.classify_connections(
            cell_idx, neighbor_indices, cell_state, neighbor_states
        )
        print(f"   cell_state: {cell_state.shape}")
        print(f"   neighbor_states: {neighbor_states.shape}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(len(conns) for conns in result.values())} —Å–≤—è–∑–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ")
        print("   ‚úì –£—Å–ø–µ—à–Ω–æ!\n")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}\n")
    
    print("‚úÖ –¢–µ—Å—Ç 3: –û–¥–∏–Ω —Å–æ—Å–µ–¥")
    # cell_state: [32], neighbor_states: [32]
    neighbor_indices = [13]
    cell_state = torch.randn(state_size)
    neighbor_states = torch.randn(state_size)
    
    try:
        result = classifier.classify_connections(
            cell_idx, neighbor_indices, cell_state, neighbor_states
        )
        print(f"   cell_state: {cell_state.shape}")
        print(f"   neighbor_states: {neighbor_states.shape}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(len(conns) for conns in result.values())} —Å–≤—è–∑–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ")
        print("   ‚úì –£—Å–ø–µ—à–Ω–æ!\n")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}\n")
    
    print("‚úÖ –¢–µ—Å—Ç 4: neighbor_states —Å –ª–∏—à–Ω–∏–º batch dimension")
    # cell_state: [32], neighbor_states: [1, 5, 32]
    neighbor_indices = [7, 11, 13, 17, 37]
    cell_state = torch.randn(state_size)
    neighbor_states = torch.randn(1, 5, state_size)
    
    try:
        result = classifier.classify_connections(
            cell_idx, neighbor_indices, cell_state, neighbor_states
        )
        print(f"   cell_state: {cell_state.shape}")
        print(f"   neighbor_states: {neighbor_states.shape}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(len(conns) for conns in result.values())} —Å–≤—è–∑–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ")
        print("   ‚úì –£—Å–ø–µ—à–Ω–æ!\n")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}\n")
    
    print("‚úÖ –¢–µ—Å—Ç 5: –ü—É—Å—Ç—ã–µ —Å–æ—Å–µ–¥–∏")
    # cell_state: [32], neighbor_states: [0, 32]
    neighbor_indices = []
    cell_state = torch.randn(state_size)
    neighbor_states = torch.empty(0, state_size)
    
    try:
        result = classifier.classify_connections(
            cell_idx, neighbor_indices, cell_state, neighbor_states
        )
        print(f"   cell_state: {cell_state.shape}")
        print(f"   neighbor_states: {neighbor_states.shape}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(len(conns) for conns in result.values())} —Å–≤—è–∑–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ")
        print("   ‚úì –£—Å–ø–µ—à–Ω–æ!\n")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}\n")
    
    print("‚úÖ –¢–µ—Å—Ç 6: Batch –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º batch –≤–µ—Ä—Å–∏—é –Ω–∞–ø—Ä—è–º—É—é
    batch_size = 3
    max_neighbors = 4
    total_cells = 125  # 5*5*5
    
    cell_indices = torch.tensor([10, 20, 30])
    neighbor_indices = torch.tensor([
        [5, 15, 25, 35],
        [15, 25, 35, 45],
        [25, 35, 45, -1],  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç padding
    ])
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫
    all_states = torch.randn(total_cells, state_size)
    
    try:
        batch_result = classifier.classify_connections_batch(
            cell_indices, neighbor_indices, all_states
        )
        print(f"   cell_indices: {cell_indices.shape}")
        print(f"   neighbor_indices: {neighbor_indices.shape}")
        print(f"   all_states: {all_states.shape}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å–æ–∫:")
        for key, mask in batch_result.items():
            print(f"     {key}: {mask.shape}, –∞–∫—Ç–∏–≤–Ω—ã—Ö: {mask.sum().item()}")
        print("   ‚úì –£—Å–ø–µ—à–Ω–æ!\n")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}\n")


def test_error_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤\n")
    
    lattice_dims = (5, 5, 5)
    classifier = UnifiedConnectionClassifier(lattice_dims)
    state_size = 32
    
    print("‚ùå –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ 1: –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã state_size")
    cell_idx = 12
    neighbor_indices = [7, 11, 13]
    cell_state = torch.randn(32)  # state_size = 32
    neighbor_states = torch.randn(3, 64)  # state_size = 64 (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)
    
    try:
        result = classifier.classify_connections(
            cell_idx, neighbor_indices, cell_state, neighbor_states
        )
        print("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n")
    except ValueError as e:
        print(f"   ‚úì –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}\n")
    except Exception as e:
        print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n")
    
    print("‚ùå –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ 2: –°–∫–∞–ª—è—Ä–Ω—ã–π cell_state")
    cell_state = torch.tensor(1.0)  # —Å–∫–∞–ª—è—Ä
    neighbor_states = torch.randn(3, 32)
    
    try:
        result = classifier.classify_connections(
            cell_idx, neighbor_indices, cell_state, neighbor_states
        )
        print("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!\n")
    except ValueError as e:
        print(f"   ‚úì –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}\n")
    except Exception as e:
        print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n")


if __name__ == "__main__":
    print("="*60)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π –≤ UnifiedConnectionClassifier")
    print("="*60)
    
    test_dimension_handling()
    test_error_cases()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")