#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è LLM —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è embedding_loader.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ó–∞–≥—Ä—É–∑–∫—É –∏ —Ä–∞–±–æ—Ç—É —Å LLM –º–æ–¥–µ–ª—è–º–∏
- Knowledge Distillation pipeline
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–∏–Ω–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ LLM —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import sys
import os
import torch
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_llm_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç LLM —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    print("üß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è LLM —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    
    try:
        from data.embedding_loader import EmbeddingLoader, SUPPORTED_LLM_MODELS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        print(f"   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏: {list(SUPPORTED_LLM_MODELS.keys())}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        loader = EmbeddingLoader()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
        texts = [
            "Artificial intelligence is transforming the world",
            "Machine learning models are becoming sophisticated"
        ]
        
        # –ü—Ä–æ–±—É–µ–º —Å –ª–µ–≥–∫–æ–π –º–æ–¥–µ–ª—å—é (–µ—Å–ª–∏ transformers –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            embeddings = loader.load_from_llm(
                texts=texts,
                model_key="distilbert",
                pooling_strategy="mean"
            )
            print(f"   [OK] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —ç–º–±–µ–¥–∏–Ω–≥–∏: {embeddings.shape}")
            print(f"   [OK] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {loader.stats}")
            
        except ImportError:
            print("   [WARNING] transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ API")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            print("   [OK] API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("[OK] –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"[ERROR] –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        traceback.print_exc()
        return False

def test_knowledge_distillation():
    """–¢–µ—Å—Ç Knowledge Distillation pipeline."""
    print("\nüß™ –¢–µ—Å—Ç 2: Knowledge Distillation Pipeline")
    
    try:
        from data.embedding_loader import EmbeddingLoader
        
        loader = EmbeddingLoader()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—Ä–ø—É—Å
        training_texts = [
            "The future of AI is bright",
            "Deep learning revolutionizes computing",
            "Neural networks learn complex patterns",
            "Natural language processing advances rapidly"
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
        try:
            dataset = loader.create_knowledge_distillation_dataset(
                texts=training_texts,
                teacher_model="distilbert",
                save_path=None  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            )
            
            print(f"   [OK] –î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω: {dataset['num_samples']} –æ–±—Ä–∞–∑—Ü–æ–≤")
            print(f"   [OK] –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {dataset['embedding_dim']}")
            print(f"   [OK] Teacher –º–æ–¥–µ–ª—å: {dataset['teacher_model']}")
            
        except ImportError:
            print("   [WARNING] transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º API")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            assert hasattr(loader, 'create_knowledge_distillation_dataset')
            print("   [OK] KD API –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("[OK] –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"[ERROR] –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        traceback.print_exc()
        return False

def test_llm_models_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö."""
    print("\nüß™ –¢–µ—Å—Ç 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LLM –º–æ–¥–µ–ª—è—Ö")
    
    try:
        from data.embedding_loader import EmbeddingLoader, SUPPORTED_LLM_MODELS
        
        loader = EmbeddingLoader()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        models = loader.list_supported_llm_models()
        print(f"   [OK] –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: {len(models)} –º–æ–¥–µ–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        assert set(models) == set(SUPPORTED_LLM_MODELS.keys())
        print("   [OK] –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏)
        print("   ‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for model in models[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"     - {model}")
        
        print("[OK] –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"[ERROR] –¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        traceback.print_exc()
        return False

def test_caching():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è LLM —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    print("\nüß™ –¢–µ—Å—Ç 4: LLM –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    try:
        from data.embedding_loader import EmbeddingLoader
        
        loader = EmbeddingLoader()
        texts = ["Test caching functionality"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞
        cache_key = loader._create_llm_cache_key(texts, "distilbert", "mean")
        print(f"   [OK] –ö–ª—é—á –∫—ç—à–∞ —Å–æ–∑–¥–∞–Ω: {cache_key[:8]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω—ã–π
        cache_key2 = loader._create_llm_cache_key(texts, "distilbert", "mean")
        assert cache_key == cache_key2
        print("   [OK] –ö–ª—é—á –∫—ç—à–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω—ã–π")
        
        print("[OK] –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"[ERROR] –¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        traceback.print_exc()
        return False

def test_integration_readiness():
    """–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Phase 3."""
    print("\nüß™ –¢–µ—Å—Ç 5: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ Phase 3")
    
    try:
        from data.embedding_loader import (
            KNOWLEDGE_DISTILLATION_READY,
            SUPPORTED_TEACHER_MODELS,
            PHASE_3_INTEGRATION_READY
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        assert KNOWLEDGE_DISTILLATION_READY == True
        print("   [OK] Knowledge Distillation –≥–æ—Ç–æ–≤")
        
        assert PHASE_3_INTEGRATION_READY == True
        print("   [OK] Phase 3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
        
        assert len(SUPPORTED_TEACHER_MODELS) >= 8
        print(f"   [OK] –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è {len(SUPPORTED_TEACHER_MODELS)} teacher –º–æ–¥–µ–ª–µ–π")
        
        print("[OK] –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"[ERROR] –¢–µ—Å—Ç 5 –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        traceback.print_exc()
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("[START] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ LLM —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ embedding_loader\n")
    
    tests = [
        test_llm_basic,
        test_knowledge_distillation,
        test_llm_models_info,
        test_caching,
        test_integration_readiness
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print(f"\n[DATA] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: {passed}/{total} –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("[SUCCESS] –í–°–ï –¢–ï–°–¢–´ LLM –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n[START] –ì–û–¢–û–í–ù–û–°–¢–¨ –ö KNOWLEDGE DISTILLATION: [OK]")
        print("[START] –ì–û–¢–û–í–ù–û–°–¢–¨ –ö PHASE 3: [OK]")
    else:
        print("[WARNING] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –Ω–æ –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 