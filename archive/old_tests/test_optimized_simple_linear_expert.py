#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ SimpleLinearExpert
=========================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å–µ–¥–µ–π
2. –†–∞–±–æ—Ç—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ—Å–µ–¥–µ–π
3. Attention-based –∞–≥—Ä–µ–≥–∞—Ü–∏—é
4. –ù–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
"""

import torch
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ new_rebuild
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "new_rebuild"))

from new_rebuild.core.moe import OptimizedSimpleLinearExpert, SimpleLinearExpert
from new_rebuild.config import get_project_config


def test_fixed_parameters():
    """–¢–µ—Å—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É...")

    state_size = 32
    batch_size = 4

    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç—ã
    expert = OptimizedSimpleLinearExpert(state_size)

    # –°—á–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    total_params = sum(p.numel() for p in expert.parameters())
    print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ—Å–µ–¥–µ–π
    neighbor_counts = [0, 1, 5, 10, 26, 50, 100]

    for num_neighbors in neighbor_counts:
        current_state = torch.randn(batch_size, state_size)
        neighbor_states = torch.randn(batch_size, num_neighbors, state_size)

        # Forward pass
        output = expert(current_state, neighbor_states)

        print(f"   ‚úÖ {num_neighbors} —Å–æ—Å–µ–¥–µ–π: output shape {output.shape}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ output –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
        assert output.shape == (
            batch_size,
            state_size,
        ), f"Wrong output shape for {num_neighbors} neighbors"

    print(f"   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã: {total_params}")


def test_attention_mechanism():
    """–¢–µ—Å—Ç attention-based –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º attention –º–µ—Ö–∞–Ω–∏–∑–º...")

    state_size = 32
    batch_size = 2
    num_neighbors = 5

    expert = OptimizedSimpleLinearExpert(state_size)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = torch.randn(batch_size, state_size)

    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å–µ–¥–µ–π —Å —Ä–∞–∑–Ω–æ–π –ø–æ—Ö–æ–∂–µ—Å—Ç—å—é –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    neighbor_states = torch.randn(batch_size, num_neighbors, state_size)

    # –î–µ–ª–∞–µ–º –æ–¥–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–º –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    neighbor_states[:, 0] = current_state + 0.1 * torch.randn_like(current_state)

    output = expert(current_state, neighbor_states)

    print(f"   ‚úÖ Attention –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: output shape {output.shape}")
    assert output.shape == (batch_size, state_size)


def test_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∫–æ–Ω—Ñ–∏–≥–æ–º...")

    config = get_project_config()
    local_config = config.get_local_expert_config()

    print(f"   –ö–æ–Ω—Ñ–∏–≥ –∏–∑ centralized_config:")
    print(f"   - neighbor_agg_hidden1: {local_config['neighbor_agg_hidden1']}")
    print(f"   - neighbor_agg_hidden2: {local_config['neighbor_agg_hidden2']}")
    print(f"   - processor_hidden: {local_config['processor_hidden']}")
    print(f"   - use_attention: {local_config['use_attention']}")
    print(f"   - alpha: {local_config['alpha']}, beta: {local_config['beta']}")

    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    expert = OptimizedSimpleLinearExpert(state_size=32)
    assert expert.use_attention == local_config["use_attention"]

    print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")


def test_backward_compatibility():
    """–¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SimpleLinearExpert —ç—Ç–æ alias –¥–ª—è OptimizedSimpleLinearExpert
    assert SimpleLinearExpert is OptimizedSimpleLinearExpert

    # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π alias
    expert = SimpleLinearExpert(state_size=32)
    assert isinstance(expert, OptimizedSimpleLinearExpert)

    print("   ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_parameter_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö...")

    expert = OptimizedSimpleLinearExpert(state_size=32)
    info = expert.get_parameter_info()

    print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö:")
    print(f"   - –í—Å–µ–≥–æ: {info['total_params']}")
    print(f"   - –¶–µ–ª—å: {info['target_params']}")
    print(f"   - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {info['efficiency']}")
    print(f"   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {info['architecture']}")
    print(f"   - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {info['breakdown']}")

    assert info["architecture"] == "fixed"
    assert info["adaptive_neighbors"] == True

    print("   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã OptimizedSimpleLinearExpert...")
    print()

    try:
        test_fixed_parameters()
        print()

        test_attention_mechanism()
        print()

        test_config_integration()
        print()

        test_backward_compatibility()
        print()

        test_parameter_info()
        print()

        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ OptimizedSimpleLinearExpert –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
