#!/usr/bin/env python3
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å mapping –ø–æ–ª–µ–π —Ä–µ—à–µ—Ç–∫–∏

–ù–∞–π–¥–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞:
- –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: lattice_width, lattice_height, lattice_depth
- –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞: xs, ys, zs + cube_dimensions
- config_initializer.py –∏—â–µ—Ç xs/ys/zs, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç, fallback –∫ cube_dimensions

–†–µ—à–µ–Ω–∏–µ:
1. –û–±–Ω–æ–≤–∏—Ç—å config_initializer.py –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
2. –î–æ–±–∞–≤–∏—Ç—å backward compatibility mapping
3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ progressive scaling –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(str(Path(__file__).parent))


def patch_config_initializer():
    """–ü–∞—Ç—á –¥–ª—è config_initializer.py —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è —Ä–µ—à–µ—Ç–∫–∏"""

    config_initializer_path = "smart_resume_training/core/config_initializer.py"

    print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ –∫ config_initializer.py...")

    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open(config_initializer_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –°—Ç–∞—Ä—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã
    old_log_method = """    def _log_config_details(self):
        \"\"\"Logs the key details of the generated configuration.\"\"\"
        if not self.config or not self.metadata:
            logger.warning("Config or metadata not available for logging.")
            return

        mode = self.metadata.get("mode", "unknown")
        scale = self.metadata.get("scale_factor", "unknown")
        logger.info(f"Initialized config in '{mode}' mode with scale factor {scale}.")

        lattice = self.config.get("lattice", {})
        if lattice:
            logger.info(
                f"Target Lattice: {lattice.get('xs')}x{lattice.get('ys')}x{lattice.get('zs')}"
            )

        gmlp = self.config.get("gmlp", {})
        if gmlp:
            logger.info(
                f"gMLP state size: {gmlp.get('state_size')}, hidden_dim: {gmlp.get('hidden_dim')}"
            )"""

    # –ù–æ–≤—ã–π –∫–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
    new_log_method = """    def _log_config_details(self):
        \"\"\"Logs the key details of the generated configuration.\"\"\"
        if not self.config or not self.metadata:
            logger.warning("Config or metadata not available for logging.")
            return

        mode = self.metadata.get("mode", "unknown")
        scale = self.metadata.get("scale_factor", "unknown")
        logger.info(f"Initialized config in '{mode}' mode with scale factor {scale}.")

        # === PHASE 4 FIX: Support both old and new lattice field names ===
        lattice = self.config.get("lattice", {})
        if lattice:
            # Try new field names first (Phase 4 integration)
            width = lattice.get('lattice_width') or lattice.get('xs')
            height = lattice.get('lattice_height') or lattice.get('ys') 
            depth = lattice.get('lattice_depth') or lattice.get('zs')
            
            # Fallback to cube_dimensions if available
            if not all([width, height, depth]):
                emergent = self.config.get("emergent_training", {})
                cube_dims = emergent.get("cube_dimensions", [])
                if len(cube_dims) >= 3:
                    width, height, depth = cube_dims[0], cube_dims[1], cube_dims[2]
                    logger.warning("Using fallback cube_dimensions - this may indicate a configuration issue")
            
            logger.info(f"Target Lattice: {width}x{height}x{depth}")
            
            # Log field source for debugging
            if lattice.get('lattice_width'):
                logger.info("Using Phase 4 lattice field names (lattice_width/height/depth)")
            elif lattice.get('xs'):
                logger.info("Using legacy lattice field names (xs/ys/zs)")
            else:
                logger.info("Using cube_dimensions fallback")

        gmlp = self.config.get("gmlp", {})
        if gmlp:
            logger.info(
                f"gMLP state size: {gmlp.get('state_size')}, hidden_dim: {gmlp.get('hidden_dim')}"
            )"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω
    if old_log_method.strip() not in content:
        print("‚ö†Ô∏è  –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—â—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")

        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—É—é —Å—Ç—Ä–æ–∫—É
        target_line = "f\"Target Lattice: {lattice.get('xs')}x{lattice.get('ys')}x{lattice.get('zs')}\""
        if target_line in content:
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            replacement_block = """# === PHASE 4 FIX: Support both old and new lattice field names ===
            # Try new field names first (Phase 4 integration)
            width = lattice.get('lattice_width') or lattice.get('xs')
            height = lattice.get('lattice_height') or lattice.get('ys') 
            depth = lattice.get('lattice_depth') or lattice.get('zs')
            
            # Fallback to cube_dimensions if available
            if not all([width, height, depth]):
                emergent = self.config.get("emergent_training", {})
                cube_dims = emergent.get("cube_dimensions", [])
                if len(cube_dims) >= 3:
                    width, height, depth = cube_dims[0], cube_dims[1], cube_dims[2]
                    logger.warning("Using fallback cube_dimensions - this may indicate a configuration issue")
            
            logger.info(f"Target Lattice: {width}x{height}x{depth}")
            
            # Log field source for debugging
            if lattice.get('lattice_width'):
                logger.info("Using Phase 4 lattice field names (lattice_width/height/depth)")
            elif lattice.get('xs'):
                logger.info("Using legacy lattice field names (xs/ys/zs)")
            else:
                logger.info("Using cube_dimensions fallback")"""

            content = content.replace(
                f"logger.info(\n                {target_line}\n            )",
                replacement_block,
            )
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã")
            return False
    else:
        # –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –º–µ—Ç–æ–¥–∞
        content = content.replace(old_log_method, new_log_method)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(config_initializer_path, "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ config_initializer.py")
    return True


def verify_progressive_scaling_mapping():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ progressive scaling –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –º–∞–ø–∏—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""

    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ mapping progressive scaling...")

    from training.automated_training.types import StageConfig
    from training.automated_training.stage_runner import TrainingStageRunner

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å progressive scaling
    stage_config = StageConfig(
        stage=2,
        dataset_limit=100,
        epochs=2,
        batch_size=16,
        description="Progressive Scaling Mapping Test",
        plasticity_profile="learning",
        clustering_enabled=True,
        activity_threshold=0.025,
        memory_optimizations=True,
        emergence_tracking=True,
        progressive_scaling=True,
    )

    # –°–æ–∑–¥–∞–µ–º runner —Å –Ω–µ–±–æ–ª—å—à–∏–º scale –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    runner = TrainingStageRunner(mode="development", scale=0.05, verbose=True)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    temp_config_path = runner._generate_temp_config(stage_config)

    if temp_config_path:
        import yaml

        with open(temp_config_path, "r", encoding="utf-8") as f:
            config_data = yaml.safe_load(f)

        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π —Ä–µ—à–µ—Ç–∫–∏ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
        lattice = config_data.get("lattice", {})
        print(f"   lattice_width: {lattice.get('lattice_width')}")
        print(f"   lattice_height: {lattice.get('lattice_height')}")
        print(f"   lattice_depth: {lattice.get('lattice_depth')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è
        print(f"   xs: {lattice.get('xs')}")
        print(f"   ys: {lattice.get('ys')}")
        print(f"   zs: {lattice.get('zs')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cube_dimensions
        emergent = config_data.get("emergent_training", {})
        cube_dims = emergent.get("cube_dimensions", [])
        print(f"   cube_dimensions: {cube_dims}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        expected_dims = runner._get_adaptive_dimensions(stage_config.stage)
        print(f"   Expected (progressive): {expected_dims}")

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
        new_fields_present = all(
            [
                lattice.get("lattice_width"),
                lattice.get("lattice_height"),
                lattice.get("lattice_depth"),
            ]
        )

        if new_fields_present:
            actual_dims = (
                lattice.get("lattice_width"),
                lattice.get("lattice_height"),
                lattice.get("lattice_depth"),
            )
            if actual_dims == expected_dims:
                print("‚úÖ Progressive scaling –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå Progressive scaling –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
                print(f"   Expected: {expected_dims}")
                print(f"   Actual: {actual_dims}")
        else:
            print("‚ùå –ù–æ–≤—ã–µ –ø–æ–ª—è —Ä–µ—à–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        import os

        os.remove(temp_config_path)
        return new_fields_present
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return False


def add_field_mapping_to_dynamic_config():
    """–î–æ–±–∞–≤–∏—Ç—å backward compatibility mapping –≤ DynamicConfigGenerator"""

    print("\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ backward compatibility mapping...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å mapping –≤ –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    from utils.config_manager.dynamic_config import DynamicConfigGenerator

    generator = DynamicConfigGenerator()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = generator.create_base_config_template()

    lattice_section = config.get("lattice", {})

    print("üìã –¢–µ–∫—É—â–∏–µ –ø–æ–ª—è —Ä–µ—à–µ—Ç–∫–∏ –≤ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    for key, value in lattice_section.items():
        print(f"   {key}: {value}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –ø–æ–ª—è
    has_new_fields = any(
        [
            "lattice_width" in lattice_section,
            "lattice_height" in lattice_section,
            "lattice_depth" in lattice_section,
        ]
    )

    has_old_fields = any(
        ["xs" in lattice_section, "ys" in lattice_section, "zs" in lattice_section]
    )

    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π:")
    print(
        f"   –ù–æ–≤—ã–µ –ø–æ–ª—è (lattice_width/height/depth): {'‚úÖ' if has_new_fields else '‚ùå'}"
    )
    print(f"   –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è (xs/ys/zs): {'‚úÖ' if has_old_fields else '‚ùå'}")

    return has_new_fields, has_old_fields


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–õ–Ø–ú–ò –†–ï–®–ï–¢–ö–ò")
    print("=" * 60)
    print("–¶–µ–ª—å: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ lattice_width vs xs/ys/zs")
    print()

    try:
        # 1. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –∫ config_initializer
        success_patch = patch_config_initializer()

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º progressive scaling mapping
        success_mapping = verify_progressive_scaling_mapping()

        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –≤ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        has_new, has_old = add_field_mapping_to_dynamic_config()

        print("\n" + "=" * 60)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print()

        print(
            f"‚úÖ –ü–∞—Ç—á config_initializer: {'–ü—Ä–∏–º–µ–Ω–µ–Ω' if success_patch else '–û—à–∏–±–∫–∞'}"
        )
        print(
            f"‚úÖ Progressive scaling mapping: {'–†–∞–±–æ—Ç–∞–µ—Ç' if success_mapping else '–¢—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}"
        )
        print(
            f"‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {'–ï—Å—Ç—å' if has_new else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}"
        )
        print(
            f"‚úÖ –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è –≤ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {'–ï—Å—Ç—å' if has_old else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}"
        )

        print("\nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")

        if success_patch and success_mapping:
            print("1. ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            print(
                "2. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: python test_phase4_full_training_cycle.py"
            )
            print("3. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏")
        else:
            if not success_patch:
                print("1. ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ config_initializer.py")
            if not success_mapping:
                print("2. ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ progressive scaling mapping")

        print("\nüí° –°–£–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –ë–´–õ–ê:")
        print("   - TrainingStageRunner –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç lattice_width/height/depth")
        print("   - config_initializer –∏—â–µ—Ç xs/ys/zs")
        print("   - Fallback –∫ cube_dimensions –¥–∞–µ—Ç 7√ó7√ó3 = smart_round(666*0.01)")
        print("   - –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞!")

        return success_patch and success_mapping

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –ò–°–ü–†–ê–í–õ–ï–ù–ò–ò: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
