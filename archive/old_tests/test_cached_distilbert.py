#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π DistilBERT –º–æ–¥–µ–ª–∏.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_cached_distilbert():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é DistilBERT –º–æ–¥–µ–ª—å."""
    
    try:
        print("üß™ Testing cached DistilBERT...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        local_path = os.path.join("models", "local_cache", "distilbert-base-uncased")
        
        if not os.path.exists(local_path):
            print(f"[ERROR] Local model not found at: {local_path}")
            return False
        
        print(f"[OK] Local model found at: {local_path}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à LLMHandler
        from data.embedding_loader.format_handlers import create_llm_handler
        
        print("[REFRESH] Creating LLM handler...")
        handler = create_llm_handler("distilbert")
        
        print(f"[INFO] Handler model_name: {handler.model_name}")
        print(f"[INFO] Handler model_key: {getattr(handler, 'model_key', 'NOT SET')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º _get_model_path
        model_path = handler._get_model_path()
        print(f"[FOLDER] Resolved model path: {model_path}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        print("[REFRESH] Testing embedding generation...")
        test_text = "This is a test sentence for DistilBERT."
        embedding = handler.generate_embeddings([test_text])
        
        print(f"[OK] Embedding generated successfully!")
        print(f"[DATA] Embedding shape: {embedding.shape}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        model_info = handler.get_model_info()
        print(f"[BRAIN] Model info: {model_info}")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    
    print("[TARGET] Testing Cached DistilBERT")
    print("=" * 40)
    
    success = test_cached_distilbert()
    
    if success:
        print("\n[SUCCESS] Test passed! Cached DistilBERT is working correctly.")
    else:
        print("\n[ERROR] Test failed! There's an issue with the cached model.")

if __name__ == "__main__":
    main() 