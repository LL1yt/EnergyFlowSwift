#!/usr/bin/env python3
"""
–£–ª—å—Ç—Ä–∞-–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ gMLP - –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?
"""


def analyze_parameter_breakdown():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≥–æ, –≥–¥–µ —Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""

    print("=== –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–î–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –í –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô gMLP ===")
    print()

    # –¢–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –ª–æ–≥–æ–≤
    state_size = 4
    neighbor_count = 6
    hidden_dim = 3  # –ú–ò–ù–ò–ú–£–ú
    external_input_size = 1  # –ú–ò–ù–ò–ú–£–ú

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä
    neighbor_input_size = neighbor_count * state_size  # 6 * 8 = 48
    total_input_size = (
        neighbor_input_size + state_size + external_input_size
    )  # 48 + 8 + 1 = 57

    print(f"–í–•–û–î–ù–´–ï –†–ê–ó–ú–ï–†–´:")
    print(f"  state_size: {state_size}")
    print(f"  neighbor_count: {neighbor_count}")
    print(f"  neighbor_input_size: {neighbor_input_size}")
    print(f"  external_input_size: {external_input_size}")
    print(f"  total_input_size: {total_input_size}")
    print()

    print("–ü–û–≠–¢–ê–ü–ù–´–ô –†–ê–°–ß–ï–¢ –ü–ê–†–ê–ú–ï–¢–†–û–í:")

    # 1. Input LayerNorm
    input_norm_params = total_input_size * 2  # weight + bias
    print(f"1. Input LayerNorm: {input_norm_params} params")
    print(f"   –§–æ—Ä–º—É–ª–∞: {total_input_size} * 2 = {input_norm_params}")

    # 2. Input Projection
    input_proj_params = total_input_size * hidden_dim + hidden_dim  # W + b
    print(f"2. Input Projection: {input_proj_params} params")
    print(
        f"   –§–æ—Ä–º—É–ª–∞: {total_input_size} * {hidden_dim} + {hidden_dim} = {input_proj_params}"
    )

    # 3. Output LayerNorm
    output_norm_params = hidden_dim * 2
    print(f"3. Output LayerNorm: {output_norm_params} params")
    print(f"   –§–æ—Ä–º—É–ª–∞: {hidden_dim} * 2 = {output_norm_params}")

    # 4. Output Projection
    output_proj_params = hidden_dim * state_size + state_size
    print(f"4. Output Projection: {output_proj_params} params")
    print(
        f"   –§–æ—Ä–º—É–ª–∞: {hidden_dim} * {state_size} + {state_size} = {output_proj_params}"
    )

    # 5. Residual connection (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    if total_input_size != state_size:
        residual_params = total_input_size * state_size + state_size
        print(f"5. Input Residual: {residual_params} params")
        print(
            f"   –§–æ—Ä–º—É–ª–∞: {total_input_size} * {state_size} + {state_size} = {residual_params}"
        )
    else:
        residual_params = 0
        print(f"5. Input Residual: {residual_params} params (–Ω–µ –Ω—É–∂–µ–Ω)")

    total_params = (
        input_norm_params
        + input_proj_params
        + output_norm_params
        + output_proj_params
        + residual_params
    )

    print()
    print(f"–ò–¢–û–ì–û: {total_params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"TARGET: 300 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"–ü–†–ï–í–´–®–ï–ù–ò–ï: {total_params - 300} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ({total_params/300:.1f}x)")
    print()

    # –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ "–ø–æ–∂–∏—Ä–∞—Ç–µ–ª—è" –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("–û–°–ù–û–í–ù–´–ï '–ü–û–ñ–ò–†–ê–¢–ï–õ–ò' –ü–ê–†–ê–ú–ï–¢–†–û–í:")
    components = [
        ("Input LayerNorm", input_norm_params),
        ("Input Projection", input_proj_params),
        ("Output LayerNorm", output_norm_params),
        ("Output Projection", output_proj_params),
        ("Input Residual", residual_params),
    ]

    for name, params in sorted(components, key=lambda x: x[1], reverse=True):
        percent = params / total_params * 100
        print(f"  {name}: {params} params ({percent:.1f}%)")

    return total_params


def find_ultra_minimal_config():
    """–ò—â–µ–º —É–ª—å—Ç—Ä–∞-–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""

    print()
    print("=== –ü–û–ò–°–ö –£–õ–¨–¢–†–ê-–ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
    print()

    target = 300
    best_configs = []

    # –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ —Ä–∞–¥–∏–∫–∞–ª—å–Ω—ã–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è
    for state_size in [4, 6, 8]:  # –£–º–µ–Ω—å—à–∞–µ–º state_size
        for neighbor_count in [4, 6]:  # –ü—Ä–æ–±—É–µ–º 4-—Å–≤—è–∑–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ 6
            for hidden_dim in [1, 2, 3]:
                for external_input_size in [0, 1]:  # –î–∞–∂–µ –±–µ–∑ external input

                    neighbor_input_size = neighbor_count * state_size
                    total_input_size = (
                        neighbor_input_size + state_size + external_input_size
                    )

                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: —Ç–æ–ª—å–∫–æ input_proj + output_proj
                    params = 0
                    params += total_input_size * 2  # input norm
                    params += total_input_size * hidden_dim + hidden_dim  # input proj
                    params += hidden_dim * 2  # output norm
                    params += hidden_dim * state_size + state_size  # output proj

                    # Residual –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
                    if total_input_size != state_size:
                        params += total_input_size * state_size + state_size

                    diff = abs(params - target)

                    config = {
                        "state_size": state_size,
                        "neighbor_count": neighbor_count,
                        "hidden_dim": hidden_dim,
                        "external_input_size": external_input_size,
                        "total_input_size": total_input_size,
                        "params": params,
                        "diff": diff,
                        "ratio": params / target,
                    }

                    best_configs.append(config)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ target
    best_configs.sort(key=lambda x: x["diff"])

    print("–¢–û–ü-5 –ë–õ–ò–ñ–ê–ô–®–ò–• –ö TARGET –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô:")
    for i, config in enumerate(best_configs[:5]):
        print(
            f"{i+1}. {config['params']} params (target: {target}, diff: {config['diff']:+d})"
        )
        print(
            f"   state_size={config['state_size']}, neighbor_count={config['neighbor_count']}"
        )
        print(
            f"   hidden_dim={config['hidden_dim']}, external_input={config['external_input_size']}"
        )
        print(f"   ratio: {config['ratio']:.2f}x")
        print()

    return best_configs[0]


def suggest_architecture_changes():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è target"""

    print("=== –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ê–†–•–ò–¢–ï–ö–¢–£–†–ï ===")
    print()

    print("üéØ –ü–†–û–ë–õ–ï–ú–ê: –î–∞–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª–∞—è")
    print()

    print("üí° –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
    print()

    print("1. üìê –£–ú–ï–ù–¨–®–ò–¢–¨ –ë–ê–ó–û–í–´–ï –†–ê–ó–ú–ï–†–´:")
    print("   ‚Ä¢ state_size: 8 ‚Üí 4-6 (—É–º–µ–Ω—å—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–µ—Ç–∫–∏)")
    print("   ‚Ä¢ neighbor_count: 6 ‚Üí 4 (4-—Å–≤—è–∑–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ 6-—Å–≤—è–∑–Ω–æ—Å—Ç–∏)")
    print("   ‚Ä¢ external_input_size: 1 ‚Üí 0 (—É–±—Ä–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤—Ö–æ–¥ —Å–æ–≤—Å–µ–º)")
    print()

    print("2. üîß –£–ü–†–û–°–¢–ò–¢–¨ –ê–†–•–ò–¢–ï–ö–¢–£–†–£:")
    print("   ‚Ä¢ –£–±—Ä–∞—Ç—å LayerNorm —Å–ª–æ–∏ (—ç–∫–æ–Ω–æ–º–∏—è ~100-200 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
    print("   ‚Ä¢ –£–±—Ä–∞—Ç—å bias –≤ Linear —Å–ª–æ—è—Ö")
    print("   ‚Ä¢ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å input_projection + output_projection –≤ –æ–¥–∏–Ω —Å–ª–æ–π")
    print()

    print("3. üß† –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:")
    print("   ‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è MLP –±–µ–∑ gating –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤")
    print("   ‚Ä¢ –ü—Ä—è–º–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ neighbor ‚Üí own_state")
    print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö")
    print()

    print("4. üîÑ –ü–ï–†–ï–û–°–ú–´–°–õ–ò–¢–¨ –ü–û–î–•–û–î:")
    print("   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, 300 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è gMLP?")
    print("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å target 500-800 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–∫ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å?")
    print("   ‚Ä¢ –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–æ–≤—Å–µ–º –¥—Ä—É–≥—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É (–Ω–µ gMLP)")


def main():
    total_params = analyze_parameter_breakdown()
    best_config = find_ultra_minimal_config()
    suggest_architecture_changes()

    print()
    print("=== –í–´–í–û–î–´ ===")
    print(f"‚Ä¢ –¢–µ–∫—É—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è gMLP: {total_params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"‚Ä¢ –õ—É—á—à–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {best_config['params']} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"‚Ä¢ –î–ª—è target=300 –Ω—É–∂–Ω—ã —Ä–∞–¥–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print(f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å target –∏–ª–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É")


if __name__ == "__main__":
    main()
