#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –§–ê–ó–´ 4: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –§–∞–∑—ã 4:
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ StageConfig
- –ü—Ä–æ—Ñ–∏–ª–∏ –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –≤ ProgressiveConfigManager
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–π –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ TrainingStageRunner

–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import sys
import tempfile
import yaml
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(str(Path(__file__).parent))

from training.automated_training.types import StageConfig, StageResult
from training.automated_training.progressive_config import ProgressiveConfigManager
from training.automated_training.stage_runner import TrainingStageRunner
from utils.config_manager.dynamic_config import DynamicConfigGenerator


def test_phase4_types():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ StageConfig"""
    print("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ StageConfig...")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –§–∞–∑—ã 4
    config = StageConfig(
        stage=3,
        dataset_limit=1000,
        epochs=5,
        batch_size=32,
        description="Test Phase 4 Integration",
        # === PHASE 4 FIELDS ===
        plasticity_profile="learning",
        clustering_enabled=True,
        activity_threshold=0.03,
        memory_optimizations=True,
        emergence_tracking=True,
        sparse_connection_ratio=0.2,
    )

    assert config.plasticity_profile == "learning"
    assert config.clustering_enabled == True
    assert config.activity_threshold == 0.03
    assert config.memory_optimizations == True
    assert config.emergence_tracking == True
    assert config.sparse_connection_ratio == 0.2

    print("‚úÖ StageConfig —Ä–∞—Å—à–∏—Ä–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_progressive_config_plasticity():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –≤ ProgressiveConfigManager"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏...")

    config_manager = ProgressiveConfigManager()

    # –¢–µ—Å—Ç —Å—Ç–∞–¥–∏–∏ 1 (discovery)
    stage1_config = config_manager.get_stage_config(1)
    assert stage1_config.plasticity_profile == "discovery"
    assert stage1_config.clustering_enabled == False
    assert stage1_config.activity_threshold == 0.01
    assert stage1_config.memory_optimizations == True

    # –¢–µ—Å—Ç —Å—Ç–∞–¥–∏–∏ 3 (learning + clustering)
    stage3_config = config_manager.get_stage_config(3)
    assert stage3_config.plasticity_profile == "learning"
    assert stage3_config.clustering_enabled == True
    assert stage3_config.activity_threshold == 0.03

    # –¢–µ—Å—Ç —Å—Ç–∞–¥–∏–∏ 5 (consolidation + advanced)
    stage5_config = config_manager.get_stage_config(5)
    assert stage5_config.plasticity_profile == "consolidation"
    assert stage5_config.progressive_scaling == True
    assert stage5_config.decoder_monitoring == True
    assert stage5_config.sparse_connection_ratio == 0.3

    print("‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_dynamic_config_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–π –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")

    generator = DynamicConfigGenerator()

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    stage_context = {
        "plasticity_profile": "learning",
        "clustering_enabled": True,
        "activity_threshold": 0.03,
        "memory_optimizations": True,
        "emergence_tracking": True,
        "sparse_connection_ratio": 0.2,
    }

    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    plasticity_config = generator.generate_plasticity_section(stage_context)
    assert plasticity_config["enable_plasticity"] == True
    assert plasticity_config["plasticity_rule"] == "combined"
    assert plasticity_config["activity_threshold"] == 0.03
    assert plasticity_config["profile"] == "learning"
    assert "functional_clustering" in plasticity_config
    assert "emergence_detection" in plasticity_config

    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_config = generator.generate_optimization_section(stage_context)
    assert "mixed_precision" in optimization_config
    assert "gradient_checkpointing" in optimization_config
    assert "sparse_connections" in optimization_config
    assert optimization_config["sparse_connections"]["sparsity_ratio"] == 0.2

    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_stage_runner_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ TrainingStageRunner"""
    print("üèÉ‚Äç‚ôÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TrainingStageRunner...")

    runner = TrainingStageRunner(mode="development", verbose=True)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∞–¥–∏–∏
    stage_config = StageConfig(
        stage=2,
        dataset_limit=100,  # –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        epochs=1,
        batch_size=16,
        description="Phase 4 Integration Test",
        plasticity_profile="learning",
        clustering_enabled=False,
        activity_threshold=0.02,
        memory_optimizations=True,
        emergence_tracking=True,
    )

    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    temp_config_path = runner._generate_temp_config(stage_config)
    assert temp_config_path is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    with open(temp_config_path, "r", encoding="utf-8") as f:
        config_data = yaml.safe_load(f)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–π –§–∞–∑—ã 4
    assert "plasticity" in config_data
    assert config_data["plasticity"]["enable_plasticity"] == True
    assert config_data["plasticity"]["profile"] == "learning"

    assert "optimization" in config_data
    assert config_data["optimization"]["mixed_precision"]["enable"] == True

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    import os

    os.remove(temp_config_path)

    print("‚úÖ TrainingStageRunner –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_adaptive_scaling():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–µ—à–µ—Ç–∫–∏"""
    print("üìê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è...")

    runner = TrainingStageRunner()

    # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
    dims_stage1 = runner._get_adaptive_dimensions(1)
    assert dims_stage1 == (16, 16, 16)

    dims_stage3 = runner._get_adaptive_dimensions(3)
    assert dims_stage3 == (24, 24, 24)

    dims_stage5 = runner._get_adaptive_dimensions(5)
    assert dims_stage5 == (40, 40, 30)

    # –¢–µ—Å—Ç –±–æ–ª—å—à–æ–π —Å—Ç–∞–¥–∏–∏ (–¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    dims_large = runner._get_adaptive_dimensions(100)
    assert dims_large == (40, 40, 30)  # Default to stage 5

    print("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –§–ê–ó–´ 4: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...")
    print("=" * 60)

    try:
        test_phase4_types()
        test_progressive_config_plasticity()
        test_dynamic_config_generation()
        test_stage_runner_integration()
        test_adaptive_scaling()

        print("=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –§–ê–ó–´ 4 –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print()
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É:")
        print("   - StageConfig —Ä–∞—Å—à–∏—Ä–µ–Ω")
        print("   - –ü—Ä–æ—Ñ–∏–ª–∏ –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   - TrainingStageRunner –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        print("   - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
        print()
        print("üöÄ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ –º–∞–ª—ã—Ö —Ä–µ—à–µ—Ç–∫–∞—Ö!")

        return True

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
