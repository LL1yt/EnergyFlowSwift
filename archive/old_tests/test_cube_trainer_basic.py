"""
–¢–µ—Å—Ç—ã –¥–ª—è CubeTrainer - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è 3D Cubic Core

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CubeTrainer
2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
4. –ë–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

–ê–≤—Ç–æ—Ä: 3D Cellular Neural Network Project  
–í–µ—Ä—Å–∏—è: Phase 3.1 - Stage 1.1
–î–∞—Ç–∞: 6 –∏—é–Ω—è 2025
"""

import sys
import torch
import numpy as np
import traceback
from pathlib import Path

def test_cube_trainer_import():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CubeTrainer"""
    print("üß™ –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç CubeTrainer")
    
    try:
        from training.embedding_trainer import CubeTrainer, TrainingConfig, EmbeddingMetrics
        print("[OK] CubeTrainer, TrainingConfig, EmbeddingMetrics —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except ImportError as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_training_config():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ TrainingConfig"""
    print("\nüß™ –¢–µ—Å—Ç 2: TrainingConfig")
    
    try:
        from training.embedding_trainer import TrainingConfig
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        config = TrainingConfig()
        
        print(f"[OK] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∞")
        print(f"   Mode: {config.mode}")
        print(f"   Device: {config.device}")
        print(f"   Lattice size: {config.lattice_size}")
        print(f"   Embedding dim: {config.embedding_dim}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        assert config.mode == "autoencoder"
        assert config.device == "cpu"
        assert config.lattice_size == [8, 8, 8]
        assert config.embedding_dim == 768
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        custom_config = TrainingConfig(
            mode="dialogue",
            device="cpu",
            lattice_size=[6, 6, 6],
            learning_rate=0.002
        )
        
        print(f"[OK] –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        print(f"   Mode: {custom_config.mode}")
        print(f"   Lattice size: {custom_config.lattice_size}")
        print(f"   Learning rate: {custom_config.learning_rate}")
        
        assert custom_config.mode == "dialogue"
        assert custom_config.lattice_size == [6, 6, 6]
        assert custom_config.learning_rate == 0.002
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ TrainingConfig: {e}")
        return False

def test_embedding_metrics():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ EmbeddingMetrics"""
    print("\nüß™ –¢–µ—Å—Ç 3: EmbeddingMetrics")
    
    try:
        from training.embedding_trainer import EmbeddingMetrics
        
        metrics = EmbeddingMetrics(device="cpu")
        print("[OK] EmbeddingMetrics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
        batch_size = 2
        embedding_dim = 768
        
        # –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —ç–º–±–µ–¥–∏–Ω–≥–∏ (–¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å similarity = 1.0)
        identical_emb = torch.randn(batch_size, embedding_dim)
        
        similarity = metrics.calculate_cosine_similarity(identical_emb, identical_emb)
        mse_loss = metrics.calculate_mse_loss(identical_emb, identical_emb)
        
        print(f"[OK] –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —ç–º–±–µ–¥–∏–Ω–≥–æ–≤:")
        print(f"   Cosine similarity: {similarity:.4f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è ~1.0)")
        print(f"   MSE loss: {mse_loss:.6f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è ~0.0)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        assert abs(similarity - 1.0) < 0.001, f"Similarity –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ~1.0, –ø–æ–ª—É—á–µ–Ω {similarity}"
        assert mse_loss < 0.001, f"MSE loss –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ~0.0, –ø–æ–ª—É—á–µ–Ω {mse_loss}"
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∑–Ω—ã–µ —ç–º–±–µ–¥–∏–Ω–≥–∏
        emb1 = torch.randn(batch_size, embedding_dim)
        emb2 = torch.randn(batch_size, embedding_dim)
        
        batch_metrics = metrics.compute_batch_metrics(emb1, emb2)
        
        print(f"[OK] –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–±–µ–¥–∏–Ω–≥–æ–≤:")
        for metric_name, value in batch_metrics.items():
            print(f"   {metric_name}: {value:.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
        expected_metrics = ['cosine_similarity', 'mse_loss', 'semantic_preservation']
        for metric in expected_metrics:
            assert metric in batch_metrics, f"–ú–µ—Ç—Ä–∏–∫–∞ {metric} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ EmbeddingMetrics: {e}")
        print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

def test_cube_trainer_initialization():
    """–¢–µ—Å—Ç 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CubeTrainer"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CubeTrainer")
    
    try:
        from training.embedding_trainer import CubeTrainer, TrainingConfig
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        trainer = CubeTrainer()
        
        print("[OK] CubeTrainer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print(f"   Mode: {trainer.config.mode}")
        print(f"   Device: {trainer.config.device}")
        print(f"   Lattice size: {trainer.config.lattice_size}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        assert trainer.config.mode == "autoencoder"
        assert trainer.config.device == "cpu"
        assert trainer.current_epoch == 0
        assert isinstance(trainer.training_history, list)
        assert len(trainer.training_history) == 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        custom_config = TrainingConfig(
            mode="dialogue",
            lattice_size=[4, 4, 4],
            learning_rate=0.002
        )
        
        custom_trainer = CubeTrainer(config=custom_config)
        
        print("[OK] CubeTrainer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        print(f"   Mode: {custom_trainer.config.mode}")
        print(f"   Lattice size: {custom_trainer.config.lattice_size}")
        print(f"   Learning rate: {custom_trainer.config.learning_rate}")
        
        assert custom_trainer.config.mode == "dialogue"
        assert custom_trainer.config.lattice_size == [4, 4, 4]
        assert custom_trainer.config.learning_rate == 0.002
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CubeTrainer: {e}")
        print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

def test_cube_trainer_config_loading():
    """–¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ dict"""
    print("\nüß™ –¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CubeTrainer")
    
    try:
        from training.embedding_trainer import CubeTrainer
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        config_dict = {
            'mode': 'dialogue',
            'device': 'cpu',
            'lattice_size': [6, 6, 6],
            'embedding_dim': 768,
            'learning_rate': 0.0015,
            'epochs': 30,
            'target_similarity': 0.92
        }
        
        trainer = CubeTrainer(config=config_dict)
        
        print("[OK] CubeTrainer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ —Å–ª–æ–≤–∞—Ä—è")
        print(f"   Mode: {trainer.config.mode}")
        print(f"   Lattice size: {trainer.config.lattice_size}")
        print(f"   Learning rate: {trainer.config.learning_rate}")
        print(f"   Target similarity: {trainer.config.target_similarity}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        assert trainer.config.mode == 'dialogue'
        assert trainer.config.lattice_size == [6, 6, 6]
        assert trainer.config.learning_rate == 0.0015
        assert trainer.config.epochs == 30
        assert trainer.config.target_similarity == 0.92
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

def test_cube_trainer_info():
    """–¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CubeTrainer"""
    print("\nüß™ –¢–µ—Å—Ç 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CubeTrainer")
    
    try:
        from training.embedding_trainer import CubeTrainer
        
        trainer = CubeTrainer(mode="dialogue", device="cpu")
        info = trainer.get_info()
        
        print("[OK] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CubeTrainer –ø–æ–ª—É—á–µ–Ω–∞:")
        for key, value in info.items():
            print(f"   {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = [
            'mode', 'device', 'lattice_size', 'embedding_dim',
            'current_epoch', 'optimizer', 'loss_function',
            'target_similarity', 'components_initialized'
        ]
        
        for field in required_fields:
            assert field in info, f"–ü–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ info"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        assert info['mode'] == 'dialogue'
        assert info['device'] == 'cpu'
        assert info['current_epoch'] == 0
        assert info['components_initialized'] == False  # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

def test_cube_trainer_mode_switching():
    """–¢–µ—Å—Ç 7: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ CubeTrainer"""
    print("\nüß™ –¢–µ—Å—Ç 7: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤")
    
    try:
        from training.embedding_trainer import CubeTrainer
        
        trainer = CubeTrainer(mode="autoencoder")
        
        print(f"[OK] –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: {trainer.config.mode}")
        assert trainer.config.mode == "autoencoder"
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ dialogue
        trainer.set_mode("dialogue")
        print(f"[OK] –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {trainer.config.mode}")
        assert trainer.config.mode == "dialogue"
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ mixed
        trainer.set_mode("mixed")
        print(f"[OK] –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {trainer.config.mode}")
        assert trainer.config.mode == "mixed"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        try:
            trainer.set_mode("invalid_mode")
            print("[ERROR] –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            return False
        except ValueError:
            print("[OK] –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤: {e}")
        print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

def test_cube_trainer_dependencies():
    """–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π CubeTrainer"""
    print("\nüß™ –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    try:
        from training.embedding_trainer import CubeTrainer
        
        # –°–æ–∑–¥–∞–Ω–∏–µ trainer –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        trainer = CubeTrainer()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        assert trainer.embedding_processor is None
        assert trainer.embedding_reshaper is None
        assert trainer.embedding_loader is None
        
        print("[OK] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü–æ–ø—ã—Ç–∫–∞ forward pass –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–∞ –¥–∞—Ç—å –æ—à–∏–±–∫—É)
        try:
            test_input = torch.randn(1, 768)
            output = trainer.forward(test_input)
            print("[ERROR] Forward pass –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É")
            return False
        except ValueError as e:
            print("[OK] Forward pass –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 60)
    print("[START] –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CUBETRAINER")
    print("   Phase 3.1 - Stage 1.1 - Basic CubeTrainer Tests")
    print("=" * 60)
    
    tests = [
        test_cube_trainer_import,
        test_training_config,
        test_embedding_metrics,
        test_cube_trainer_initialization,
        test_cube_trainer_config_loading,
        test_cube_trainer_info,
        test_cube_trainer_mode_switching,
        test_cube_trainer_dependencies
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_func.__name__}: {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print("[DATA] –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø CUBETRAINER")
    print(f"[OK] –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"[ERROR] –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"[CHART] –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/(passed+failed)*100):.1f}%")
    
    if failed == 0:
        print("[SUCCESS] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! CubeTrainer –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("[START] –ì–æ—Ç–æ–≤ –∫ Stage 1.2 - AutoencoderDataset")
    elif passed >= 6:
        print("[TARGET] –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ. –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("[WARNING]  –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–∞–∑–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã")
    else:
        print("[WARNING]  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    print("=" * 60)
    
    return failed == 0

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1) 