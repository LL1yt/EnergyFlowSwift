#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ GNN –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
==========================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–º–µ–Ω—É gMLP –Ω–∞ GNN —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import os
import sys
import torch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, os.path.abspath("."))
sys.path.insert(0, os.path.abspath("new_rebuild"))

from new_rebuild.config import get_project_config, set_project_config, ProjectConfig
from new_rebuild.core.cells import GNNCell, NCACell, CellFactory
from new_rebuild.core.lattice import Lattice3D


def test_gnn_cell_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ GNN –∫–ª–µ—Ç–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GNN –∫–ª–µ—Ç–∫–∏...")

    # –°–æ–∑–¥–∞–µ–º GNN –∫–ª–µ—Ç–∫—É
    gnn_cell = GNNCell()

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    total_params = sum(p.numel() for p in gnn_cell.parameters())
    print(f"‚úÖ GNN –∫–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {total_params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    config = get_project_config()
    target_params = config.gnn_target_params
    print(f"   –¶–µ–ª—å: {target_params}, –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {total_params}")

    ratio = total_params / target_params
    if ratio <= 1.5:  # –î–æ–ø—É—Å–∫–∞–µ–º 50% –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ
        print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (x{ratio:.2f})")
    else:
        print(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (x{ratio:.2f})")

    # –¢–µ—Å—Ç forward pass
    batch_size = 4
    neighbor_count = config.gnn_neighbor_count
    state_size = config.gnn_state_size

    neighbor_states = torch.randn(batch_size, neighbor_count, state_size)
    own_state = torch.randn(batch_size, state_size)

    # Forward pass
    new_state = gnn_cell(neighbor_states, own_state)

    print(
        f"‚úÖ Forward pass: {neighbor_states.shape} + {own_state.shape} ‚Üí {new_state.shape}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    state_change = torch.norm(new_state - own_state).item()
    print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state_change:.6f}")

    return gnn_cell, total_params


def test_gnn_vs_gmlp_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ GNN —Å gMLP –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ GNN vs gMLP...")

    config = get_project_config()

    # –°–æ–∑–¥–∞–µ–º GNN —á–µ—Ä–µ–∑ CellFactory
    gnn_cell = CellFactory.create_cell("gnn", config.get_gnn_config())
    gnn_params = sum(p.numel() for p in gnn_cell.parameters())

    # –°–æ–∑–¥–∞–µ–º gMLP —á–µ—Ä–µ–∑ CellFactory (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å GNN)
    gmlp_cell = CellFactory.create_cell("gmlp", config.get_gmlp_config())
    gmlp_params = sum(p.numel() for p in gmlp_cell.parameters())

    print(f"‚úÖ GNN –Ω–∞–ø—Ä—è–º—É—é: {gnn_params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"‚úÖ gMLP (‚ÜíGNN): {gmlp_params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    assert gnn_params == gmlp_params, "gMLP –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å GNN"
    print("‚úÖ Legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    old_gmlp_params = 113161  # –ò–∑ COMPLETION_SUMMARY.md
    improvement = old_gmlp_params / gnn_params
    print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: {old_gmlp_params} ‚Üí {gnn_params} (x{improvement:.1f} –º–µ–Ω—å—à–µ)")

    return gnn_params, improvement


def test_gnn_attention_mechanism():
    """–¢–µ—Å—Ç attention mechanism"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ attention mechanism...")

    config = get_project_config()

    # –°–æ–∑–¥–∞–µ–º GNN —Å attention
    gnn_cell = GNNCell(use_attention=True)

    batch_size = 2
    neighbor_count = config.gnn_neighbor_count
    state_size = config.gnn_state_size

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å–µ–¥–µ–π
    neighbor_states = torch.randn(batch_size, neighbor_count, state_size)
    own_state = torch.randn(batch_size, state_size)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    stats = gnn_cell.get_message_statistics(neighbor_states, own_state)

    print(f"‚úÖ Message diversity: {stats['message_diversity'].mean().item():.4f}")
    print(f"‚úÖ Message magnitudes: {stats['message_magnitudes'].mean().item():.4f}")

    if "attention_entropy" in stats:
        print(f"‚úÖ Attention entropy: {stats['attention_entropy'].mean().item():.4f}")

    # Forward pass
    new_state = gnn_cell(neighbor_states, own_state)
    print(f"‚úÖ Forward pass —Å attention: {new_state.shape}")

    return stats


def test_gnn_lattice_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GNN —Å 3D —Ä–µ—à–µ—Ç–∫–æ–π"""
    print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 3D —Ä–µ—à–µ—Ç–∫–æ–π...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GNN –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    config = get_project_config()
    config.architecture_type = "gnn"
    set_project_config(config)

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É
    lattice = Lattice3D()

    print(f"‚úÖ –†–µ—à–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {lattice.pos_helper.total_positions} –∫–ª–µ—Ç–æ–∫")
    print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {config.architecture_type}")
    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏—è: {lattice.states.shape}")
    print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {lattice.device}")

    # –¢–µ—Å—Ç forward pass
    initial_states = lattice.states.clone()
    new_states = lattice.forward()

    print(f"‚úÖ Forward pass: {initial_states.shape} ‚Üí {new_states.shape}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    total_change = torch.norm(new_states - initial_states).item()
    print(f"‚úÖ –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {total_change:.6f}")

    # –¢–µ—Å—Ç I/O –æ–ø–µ—Ä–∞—Ü–∏–π
    input_states = lattice.get_input_states()
    output_states = lattice.get_output_states()

    print(f"‚úÖ Input points: {input_states.shape}")
    print(f"‚úÖ Output points: {output_states.shape}")

    return lattice


def test_neighbor_topology_proportions():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π —Å–æ—Å–µ–¥–µ–π 10/60/30"""
    print("\n‚öñÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π —Å–æ—Å–µ–¥–µ–π...")

    config = get_project_config()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
    local_tier = config.local_tier
    functional_tier = config.functional_tier
    distant_tier = config.distant_tier

    print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ: {local_tier:.1%} (—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è)")
    print(f"‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ: {functional_tier:.1%} (–Ø–î–†–û —ç–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ—Å—Ç–∏)")
    print(f"‚úÖ –î–∞–ª—å–Ω–∏–µ: {distant_tier:.1%} (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è)")

    total = local_tier + functional_tier + distant_tier
    print(f"‚úÖ –û–±—â–∞—è —Å—É–º–º–∞: {total:.1%}")

    assert (
        abs(total - 1.0) < 0.001
    ), f"–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 100%, –ø–æ–ª—É—á–µ–Ω–æ {total:.1%}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç (–¥–ª—è —ç–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
    assert (
        functional_tier >= 0.5
    ), f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å >= 50%, –ø–æ–ª—É—á–µ–Ω–æ {functional_tier:.1%}"

    print("‚úÖ –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —ç–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ—Å—Ç–∏")

    return local_tier, functional_tier, distant_tier


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç GNN –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–∑–∞–º–µ–Ω–∞ gMLP)")
    print("=" * 50)

    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å GNN
        gnn_cell, gnn_params = test_gnn_cell_basic()

        # –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å gMLP
        params, improvement = test_gnn_vs_gmlp_comparison()

        # –¢–µ—Å—Ç 3: Attention mechanism
        stats = test_gnn_attention_mechanism()

        # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ—à–µ—Ç–∫–æ–π
        lattice = test_gnn_lattice_integration()

        # –¢–µ—Å—Ç 5: –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å–æ—Å–µ–¥–µ–π
        proportions = test_neighbor_topology_proportions()

        print("\n" + "=" * 50)
        print("üéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 50)
        print(f"‚úÖ GNN –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–¥ gMLP: x{improvement:.1f} –º–µ–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print(f"‚úÖ –†–µ—à–µ—Ç–∫–∞: {lattice.pos_helper.total_positions} –∫–ª–µ—Ç–æ–∫")
        print(
            f"‚úÖ –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å–æ—Å–µ–¥–µ–π: {proportions[0]:.0%}/{proportions[1]:.0%}/{proportions[2]:.0%}"
        )
        print(f"‚úÖ Attention –º–µ—Ö–∞–Ω–∏–∑–º: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"‚úÖ Legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

        print("\nüéØ GNN –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–º–µ–Ω–µ gMLP!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise


if __name__ == "__main__":
    main()
