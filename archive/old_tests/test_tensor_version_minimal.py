#!/usr/bin/env python3
"""
üî¨ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ TENSOR VERSION CONFLICTS
–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –∫–æ–¥–∞
"""

import torch
import torch.nn as nn
import logging
import sys
import os

# Add the project root to sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from core.cell_prototype.architectures.gmlp_cell import GatedMLPCell

logging.basicConfig(level=logging.DEBUG, format='%(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MinimalEmergentCell(nn.Module):
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è EmergentGMLPCell –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã"""
    
    def __init__(self, state_size=32, memory_dim=16):
        super().__init__()
        self.state_size = state_size
        self.memory_dim = memory_dim
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π gMLP
        self.base_gmlp = GatedMLPCell(
            state_size=state_size,
            memory_dim=memory_dim,
            hidden_dim=128,
            neighbor_count=6,
            external_input_size=12
        )
        
        # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π projection layer (GatedMLPCell —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç state_size)
        self.output_projection = nn.Linear(state_size, state_size)
        
    def forward(self, input_state):
        """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π forward pass"""
        batch_size = input_state.shape[0]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ neighbor states (–Ω—É–ª–µ–≤—ã–µ)
        neighbor_states = torch.zeros(batch_size, 6, self.state_size, device=input_state.device)
        
        # Base gMLP processing - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        gmlp_output = self.base_gmlp(
            neighbor_states=neighbor_states,
            own_state=input_state,
            external_input=None
        )
        
        # Simple projection
        output = self.output_projection(gmlp_output)
        
        return output

class MinimalTrainer(nn.Module):
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π trainer –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ tensor version conflict"""
    
    def __init__(self):
        super().__init__()
        
        # –û–¥–∏–Ω cell –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cell = MinimalEmergentCell()
        
        # –ü—Ä–æ—Å—Ç–∞—è loss function
        self.loss_fn = nn.MSELoss()
        
        # Optimizer
        self.optimizer = torch.optim.AdamW(self.parameters(), lr=0.001)
        
    def train_step(self, input_data, target_data):
        """–û–¥–∏–Ω —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è"""
        
        # Forward pass
        output = self.cell(input_data)
        
        # Loss computation
        loss = self.loss_fn(output, target_data)
        
        # Backward pass
        loss.backward()
        
        # Optimizer step
        self.optimizer.step()
        self.optimizer.zero_grad()
        
        return loss.item()
    
    def debug_tensor_versions(self, step_name):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ tensor versions"""
        logger.debug(f"\nüîç [DEBUG] {step_name} - Tensor Versions:")
        
        for name, param in self.named_parameters():
            if hasattr(param, '_version'):
                logger.debug(f"  {name}: version {param._version}, shape {param.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º buffers
        for name, buffer in self.named_buffers():
            if hasattr(buffer, '_version'):
                logger.debug(f"  {name} (buffer): version {buffer._version}, shape {buffer.shape}")

def test_tensor_version_conflict():
    """–¢–µ—Å—Ç –Ω–∞ tensor version conflicts –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    
    logger.info("üöÄ [TEST] Starting minimal tensor version conflict test...")
    
    # –°–æ–∑–¥–∞–µ–º trainer
    trainer = MinimalTrainer()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    input_data = torch.randn(1, 32, requires_grad=True)  # batch=1, state_size=32
    target_data = torch.randn(1, 32)
    
    logger.info("üìä [TEST] Initial tensor versions:")
    trainer.debug_tensor_versions("INITIAL")
    
    # –ü–µ—Ä–≤—ã–π training step
    logger.info("\nüîÑ [TEST] Step 1...")
    try:
        loss_1 = trainer.train_step(input_data.clone(), target_data)
        logger.info(f"‚úÖ [TEST] Step 1 successful, loss: {loss_1:.6f}")
        
        trainer.debug_tensor_versions("AFTER_STEP_1")
        
    except Exception as e:
        logger.error(f"‚ùå [TEST] Step 1 failed: {e}")
        return False
    
    # –í—Ç–æ—Ä–æ–π training step - —Ç—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞
    logger.info("\nüîÑ [TEST] Step 2...")
    try:
        loss_2 = trainer.train_step(input_data.clone(), target_data)
        logger.info(f"‚úÖ [TEST] Step 2 successful, loss: {loss_2:.6f}")
        
        trainer.debug_tensor_versions("AFTER_STEP_2")
        
    except Exception as e:
        logger.error(f"‚ùå [TEST] Step 2 failed: {e}")
        logger.error(f"üîç [DEBUG] Exception details: {type(e).__name__}: {e}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É
        trainer.debug_tensor_versions("ERROR_STATE")
        return False
    
    # –¢—Ä–µ—Ç–∏–π step –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    logger.info("\nüîÑ [TEST] Step 3...")
    try:
        loss_3 = trainer.train_step(input_data.clone(), target_data)
        logger.info(f"‚úÖ [TEST] Step 3 successful, loss: {loss_3:.6f}")
        
    except Exception as e:
        logger.error(f"‚ùå [TEST] Step 3 failed: {e}")
        return False
    
    logger.info("üéâ [TEST] All steps successful - no tensor version conflicts detected!")
    return True

if __name__ == "__main__":
    success = test_tensor_version_conflict()
    
    if success:
        print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: Tensor version conflicts –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ")
        print("   ‚Üí –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö (spatial propagation, multi-objective loss)")
    else:
        print("\n‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: Tensor version conflicts –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ")
        print("   ‚Üí –ü—Ä–æ–±–ª–µ–º–∞ –≤ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö (GatedMLPCell –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)") 