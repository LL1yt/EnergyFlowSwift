#!/usr/bin/env python3
"""
üß™ TEST: Surface-Only Processing Integration
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ surface-only —Ä–µ–∂–∏–º–∞ –≤ EmbeddingProcessor –¥–ª—è Universal Adapter

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°–æ–∑–¥–∞–Ω–∏–µ surface-only –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmbeddingProcessor –≤ SURFACE_ONLY —Ä–µ–∂–∏–º–µ
3. –û–±—Ä–∞–±–æ—Ç–∫–∞ surface embeddings (225D)
4. Batch processing
5. Gradient flow –¥–ª—è training –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
6. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Universal Adapter

–ê–≤—Ç–æ—Ä: 3D Cellular Neural Network Project
–î–∞—Ç–∞: 7 –∏—é–Ω—è 2025
"""

import torch
import numpy as np
import logging
from typing import Dict, Any
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def test_surface_only_config():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è surface-only –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("[CONFIG] Testing surface-only configuration creation...")
    
    try:
        from core.embedding_processor import create_surface_only_config, ProcessingMode
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = create_surface_only_config(
            surface_size=225,
            surface_dims=(15, 15)
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        assert config.processing_mode == ProcessingMode.SURFACE_ONLY, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º"
        assert config.input_dim == 225, f"–ù–µ–≤–µ—Ä–Ω—ã–π input_dim: {config.input_dim}"
        assert config.output_dim == 225, f"–ù–µ–≤–µ—Ä–Ω—ã–π output_dim: {config.output_dim}"
        assert config.surface_dimensions == (15, 15), f"–ù–µ–≤–µ—Ä–Ω—ã–µ surface_dimensions: {config.surface_dimensions}"
        assert config.surface_processing_depth == 11, f"–ù–µ–≤–µ—Ä–Ω—ã–π processing_depth: {config.surface_processing_depth}"
        
        print("[OK] Surface-only –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   Mode: {config.processing_mode.value}")
        print(f"   Dimensions: {config.input_dim}D ‚Üí {config.output_dim}D")
        print(f"   Surface: {config.surface_dimensions}")
        print(f"   Depth: {config.surface_processing_depth}")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ surface-only –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_surface_only_processor_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EmbeddingProcessor –≤ surface-only —Ä–µ–∂–∏–º–µ"""
    print("\n[START] Testing EmbeddingProcessor initialization for surface-only mode...")
    
    try:
        from core.embedding_processor import EmbeddingProcessor, create_surface_only_config
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = create_surface_only_config(surface_size=225, surface_dims=(15, 15))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor = EmbeddingProcessor(config)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        assert processor.reshaper is None, "EmbeddingReshaper –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None –¥–ª—è surface-only"
        assert processor.lattice is None, "Lattice3D –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None –¥–ª—è surface-only"
        assert processor.metrics is not None, "ProcessingMetrics –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        assert processor.config.processing_mode.value == "surface_only", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"
        
        print("[OK] EmbeddingProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –†–µ–∂–∏–º: {processor.config.processing_mode.value}")
        print(f"   EmbeddingReshaper: {'[ERROR] –ü—Ä–æ–ø—É—â–µ–Ω' if processor.reshaper is None else '[OK] –°–æ–∑–¥–∞–Ω'}")
        print(f"   Lattice3D: {'[ERROR] –ü—Ä–æ–ø—É—â–µ–Ω' if processor.lattice is None else '[OK] –°–æ–∑–¥–∞–Ω'}")
        print(f"   Metrics: {'[OK] –°–æ–∑–¥–∞–Ω—ã' if processor.metrics is not None else '[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}")
        
        return processor
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        return None


def test_surface_embedding_processing(processor):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ surface embeddings"""
    print("\n[BRAIN] Testing surface embedding processing...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ surface embedding
        surface_embedding = torch.randn(225, dtype=torch.float32, requires_grad=True)
        
        print(f"üì• Input surface: {surface_embedding.shape}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ processor
        start_time = time.time()
        processed_surface = processor.forward(surface_embedding)
        processing_time = time.time() - start_time
        
        print(f"üì§ Output surface: {processed_surface.shape}")
        print(f"‚è±Ô∏è  Processing time: {processing_time:.4f}s")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        assert processed_surface.shape == surface_embedding.shape, f"Shape mismatch: {processed_surface.shape} != {surface_embedding.shape}"
        assert processed_surface.dtype == torch.float32, f"Dtype mismatch: {processed_surface.dtype}"
        assert processed_surface.requires_grad, "Output –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        similarity = torch.cosine_similarity(surface_embedding, processed_surface, dim=0).item()
        print(f"[DATA] Cosine similarity: {similarity:.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ identity transformation
        l2_distance = torch.norm(surface_embedding - processed_surface, p=2).item()
        print(f"üìè L2 distance: {l2_distance:.4f}")
        
        assert l2_distance > 0.01, "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ identity transformation"
        
        print("[OK] Surface embedding –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
        
        return True, similarity
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ surface embedding: {e}")
        return False, 0.0


def test_batch_processing(processor):
    """–¢–µ—Å—Ç batch –æ–±—Ä–∞–±–æ—Ç–∫–∏ surface embeddings"""
    print("\n[PACKAGE] Testing batch processing...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ batch surface embeddings
        batch_size = 4
        batch_surfaces = torch.randn(batch_size, 225, dtype=torch.float32, requires_grad=True)
        
        print(f"üì• Input batch: {batch_surfaces.shape}")
        
        # Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞
        start_time = time.time()
        batch_processed = processor.forward(batch_surfaces)
        processing_time = time.time() - start_time
        
        print(f"üì§ Output batch: {batch_processed.shape}")
        print(f"‚è±Ô∏è  Batch processing time: {processing_time:.4f}s")
        print(f"[FAST] Throughput: {batch_size / processing_time:.1f} samples/sec")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        assert batch_processed.shape == batch_surfaces.shape, f"Batch shape mismatch: {batch_processed.shape} != {batch_surfaces.shape}"
        assert batch_processed.requires_grad, "Batch output –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        similarities = []
        for i in range(batch_size):
            sim = torch.cosine_similarity(batch_surfaces[i], batch_processed[i], dim=0).item()
            similarities.append(sim)
            print(f"   Sample {i}: similarity = {sim:.3f}")
        
        avg_similarity = np.mean(similarities)
        print(f"[DATA] Average batch similarity: {avg_similarity:.4f}")
        
        print("[OK] Batch processing —É—Å–ø–µ—à–µ–Ω")
        
        return True, avg_similarity
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ batch processing: {e}")
        return False, 0.0


def test_gradient_flow(processor):
    """–¢–µ—Å—Ç gradient flow –¥–ª—è training –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
    print("\n[REFRESH] Testing gradient flow for training readiness...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
        surface_input = torch.randn(2, 225, dtype=torch.float32, requires_grad=True)
        target_surface = torch.randn(2, 225, dtype=torch.float32)
        
        # Forward pass
        output_surface = processor.forward(surface_input)
        
        # –ü—Ä–æ—Å—Ç–∞—è loss function –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        loss = torch.nn.functional.mse_loss(output_surface, target_surface)
        
        print(f"[DATA] Test loss: {loss.item():.6f}")
        
        # Backward pass
        loss.backward()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ gradients
        assert surface_input.grad is not None, "Input gradients –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        grad_norm = torch.norm(surface_input.grad).item()
        print(f"[REFRESH] Gradient norm: {grad_norm:.6f}")
        
        assert grad_norm > 1e-8, f"–°–ª–∏—à–∫–æ–º –º–∞–ª—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã: {grad_norm}"
        
        print("[OK] Gradient flow —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("[OK] –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ training")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ gradient flow: {e}")
        return False


def test_universal_adapter_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Universal Adapter —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
    print("\n[LINK] Testing Universal Adapter compatibility...")
    
    try:
        from core.embedding_processor import EmbeddingProcessor, create_surface_only_config
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –æ—Ç Universal Adapter
        test_cases = [
            {"name": "LLaMA-3-8B", "surface_size": 225, "dims": (15, 15)},     # 4096D ‚Üí 225D
            {"name": "Custom-512", "surface_size": 256, "dims": (16, 16)},      # 512D ‚Üí 256D  
            {"name": "Large-1024", "surface_size": 400, "dims": (20, 20)},     # 1024D ‚Üí 400D
        ]
        
        for test_case in test_cases:
            print(f"\n   Testing {test_case['name']}: {test_case['surface_size']}D surface...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = create_surface_only_config(
                surface_size=test_case['surface_size'], 
                surface_dims=test_case['dims']
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            processor = EmbeddingProcessor(config)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            test_surface = torch.randn(test_case['surface_size'], dtype=torch.float32, requires_grad=True)
            processed = processor.forward(test_surface)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞
            assert processed.shape == test_surface.shape, f"Shape mismatch –¥–ª—è {test_case['name']}"
            
            similarity = torch.cosine_similarity(test_surface, processed, dim=0).item()
            print(f"     [OK] {test_case['name']}: similarity = {similarity:.3f}")
        
        print("[OK] Universal Adapter compatibility –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ Universal Adapter compatibility: {e}")
        return False


def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ COMPREHENSIVE SURFACE-ONLY INTEGRATION TEST")
    print("=" * 60)
    
    results = {}
    
    # 1. –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    results['config'] = test_surface_only_config()
    
    # 2. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    processor = test_surface_only_processor_initialization()
    results['initialization'] = processor is not None
    
    if processor is not None:
        # 3. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ single embedding
        success, similarity = test_surface_embedding_processing(processor)
        results['single_processing'] = success
        results['single_similarity'] = similarity
        
        # 4. –¢–µ—Å—Ç batch processing
        success, batch_similarity = test_batch_processing(processor)
        results['batch_processing'] = success
        results['batch_similarity'] = batch_similarity
        
        # 5. –¢–µ—Å—Ç gradient flow
        results['gradient_flow'] = test_gradient_flow(processor)
    
    # 6. –¢–µ—Å—Ç Universal Adapter compatibility
    results['adapter_compatibility'] = test_universal_adapter_compatibility()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("[DATA] FINAL TEST RESULTS:")
    print("=" * 60)
    
    total_tests = len([k for k in results.keys() if k.endswith('_similarity')==False])
    passed_tests = sum([1 for k, v in results.items() if k.endswith('_similarity')==False and v])
    
    for test_name, result in results.items():
        if not test_name.endswith('_similarity'):
            status = "[OK] PASS" if result else "[ERROR] FAIL"
            print(f"{status} {test_name.replace('_', ' ').title()}")
    
    if 'single_similarity' in results:
        print(f"[DATA] Single processing similarity: {results['single_similarity']:.3f}")
    if 'batch_similarity' in results:
        print(f"[DATA] Batch processing similarity: {results['batch_similarity']:.3f}")
    
    print(f"\n[TARGET] OVERALL: {passed_tests}/{total_tests} tests passed")
    
    if passed_tests == total_tests:
        print("[SUCCESS] ALL TESTS PASSED! Surface-only integration –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("[START] Ready for Stage 3.1.2 integration with Universal Adapter!")
    else:
        print("[WARNING]  Some tests failed. Review errors above.")
    
    return passed_tests == total_tests


if __name__ == "__main__":
    success = run_comprehensive_test()
    exit(0 if success else 1) 