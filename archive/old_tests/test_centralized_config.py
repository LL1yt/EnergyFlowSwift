#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import sys
import os

# Add the project root to Python path
sys.path.insert(0, os.path.abspath("."))


def test_centralized_config():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üß™ TESTING CENTRALIZED CONFIG")
    print("=" * 50)

    try:
        from utils.centralized_config import get_centralized_config

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_centralized_config()

        # –¢–µ—Å—Ç NCA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        nca_config = config.get_nca_config()
        print(f"‚úÖ NCA config: {nca_config}")

        # –¢–µ—Å—Ç minimal_nca_cell –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        minimal_nca_config = config.get_minimal_nca_cell_config()
        print(f"‚úÖ minimal_nca_cell config: {minimal_nca_config}")

        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        full_config = config.get_full_config_dict()
        print(f"‚úÖ Full config keys: {list(full_config.keys())}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        assert (
            nca_config["state_size"] == 4
        ), f"Expected state_size=4, got {nca_config['state_size']}"
        assert (
            nca_config["neighbor_count"] == 26
        ), f"Expected neighbor_count=26, got {nca_config['neighbor_count']}"
        assert (
            "minimal_nca_cell" in full_config
        ), "missing minimal_nca_cell in full config"

        print("‚úÖ All tests passed!")
        return True

    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_create_nca_cell():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è NCA –∫–ª–µ—Ç–∫–∏ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("\nüß™ TESTING NCA CELL CREATION")
    print("=" * 50)

    try:
        from utils.centralized_config import get_centralized_config
        from core.cell_prototype.architectures.minimal_nca_cell import (
            create_nca_cell_from_config,
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        central_config = get_centralized_config()
        full_config = central_config.get_full_config_dict()

        # –°–æ–∑–¥–∞–µ–º NCA –∫–ª–µ—Ç–∫—É
        cell = create_nca_cell_from_config(full_config)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        info = cell.get_info()
        print(f"‚úÖ Created NCA cell: {info['total_parameters']} parameters")
        print(f"   state_size: {info['state_size']}")
        print(f"   neighbor_count: {info['neighbor_count']}")
        print(f"   architecture: {info['architecture']}")

        # –¢–µ—Å—Ç forward pass
        import torch

        batch_size = 2
        neighbor_states = torch.randn(
            batch_size, info["neighbor_count"], info["state_size"]
        )
        own_state = torch.randn(batch_size, info["state_size"])
        external_input = torch.randn(batch_size, info["external_input_size"])

        with torch.no_grad():
            output = cell(neighbor_states, own_state, external_input)

        print(f"‚úÖ Forward pass successful: {own_state.shape} ‚Üí {output.shape}")

        return True

    except Exception as e:
        print(f"‚ùå NCA cell test failed: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_create_cell_from_config():
    """–¢–µ—Å—Ç create_cell_from_config —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("\nüß™ TESTING create_cell_from_config")
    print("=" * 50)

    try:
        from utils.centralized_config import get_centralized_config
        from core.cell_prototype.main import create_cell_from_config

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        central_config = get_centralized_config()
        full_config = central_config.get_full_config_dict()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–∂–∏–¥–∞–µ–º–æ–º create_cell_from_config
        cell_config = {
            "prototype_name": "minimal_nca_cell",
            "minimal_nca_cell": full_config["minimal_nca_cell"],
        }

        print(f"üìã Cell config: {cell_config}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–µ—Ç–∫—É
        cell = create_cell_from_config(cell_config)

        print(f"‚úÖ Created cell from config: {type(cell).__name__}")

        return True

    except Exception as e:
        print(f"‚ùå create_cell_from_config test failed: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("üöÄ CENTRALIZED CONFIG TEST SUITE")
    print("=" * 60)

    tests_passed = 0
    total_tests = 3

    if test_centralized_config():
        tests_passed += 1

    if test_create_nca_cell():
        tests_passed += 1

    if test_create_cell_from_config():
        tests_passed += 1

    print(f"\nüìä RESULTS: {tests_passed}/{total_tests} tests passed")

    if tests_passed == total_tests:
        print("üéâ ALL TESTS PASSED! Centralized config is working!")
        exit(0)
    else:
        print("‚ùå Some tests failed. Check the errors above.")
        exit(1)
