#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π gMLP –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è target=300 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import sys
import os

sys.path.insert(0, os.path.abspath("."))

import torch
import torch.nn as nn


def analyze_simplified_configs():
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""

    print("=== –ê–ù–ê–õ–ò–ó –£–ü–†–û–©–ï–ù–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô gMLP ===")
    print()

    target_params = 300

    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    state_size = 8
    neighbor_count = 6

    configs = [
        {
            "name": "MINIMAL",
            "state_size": state_size,
            "neighbor_count": neighbor_count,
            "hidden_dim": 2,
            "external_input_size": 1,
            "use_memory": False,
            "use_spatial_gating": False,
            "use_ffn": False,
        },
        {
            "name": "BASIC",
            "state_size": state_size,
            "neighbor_count": neighbor_count,
            "hidden_dim": 4,
            "external_input_size": 2,
            "use_memory": False,
            "use_spatial_gating": False,
            "use_ffn": True,
        },
        {
            "name": "MEDIUM",
            "state_size": state_size,
            "neighbor_count": neighbor_count,
            "hidden_dim": 6,
            "external_input_size": 2,
            "use_memory": False,
            "use_spatial_gating": True,
            "use_ffn": True,
        },
        {
            "name": "CURRENT",
            "state_size": state_size,
            "neighbor_count": neighbor_count,
            "hidden_dim": 8,
            "external_input_size": 4,
            "use_memory": True,
            "use_spatial_gating": True,
            "use_ffn": True,
        },
    ]

    for config in configs:
        print(f"=== {config['name']} –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===")
        params = calculate_simplified_params(config)

        print(f"  Target: {target_params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print(f"  Actual: {params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print(f"  Ratio: {params/target_params:.2f}x")
        print(f"  Difference: {params - target_params:+d}")

        if params <= target_params * 1.1:  # 10% –¥–æ–ø—É—Å–∫
            print("  ‚úÖ –ü–û–î–•–û–î–ò–¢ –ü–û–î TARGET!")
        elif params <= target_params * 1.5:  # 50% –¥–æ–ø—É—Å–∫
            print("  ‚ö†Ô∏è  –ë–ª–∏–∑–∫–æ –∫ target")
        else:
            print("  ‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

        print(
            f"  Components: hidden_dim={config['hidden_dim']}, "
            + f"external={config['external_input_size']}, "
            + f"memory={config['use_memory']}"
        )
        print()


def calculate_simplified_params(config):
    """–†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""

    state_size = config["state_size"]
    neighbor_count = config["neighbor_count"]
    hidden_dim = config["hidden_dim"]
    external_input_size = config["external_input_size"]

    # –í—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä
    neighbor_input_size = neighbor_count * state_size  # 6 * 8 = 48
    total_input_size = neighbor_input_size + state_size + external_input_size

    params = 0

    # 1. Input processing (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    params += total_input_size * 2  # LayerNorm
    params += total_input_size * hidden_dim + hidden_dim  # Linear projection

    # 2. Spatial Gating (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if config.get("use_spatial_gating", False):
        params += hidden_dim * (hidden_dim * 2) + (hidden_dim * 2)  # pre_gating
        params += hidden_dim * (neighbor_count + 1)  # spatial gating

    # 3. Feed Forward Network (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if config.get("use_ffn", False):
        ffn_hidden = hidden_dim * 2
        params += hidden_dim * ffn_hidden + ffn_hidden  # FFN layer 1
        params += ffn_hidden * hidden_dim + hidden_dim  # FFN layer 2

    # 4. Memory (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if config.get("use_memory", False):
        memory_dim = config.get("memory_dim", hidden_dim // 2)
        # GRU –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (3 –≥–µ–π—Ç–∞)
        params += 3 * (hidden_dim * memory_dim + memory_dim * memory_dim + memory_dim)
        params += memory_dim * hidden_dim + hidden_dim  # memory to output

    # 5. Output processing (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    params += hidden_dim * 2  # Output LayerNorm
    params += hidden_dim * state_size + state_size  # Output projection

    # 6. Residual connection (–µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
    if total_input_size != state_size:
        params += total_input_size * state_size + state_size

    return params


def create_optimal_config():
    """–ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–∏–∑–∫—É—é –∫ 300 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""

    print("=== –ü–û–ò–°–ö –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
    print()

    target = 300
    best_config = None
    best_diff = float("inf")

    state_size = 8
    neighbor_count = 6

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    for hidden_dim in [2, 3, 4, 5, 6]:
        for external_input_size in [1, 2, 3]:
            for use_memory in [False]:  # –ü–∞–º—è—Ç—å –æ—Ç–∫–ª—é—á–∞–µ–º
                for use_spatial_gating in [False, True]:
                    for use_ffn in [False, True]:

                        config = {
                            "state_size": state_size,
                            "neighbor_count": neighbor_count,
                            "hidden_dim": hidden_dim,
                            "external_input_size": external_input_size,
                            "use_memory": use_memory,
                            "use_spatial_gating": use_spatial_gating,
                            "use_ffn": use_ffn,
                        }

                        params = calculate_simplified_params(config)
                        diff = abs(params - target)

                        if diff < best_diff:
                            best_diff = diff
                            best_config = config.copy()
                            best_config["calculated_params"] = params

    print("–õ–£–ß–®–ê–Ø –ù–ê–ô–î–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_config['calculated_params']} (target: {target})")
    print(f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {best_diff} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"  hidden_dim: {best_config['hidden_dim']}")
    print(f"  external_input_size: {best_config['external_input_size']}")
    print(f"  use_memory: {best_config['use_memory']}")
    print(f"  use_spatial_gating: {best_config['use_spatial_gating']}")
    print(f"  use_ffn: {best_config['use_ffn']}")

    return best_config


def explain_architecture_philosophy():
    """–û–±—ä—è—Å–Ω—è–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""

    print()
    print("=== –§–ò–õ–û–°–û–§–ò–Ø –£–ü–†–û–©–ï–ù–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ===")
    print()

    print("üß† –ë–ò–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ù–¶–ò–ü–´:")
    print("  1. –ù–µ–π—Ä–æ–Ω = –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (–º–∏–Ω–∏–º—É–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π)")
    print("  2. –°–ª–æ–∂–Ω–æ—Å—Ç—å = –∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π, –Ω–µ –∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª–µ—Ç–∫–∏")
    print("  3. –ü–∞–º—è—Ç—å = –Ω–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è, –∞ —Å–µ—Ç–µ–≤–∞—è (–ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)")
    print("  4. –≠–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ—Å—Ç—å = –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print()

    print("‚öôÔ∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
    print("  1. –ú–µ–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ = –±—ã—Å—Ç—Ä–µ–µ –æ–±—É—á–µ–Ω–∏–µ")
    print("  2. –ü—Ä–æ—â–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ = —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã")
    print("  3. –ú–µ–Ω—å—à–µ overfitting –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∫–ª–µ—Ç–∫–∞—Ö")
    print("  4. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏–µ —Ä–µ—à–µ—Ç–∫–∏")
    print()

    print("üéØ –ö–û–ú–ü–†–û–ú–ò–°–°–´:")
    print("  ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º memory - —ç–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏")
    print("  ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º hidden_dim - –ø—Ä–æ—Å—Ç–æ—Ç–∞ –≤–∞–∂–Ω–µ–µ –±–æ–≥–∞—Ç—Å—Ç–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    print("  ‚ö†Ô∏è  Spatial gating - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å–æ—Å–µ–¥—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
    print("  ‚ö†Ô∏è  FFN - –±–∞–∑–æ–≤–∞—è –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–Ω–∞")


if __name__ == "__main__":
    analyze_simplified_configs()
    optimal_config = create_optimal_config()
    explain_architecture_philosophy()
