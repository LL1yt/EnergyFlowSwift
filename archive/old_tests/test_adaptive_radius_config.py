#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ adaptive_radius –≤ ProjectConfig

–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ adaptive_radius_ratio —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
2. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è min/max —Å–æ–±–ª—é–¥–∞—é—Ç—Å—è
3. –í—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ä–µ—à–µ—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
"""

import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), "new_rebuild"))

from new_rebuild.config import (
    get_project_config,
    ProjectConfig,
    ModelSettings,
    LatticeSettings,
    EulerSettings,
)


def test_adaptive_radius_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ adaptive radius"""
    print("\nüß™ –¢–ï–°–¢ ADAPTIVE RADIUS –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = ProjectConfig()
    config.lattice_dimensions = (27, 27, 27)  # max_dim = 27
    config.adaptive_radius_ratio = 0.3  # 30%
    config.adaptive_radius_min = 1.5
    config.adaptive_radius_max = 50.0
    config.adaptive_radius_enabled = True

    print(f"üìä –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {config.lattice_dimensions}")
    print(
        f"üîß Adaptive radius ratio: {config.adaptive_radius_ratio} ({config.adaptive_radius_ratio*100}%)"
    )
    print(f"üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å: {config.adaptive_radius_min}")
    print(f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å: {config.adaptive_radius_max}")

    # –í—ã—á–∏—Å–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å
    calculated_radius = config.calculate_adaptive_radius()
    expected_radius = max(config.lattice_dimensions) * config.adaptive_radius_ratio

    print(f"\nüìê –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–¥–∏—É—Å: {expected_radius} (27 * 0.3)")
    print(f"üìê –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å: {calculated_radius}")

    assert (
        calculated_radius == expected_radius
    ), f"–†–∞–¥–∏—É—Å {calculated_radius} != {expected_radius}"
    print("‚úÖ –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_adaptive_radius_limits():
    """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π min/max –¥–ª—è adaptive radius"""
    print("\nüîí –¢–ï–°–¢ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô ADAPTIVE RADIUS")
    print("=" * 60)

    # –¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    config = ProjectConfig()
    config.lattice_dimensions = (3, 3, 3)  # –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è —Ä–µ—à–µ—Ç–∫–∞
    config.adaptive_radius_ratio = 0.3  # 30% –æ—Ç 3 = 0.9
    config.adaptive_radius_min = 2.0  # –±–æ–ª—å—à–µ —á–µ–º 0.9
    config.adaptive_radius_max = 50.0

    calculated_radius = config.calculate_adaptive_radius()
    print(f"üîª –ú–∞–ª–µ–Ω—å–∫–∞—è —Ä–µ—à–µ—Ç–∫–∞ {config.lattice_dimensions}:")
    print(
        f"   –†–∞—Å—á–µ—Ç–Ω—ã–π —Ä–∞–¥–∏—É—Å: {3 * 0.3} -> –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {config.adaptive_radius_min}"
    )
    print(f"   –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–¥–∏—É—Å: {calculated_radius}")

    assert (
        calculated_radius == config.adaptive_radius_min
    ), f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {calculated_radius}"
    print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    # –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    config.lattice_dimensions = (200, 200, 200)  # –æ—á–µ–Ω—å –±–æ–ª—å—à–∞—è —Ä–µ—à–µ—Ç–∫–∞
    config.adaptive_radius_ratio = 0.5  # 50% –æ—Ç 200 = 100
    config.adaptive_radius_min = 1.0
    config.adaptive_radius_max = 25.0  # –º–µ–Ω—å—à–µ —á–µ–º 100

    calculated_radius = config.calculate_adaptive_radius()
    print(f"\nüî∫ –ë–æ–ª—å—à–∞—è —Ä–µ—à–µ—Ç–∫–∞ {config.lattice_dimensions}:")
    print(
        f"   –†–∞—Å—á–µ—Ç–Ω—ã–π —Ä–∞–¥–∏—É—Å: {200 * 0.5} -> –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {config.adaptive_radius_max}"
    )
    print(f"   –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–¥–∏—É—Å: {calculated_radius}")

    assert (
        calculated_radius == config.adaptive_radius_max
    ), f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {calculated_radius}"
    print("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_adaptive_radius_disabled():
    """–¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è adaptive radius"""
    print("\n‚ùå –¢–ï–°–¢ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø ADAPTIVE RADIUS")
    print("=" * 60)

    config = ProjectConfig()
    config.lattice_dimensions = (27, 27, 27)
    config.adaptive_radius_ratio = 0.3
    config.adaptive_radius_enabled = False  # –û—Ç–∫–ª—é—á–∞–µ–º
    config.adaptive_radius_max = 10.0

    calculated_radius = config.calculate_adaptive_radius()
    print(f"üîß Adaptive radius –æ—Ç–∫–ª—é—á–µ–Ω")
    print(f"üìê –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è max —Ä–∞–¥–∏—É—Å: {calculated_radius}")

    assert (
        calculated_radius == config.adaptive_radius_max
    ), f"–ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è max: {calculated_radius}"
    print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ adaptive radius —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_different_ratios():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π adaptive_radius_ratio"""
    print("\nüìä –¢–ï–°–¢ –†–ê–ó–ù–´–• –°–û–û–¢–ù–û–®–ï–ù–ò–ô")
    print("=" * 60)

    config = ProjectConfig()
    config.lattice_dimensions = (50, 50, 50)  # max_dim = 50
    config.adaptive_radius_min = 0.1
    config.adaptive_radius_max = 100.0

    test_ratios = [0.1, 0.2, 0.3, 0.4, 0.5]

    print(f"üèóÔ∏è –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {config.lattice_dimensions} (max_dim = 50)")
    print(f"üìè –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")

    for ratio in test_ratios:
        config.adaptive_radius_ratio = ratio
        calculated_radius = config.calculate_adaptive_radius()
        expected = 50 * ratio

        print(
            f"   {ratio*100:3.0f}% -> {calculated_radius:5.1f} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected:5.1f})"
        )
        assert calculated_radius == expected, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è ratio {ratio}"

    print("‚úÖ –í—Å–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_neighbor_strategy_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å get_neighbor_strategy_config()"""
    print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° NEIGHBOR STRATEGY CONFIG")
    print("=" * 60)

    config = ProjectConfig()
    config.lattice_dimensions = (30, 20, 40)  # max_dim = 40
    config.adaptive_radius_ratio = 0.25  # 25%
    config.adaptive_radius_min = 2.0
    config.adaptive_radius_max = 30.0

    neighbor_config = config.get_neighbor_strategy_config()

    print(f"üìä Neighbor strategy config —Å–æ–¥–µ—Ä–∂–∏—Ç:")
    for key, value in neighbor_config.items():
        if "adaptive" in key:
            print(f"   {key}: {value}")

    expected_radius = 40 * 0.25  # 10.0
    assert (
        neighbor_config["adaptive_radius"] == expected_radius
    ), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–¥–∏—É—Å –≤ neighbor config"
    assert (
        neighbor_config["adaptive_radius_ratio"] == 0.25
    ), "–ù–µ–≤–µ—Ä–Ω—ã–π ratio –≤ neighbor config"

    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å neighbor strategy config —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_global_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüåê –¢–ï–°–¢ –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê CONFIG")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    custom_config = ProjectConfig()
    custom_config.lattice_dimensions = (15, 15, 15)
    custom_config.adaptive_radius_ratio = 0.4  # 40%
    custom_config.adaptive_radius_min = 1.0
    custom_config.adaptive_radius_max = 20.0

    set_project_config(custom_config)

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    global_config = get_project_config()
    calculated_radius = global_config.calculate_adaptive_radius()
    expected_radius = 15 * 0.4  # 6.0

    print(f"üîß –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {global_config.lattice_dimensions}")
    print(f"   Adaptive radius ratio: {global_config.adaptive_radius_ratio}")
    print(f"   –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å: {calculated_radius}")

    assert (
        calculated_radius == expected_radius
    ), f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ"
    print("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ adaptive radius –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        test_adaptive_radius_basic()
        test_adaptive_radius_limits()
        test_adaptive_radius_disabled()
        test_different_ratios()
        test_neighbor_strategy_config_integration()
        test_global_config_integration()

        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ ADAPTIVE RADIUS –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º")
        print("‚úÖ –í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
        print("üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–¥–∏—É—Å–∞ –≤ ProjectConfig")

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback

        traceback.print_exc()
        return False

    return True


if __name__ == "__main__":
    main()
