#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ bounds checking
===========================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã find_neighbors_by_radius_safe
–∏ –≤—ã—è–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏.
"""

import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), "new_rebuild"))

from new_rebuild.core.lattice.spatial_optimization.moe_spatial_optimizer import (
    MoESpatialOptimizer,
)
from new_rebuild.core.lattice.position import Position3D
from new_rebuild.config import get_project_config


def debug_neighbor_search():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π"""

    print("üîß –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π")

    # –°–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é —Ä–µ—à–µ—Ç–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    dimensions = (5, 5, 5)
    total_cells = 5 * 5 * 5  # 125 –∫–ª–µ—Ç–æ–∫

    print(f"   üìê –†–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: {dimensions}")
    print(f"   üìä –í—Å–µ–≥–æ –∫–ª–µ—Ç–æ–∫: {total_cells}")
    print(f"   üìç –í–∞–ª–∏–¥–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: 0-{total_cells-1}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º adaptive radius
    config = get_project_config()
    adaptive_radius = config.calculate_adaptive_radius()
    print(f"   üìè Adaptive radius: {adaptive_radius}")

    # –°–æ–∑–¥–∞–µ–º spatial optimizer
    moe_optimizer = MoESpatialOptimizer(dimensions, device="cpu")
    pos_helper = Position3D(dimensions)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–µ—Ç–æ–∫
    test_cells = [0, 62, 124]  # –Ω–∞—á–∞–ª–æ, —Ü–µ–Ω—Ç—Ä, –∫–æ–Ω–µ—Ü

    for cell_idx in test_cells:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–µ—Ç–∫—É {cell_idx}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        coords = pos_helper.to_3d_coordinates(cell_idx)
        print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords}")

        # –í—ã—á–∏—Å–ª—è–µ–º bounds –∫–∞–∫ –≤ find_neighbors_by_radius_safe
        search_radius = adaptive_radius
        print(f"   üìè Search radius: {search_radius}")

        x_min = max(0, coords[0] - int(search_radius))
        x_max = min(dimensions[0], coords[0] + int(search_radius) + 1)
        y_min = max(0, coords[1] - int(search_radius))
        y_max = min(dimensions[1], coords[1] + int(search_radius) + 1)
        z_min = max(0, coords[2] - int(search_radius))
        z_max = min(dimensions[2], coords[2] + int(search_radius) + 1)

        print(
            f"   üì¶ Bounds: x=[{x_min}, {x_max}), y=[{y_min}, {y_max}), z=[{z_min}, {z_max})"
        )
        print(
            f"   üî¢ –†–∞–∑–º–µ—Ä—ã –∏—Ç–µ—Ä–∞—Ü–∏–∏: x={x_max-x_min}, y={y_max-y_min}, z={z_max-z_min}"
        )
        print(f"   üîÑ –í—Å–µ–≥–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {(x_max-x_min) * (y_max-y_min) * (z_max-z_min)}")

        # –ò—â–µ–º —Å–æ—Å–µ–¥–µ–π
        neighbors = moe_optimizer.find_neighbors_by_radius_safe(cell_idx)
        print(f"   üë• –ù–∞–π–¥–µ–Ω–æ —Å–æ—Å–µ–¥–µ–π: {len(neighbors)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
        invalid_neighbors = [n for n in neighbors if not (0 <= n < total_cells)]
        if invalid_neighbors:
            print(f"   ‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ï –°–û–°–ï–î–ò: {invalid_neighbors}")
        else:
            print(f"   ‚úÖ –í—Å–µ —Å–æ—Å–µ–¥–∏ –≤–∞–ª–∏–¥–Ω—ã")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Å–µ–¥–µ–π
        print(f"   üìã –ü–µ—Ä–≤—ã–µ 5 —Å–æ—Å–µ–¥–µ–π: {neighbors[:5]}")


def debug_position_helper():
    """–û—Ç–ª–∞–¥–∫–∞ Position3D helper"""

    print("\nüîß –û—Ç–ª–∞–¥–∫–∞ Position3D helper")

    dimensions = (5, 5, 5)
    pos_helper = Position3D(dimensions)
    total_cells = 5 * 5 * 5

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    test_coords = [
        (0, 0, 0),  # –Ω–∞—á–∞–ª–æ
        (2, 2, 2),  # —Ü–µ–Ω—Ç—Ä
        (4, 4, 4),  # –∫–æ–Ω–µ—Ü
        (5, 5, 5),  # –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ù–ï–í–ê–õ–ò–î–ï–ù
        (-1, 0, 0),  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ù–ï–í–ê–õ–ò–î–ï–ù
    ]

    for coords in test_coords:
        is_valid = pos_helper.is_valid_coordinates(coords)
        print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {coords}: –≤–∞–ª–∏–¥–Ω—ã={is_valid}")

        if is_valid:
            linear_idx = pos_helper.to_linear_index(coords)
            print(f"      üìä –õ–∏–Ω–µ–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {linear_idx}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö
            if 0 <= linear_idx < total_cells:
                print(f"      ‚úÖ –ò–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–µ–Ω")
            else:
                print(f"      ‚ùå –ò–Ω–¥–µ–∫—Å {linear_idx} –≤–Ω–µ –ø—Ä–µ–¥–µ–ª–æ–≤ [0, {total_cells-1}]")


if __name__ == "__main__":
    try:
        debug_position_helper()
        debug_neighbor_search()
        print("üéâ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–∫–µ: {e}")
        import traceback

        traceback.print_exc()
        raise
