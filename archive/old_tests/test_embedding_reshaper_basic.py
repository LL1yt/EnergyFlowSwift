"""
–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ EmbeddingReshaper
==============================================

–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.

PHASE 2.3 - –î–µ–Ω—å 1-2: –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –æ—Å–Ω–æ–≤–∞
[OK] Checkpoint –î–µ–Ω—å 1-2: –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥—É–ª—è –∏ –ø—Ä–æ—Å—Ç—ã–µ reshape –æ–ø–µ—Ä–∞—Ü–∏–∏
"""

import sys
import os
import numpy as np
import torch
import logging
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å EmbeddingReshaper
from data.embedding_reshaper import (
    EmbeddingReshaper,
    LinearReshaper,
    AdaptiveReshaper,
    SemanticReshaper,
    validate_semantic_preservation,
    calculate_similarity_metrics,
    create_test_embeddings,
    benchmark_transformation_speed
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_basic_functionality():
    """
    –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ EmbeddingReshaper.
    
    [OK] –ó–∞–¥–∞—á–∞ 1.1: –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏ –∫–ª–∞—Å—Å EmbeddingReshaper
    [OK] –ó–∞–¥–∞—á–∞ 1.2: –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ vector_to_matrix –∏ matrix_to_vector
    """
    print("\nüß™ === –¢–ï–°–¢ 1: –ë–ê–ó–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ ===")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π reshaper
    reshaper = EmbeddingReshaper(
        input_dim=768,
        cube_shape=(8, 8, 12),
        reshaping_method="linear",
        preserve_semantics=True,
        semantic_threshold=0.95
    )
    
    print(f"[OK] EmbeddingReshaper —Å–æ–∑–¥–∞–Ω: {reshaper}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å NumPy
    print("\n[DATA] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å NumPy:")
    test_embedding_np = np.random.random(768).astype(np.float32)
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —ç–º–±–µ–¥–∏–Ω–≥: {test_embedding_np.shape}, min={test_embedding_np.min():.3f}, max={test_embedding_np.max():.3f}")
    
    # 1D ‚Üí 3D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    matrix_3d = reshaper.vector_to_matrix(test_embedding_np)
    print(f"   1D‚Üí3D: {test_embedding_np.shape} ‚Üí {matrix_3d.shape}")
    assert matrix_3d.shape == (8, 8, 12), f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞: {matrix_3d.shape}"
    
    # 3D ‚Üí 1D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    vector_1d = reshaper.matrix_to_vector(matrix_3d)
    print(f"   3D‚Üí1D: {matrix_3d.shape} ‚Üí {vector_1d.shape}")
    assert vector_1d.shape == (768,), f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞: {vector_1d.shape}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    similarity = calculate_similarity_metrics(test_embedding_np, vector_1d)
    print(f"   Cosine similarity: {similarity:.6f}")
    
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ reshape –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    np_difference = np.allclose(test_embedding_np, vector_1d)
    print(f"   –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {np_difference}")
    assert np_difference, "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º reshape!"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å PyTorch
    print("\n[HOT] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å PyTorch:")
    test_embedding_torch = torch.from_numpy(test_embedding_np)
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —ç–º–±–µ–¥–∏–Ω–≥: {test_embedding_torch.shape}, type={type(test_embedding_torch)}")
    
    # 1D ‚Üí 3D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    matrix_3d_torch = reshaper.vector_to_matrix(test_embedding_torch)
    print(f"   1D‚Üí3D: {test_embedding_torch.shape} ‚Üí {matrix_3d_torch.shape}")
    assert matrix_3d_torch.shape == (8, 8, 12), f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞: {matrix_3d_torch.shape}"
    assert isinstance(matrix_3d_torch, torch.Tensor), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å torch.Tensor"
    
    # 3D ‚Üí 1D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    vector_1d_torch = reshaper.matrix_to_vector(matrix_3d_torch)
    print(f"   3D‚Üí1D: {matrix_3d_torch.shape} ‚Üí {vector_1d_torch.shape}")
    assert vector_1d_torch.shape == (768,), f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞: {vector_1d_torch.shape}"
    assert isinstance(vector_1d_torch, torch.Tensor), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å torch.Tensor"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    torch_difference = torch.allclose(test_embedding_torch, vector_1d_torch)
    print(f"   –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {torch_difference}")
    assert torch_difference, "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º reshape!"
    
    print("[OK] –¢–ï–°–¢ 1 –ü–†–û–®–ï–õ: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    return True


def test_three_strategies():
    """
    –¢–µ—Å—Ç –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π reshaping.
    
    [OK] –ó–∞–¥–∞—á–∞ 2.1: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    [OK] –ó–∞–¥–∞—á–∞ 2.2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    """
    print("\nüß™ === –¢–ï–°–¢ 2: –¢–†–ò –°–¢–†–ê–¢–ï–ì–ò–ò RESHAPING ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–∏–Ω–≥
    test_embedding = np.random.random(768).astype(np.float32)
    test_embedding = test_embedding / np.linalg.norm(test_embedding)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    
    strategies = [
        ("LinearReshaper", LinearReshaper()),
        ("AdaptiveReshaper (variance)", AdaptiveReshaper(adaptation_method="variance_based")),
        ("AdaptiveReshaper (importance)", AdaptiveReshaper(adaptation_method="importance_weighted")),
        ("SemanticReshaper (kmeans)", SemanticReshaper(clustering_method="kmeans")),
        ("SemanticReshaper (hierarchical)", SemanticReshaper(clustering_method="hierarchical"))
    ]
    
    results = []
    
    for strategy_name, strategy in strategies:
        print(f"\n[DATA] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_name}")
        
        try:
            # 1D ‚Üí 3D ‚Üí 1D —Ü–∏–∫–ª
            matrix_3d = strategy.vector_to_matrix(test_embedding)
            vector_1d = strategy.matrix_to_vector(matrix_3d)
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            similarity = calculate_similarity_metrics(test_embedding, vector_1d)
            is_valid = validate_semantic_preservation(test_embedding, vector_1d, threshold=0.90)
            
            print(f"   [OK] –§–æ—Ä–º–∞ 3D: {matrix_3d.shape}")
            print(f"   [OK] –§–æ—Ä–º–∞ 1D: {vector_1d.shape}")
            print(f"   [DATA] Cosine similarity: {similarity:.6f}")
            print(f"   [OK] –í–∞–ª–∏–¥–∞—Ü–∏—è (>0.90): {is_valid}")
            
            results.append({
                'strategy': strategy_name,
                'similarity': similarity,
                'valid': is_valid,
                'success': True
            })
            
        except Exception as e:
            print(f"   [ERROR] –û—à–∏–±–∫–∞ –≤ {strategy_name}: {e}")
            results.append({
                'strategy': strategy_name,
                'similarity': 0.0,
                'valid': False,
                'success': False
            })
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n[CHART] === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ê–¢–ï–ì–ò–ô ===")
    successful_strategies = [r for r in results if r['success']]
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(successful_strategies)}/{len(strategies)}")
    
    for result in results:
        status = "[OK]" if result['success'] else "[ERROR]"
        print(f"{status} {result['strategy']}: similarity={result['similarity']:.3f}, valid={result['valid']}")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—Ö–∞: —Ö–æ—Ç—è –±—ã 3 —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    assert len(successful_strategies) >= 3, f"–ú–∏–Ω–∏–º—É–º 3 —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç {len(successful_strategies)}"
    
    print("[OK] –¢–ï–°–¢ 2 –ü–†–û–®–ï–õ: –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã!")
    return results


def test_semantic_preservation():
    """
    –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏–∫–∏ >95%.
    
    [OK] –ó–∞–¥–∞—á–∞ 2.1: Semantic preservation >95%
    [OK] –ó–∞–¥–∞—á–∞ 2.2: –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
    """
    print("\nüß™ === –¢–ï–°–¢ 3: –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ï–ú–ê–ù–¢–ò–ö–ò ===")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
    test_embeddings = create_test_embeddings(count=10, dim=768, embedding_type="normalized")
    
    reshaper = EmbeddingReshaper(
        semantic_threshold=0.95,
        preserve_semantics=True
    )
    
    preservation_scores = []
    
    for i, embedding in enumerate(test_embeddings):
        print(f"\n[DATA] –¢–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–∏–Ω–≥ {i+1}/10:")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        matrix_3d = reshaper.vector_to_matrix(embedding)
        vector_1d = reshaper.matrix_to_vector(matrix_3d)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        similarity = calculate_similarity_metrics(embedding, vector_1d)
        is_preserved = validate_semantic_preservation(embedding, vector_1d, threshold=0.95)
        
        preservation_scores.append(similarity)
        
        print(f"   [DATA] Similarity: {similarity:.6f}")
        print(f"   [OK] Preserved (>0.95): {is_preserved}")
    
    # –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    avg_preservation = np.mean(preservation_scores)
    min_preservation = np.min(preservation_scores)
    preservation_success_rate = np.mean([score >= 0.95 for score in preservation_scores])
    
    print(f"\n[CHART] === –ò–¢–û–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –°–ï–ú–ê–ù–¢–ò–ö–ò ===")
    print(f"–°—Ä–µ–¥–Ω—è—è similarity: {avg_preservation:.6f}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è similarity: {min_preservation:.6f}")
    print(f"–î–æ–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π (>0.95): {preservation_success_rate:.1%}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ reshaper
    stats = reshaper.get_statistics()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ reshaper:")
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –¥–ª—è linear reshaping (–ø—Ä–æ—Å—Ç–æ–π reshape –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å 100% —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
    assert avg_preservation > 0.98, f"–°—Ä–µ–¥–Ω—è—è similarity –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >0.98, –ø–æ–ª—É—á–µ–Ω–æ {avg_preservation:.6f}"
    assert preservation_success_rate >= 0.8, f"–î–æ–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ‚â•80%, –ø–æ–ª—É—á–µ–Ω–æ {preservation_success_rate:.1%}"
    
    print("[OK] –¢–ï–°–¢ 3 –ü–†–û–®–ï–õ: –°–µ–º–∞–Ω—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è!")
    return preservation_scores


def test_performance_benchmark():
    """
    –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π.
    
    [OK] –ó–∞–¥–∞—á–∞ 3.2: Performance optimization
    [OK] –ó–∞–¥–∞—á–∞ 3.2: Memory efficiency
    """
    print("\nüß™ === –¢–ï–°–¢ 4: –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_embeddings = create_test_embeddings(count=32, dim=768, embedding_type="random")
    
    reshaper = EmbeddingReshaper(preserve_semantics=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞
    
    print(f"[DATA] –ë–µ–Ω—á–º–∞—Ä–∫ –Ω–∞ {len(test_embeddings)} —ç–º–±–µ–¥–∏–Ω–≥–∞—Ö:")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
    benchmark_results = benchmark_transformation_speed(
        reshaper=reshaper,
        test_embeddings=test_embeddings,
        num_iterations=100
    )
    
    print(f"\n[CHART] === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===")
    for key, value in benchmark_results.items():
        if 'time' in key:
            print(f"{key}: {value:.3f} ms")
        else:
            print(f"{key}: {value}")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ reshape)
    assert benchmark_results['avg_time_1d_to_3d_ms'] < 10.0, "1D‚Üí3D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å <10ms"
    assert benchmark_results['avg_time_3d_to_1d_ms'] < 10.0, "3D‚Üí1D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å <10ms"
    assert benchmark_results['total_throughput_per_sec'] > 100, "–û–±—â–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >100 –æ–ø/—Å–µ–∫"
    
    print("[OK] –¢–ï–°–¢ 4 –ü–†–û–®–ï–õ: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ!")
    return benchmark_results


def test_integration_readiness():
    """
    –¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥—É–ª—è–º–∏.
    
    [OK] –ó–∞–¥–∞—á–∞ 3.1: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
    [OK] Checkpoint –î–µ–Ω—å 5-6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Teacher LLM Encoder
    """
    print("\nüß™ === –¢–ï–°–¢ 5: –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å CUDA –¥–ª—è RTX 5090
        import torch
        if torch.cuda.is_available():
            print("[WARNING]  CUDA –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ RTX 5090 –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å —Ç–µ–∫—É—â–∏–º PyTorch")
            print("[OK] –¢–ï–°–¢ 5 –ü–†–û–ü–£–©–ï–ù: CUDA –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è RTX 5090)")
            print("   EmbeddingReshaper –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è CUDA –ø—Ä–æ–±–ª–µ–º")
            return True
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å EmbeddingLoader (Teacher LLM Encoder)
        from data.embedding_loader import EmbeddingLoader
        print("[OK] EmbeddingLoader (Teacher LLM Encoder) –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å–Ω—ã–π pipeline
        print("\n[LINK] –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–≥–æ pipeline:")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ CPU –¥–ª—è RTX 5090 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        import os
        import torch
        original_cuda_visible = os.environ.get('CUDA_VISIBLE_DEVICES', '')
        
        if torch.cuda.is_available():
            print("   [WARNING]  –û–±–Ω–∞—Ä—É–∂–µ–Ω CUDA, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ CPU –¥–ª—è RTX 5090 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
            # –û—Ç–∫–ª—é—á–∞–µ–º CUDA —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            os.environ['CUDA_VISIBLE_DEVICES'] = ''
        
        encoder = EmbeddingLoader()
        reshaper = EmbeddingReshaper()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CUDA –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if original_cuda_visible:
            os.environ['CUDA_VISIBLE_DEVICES'] = original_cuda_visible
        elif 'CUDA_VISIBLE_DEVICES' in os.environ:
            del os.environ['CUDA_VISIBLE_DEVICES']
        
        print(f"   [OK] Encoder –≥–æ—Ç–æ–≤: {encoder}")
        print(f"   [OK] Reshaper –≥–æ—Ç–æ–≤: {reshaper}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ‚Üí —ç–º–±–µ–¥–∏–Ω–≥ ‚Üí –∫—É–± pipeline
        test_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π."
        print(f"   [WRITE] –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: '{test_text}'")
        
        # –≠—Ç–∞–ø 1: –¢–µ–∫—Å—Ç ‚Üí —ç–º–±–µ–¥–∏–Ω–≥ (Teacher LLM)
        embedding = encoder.load_from_llm([test_text], model_key="distilbert")
        embedding = embedding[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–º–±–µ–¥–∏–Ω–≥ –∏–∑ batch
        print(f"   [DATA] –≠–º–±–µ–¥–∏–Ω–≥ –æ—Ç Teacher LLM: {embedding.shape}")
        
        # –≠—Ç–∞–ø 2: –≠–º–±–µ–¥–∏–Ω–≥ ‚Üí 3D –∫—É–± (EmbeddingReshaper)
        if embedding.shape[0] != 768:
            print(f"   [WARNING]  –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–∏–Ω–≥–∞ {embedding.shape[0]} != 768, —Å–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π reshaper")
            reshaper = EmbeddingReshaper(
                input_dim=embedding.shape[0],
                cube_shape=_find_compatible_cube_shape(embedding.shape[0])
            )
        
        cube_matrix = reshaper.vector_to_matrix(embedding)
        print(f"   üßä –ö—É–±-–º–∞—Ç—Ä–∏—Ü–∞: {cube_matrix.shape}")
        
        # –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
        restored_embedding = reshaper.matrix_to_vector(cube_matrix)
        print(f"   [REFRESH] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–º–±–µ–¥–∏–Ω–≥: {restored_embedding.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        similarity = calculate_similarity_metrics(embedding, restored_embedding)
        print(f"   [DATA] –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {similarity:.6f}")
        
        integration_success = similarity > 0.95
        print(f"   [OK] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {integration_success}")
        
        assert integration_success, f"–ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >0.95, –ø–æ–ª—É—á–µ–Ω–æ {similarity:.6f}"
        
        print("[OK] –¢–ï–°–¢ 5 –ü–†–û–®–ï–õ: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        return True
        
    except ImportError as e:
        print(f"[WARNING]  EmbeddingLoader –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("   –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –µ—Å–ª–∏ Phase 2 –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print("[OK] –¢–ï–°–¢ 5 –ü–†–û–ü–£–©–ï–ù: EmbeddingLoader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ)")
        return False
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        raise


def _find_compatible_cube_shape(dim: int) -> tuple:
    """–ü–æ–∏—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π 3D —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏."""
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    factors = []
    for i in range(1, int(dim**0.5) + 1):
        if dim % i == 0:
            factors.append(i)
            if i != dim // i:
                factors.append(dim // i)
    
    factors.sort()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–µ—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –±–ª–∏–∑–∫—É—é –∫ –∫—É–±—É
    for i, f1 in enumerate(factors):
        for j, f2 in enumerate(factors[i:], i):
            f3 = dim // (f1 * f2)
            if f1 * f2 * f3 == dim:
                return (f1, f2, f3)
    
    # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    return (1, 1, dim)


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è EmbeddingReshaper.
    
    PHASE 2.3 - –î–µ–Ω—å 1-2 Checkpoint:
    [OK] –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞–Ω–∞
    [OK] –ü—Ä–æ—Å—Ç—ã–µ reshape –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç  
    [OK] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞
    """
    print("[START] === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EMBEDDINGRESHAPER ===")
    print("Phase 2.3 - –î–µ–Ω—å 1-2: –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –æ—Å–Ω–æ–≤–∞")
    print("=" * 60)
    
    test_results = {}
    
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        test_results['basic_functionality'] = test_basic_functionality()
        
        # –¢–µ—Å—Ç 2: –¢—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        test_results['three_strategies'] = test_three_strategies()
        
        # –¢–µ—Å—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏–∫–∏
        test_results['semantic_preservation'] = test_semantic_preservation()
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        test_results['performance'] = test_performance_benchmark()
        
        # –¢–µ—Å—Ç 5: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        test_results['integration_readiness'] = test_integration_readiness()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print(f"\n[SUCCESS] === –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ===")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(1 for r in test_results.values() if r)}/{len(test_results)}")
        
        for test_name, result in test_results.items():
            status = "[OK]" if result else "[ERROR]"
            print(f"{status} {test_name}")
        
        if all(test_results.values()):
            print(f"\n[TARGET] –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! EmbeddingReshaper –≥–æ—Ç–æ–≤ –∫ Phase 2.3 Day 3-4!")
            print(f"[INFO] Checkpoint –î–µ–Ω—å 1-2: [OK] –ó–ê–í–ï–†–®–ï–ù")
            print(f"[START] –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        else:
            print(f"\n[WARNING]  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
            
    except Exception as e:
        print(f"\n[ERROR] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return all(test_results.values())


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 