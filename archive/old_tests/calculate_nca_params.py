#!/usr/bin/env python3
"""
–†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è minimal NCA cell
"""


def calculate_nca_params(state_size, neighbor_count, hidden_dim, external_input_size=1):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è NCA cell"""

    print(f"üßÆ –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ NCA:")
    print(f"   state_size: {state_size}")
    print(f"   neighbor_count: {neighbor_count}")
    print(f"   hidden_dim: {hidden_dim}")
    print(f"   external_input_size: {external_input_size}")
    print()

    # Input —Ä–∞–∑–º–µ—Ä—ã
    neighbor_input_size = neighbor_count * state_size
    total_input_size = neighbor_input_size + state_size + external_input_size

    print(f"üìä –†–∞–∑–º–µ—Ä—ã –≤—Ö–æ–¥–æ–≤:")
    print(
        f"   neighbor_input_size: {neighbor_count} √ó {state_size} = {neighbor_input_size}"
    )
    print(f"   own_state_size: {state_size}")
    print(f"   external_input_size: {external_input_size}")
    print(f"   total_input_size: {total_input_size}")
    print()

    # –°–ª–æ–∏ NCA
    print(f"üîß –°–ª–æ–∏ NCA:")

    # Input projection: total_input -> hidden_dim
    input_proj_params = total_input_size * hidden_dim + hidden_dim  # weight + bias
    print(
        f"   input_projection: {total_input_size} √ó {hidden_dim} + {hidden_dim} = {input_proj_params}"
    )

    # Update gate: hidden_dim -> state_size
    update_gate_params = hidden_dim * state_size + state_size  # weight + bias
    print(
        f"   update_gate: {hidden_dim} √ó {state_size} + {state_size} = {update_gate_params}"
    )

    # Output projection: hidden_dim -> state_size
    output_proj_params = hidden_dim * state_size + state_size  # weight + bias
    print(
        f"   output_projection: {hidden_dim} √ó {state_size} + {state_size} = {output_proj_params}"
    )

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    total_params = input_proj_params + update_gate_params + output_proj_params

    print()
    print(f"üéØ –ò–¢–û–ì–û –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params}")

    return total_params


if __name__ == "__main__":
    print("=" * 50)
    print("–†–ê–°–ß–ï–¢ –ü–ê–†–ê–ú–ï–¢–†–û–í MINIMAL NCA CELL")
    print("=" * 50)

    # –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    current_params = calculate_nca_params(
        state_size=4, neighbor_count=26, hidden_dim=3, external_input_size=1
    )

    print()
    print("=" * 50)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –° –î–†–£–ì–ò–ú–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø–ú–ò")
    print("=" * 50)

    # –°—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (state_size=8)
    print("\nüìã –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (state_size=8):")
    old_params = calculate_nca_params(
        state_size=8, neighbor_count=26, hidden_dim=3, external_input_size=1
    )

    print(
        f"\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {old_params} ‚Üí {current_params} ({current_params - old_params:+d})"
    )
    print(
        f"   –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {(current_params - old_params) / old_params * 100:.1f}%"
    )
