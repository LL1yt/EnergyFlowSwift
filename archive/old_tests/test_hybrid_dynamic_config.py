#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
================================================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ testing
2. MinimalNCACell —Å <100 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å dynamic_config.py
4. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import os
import torch
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.abspath("."))

from utils.config_manager.dynamic_config import DynamicConfigManager
from core.cell_prototype.architectures.minimal_nca_cell import (
    create_nca_cell_from_config,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def test_dynamic_config_testing_mode():
    """–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ testing"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (testing mode)...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_manager = DynamicConfigManager()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ testing
        config = config_manager.create_config_for_mode("testing")

        logger.info(
            f"[CONFIG] –†–µ–∂–∏–º: {config.get('_metadata', {}).get('mode', 'unknown')}"
        )
        logger.info(
            f"[CONFIG] Scale factor: {config.get('_metadata', {}).get('scale_factor', 'unknown')}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        arch_config = config.get("architecture", {})
        logger.info(f"[ARCH] Hybrid mode: {arch_config.get('hybrid_mode', False)}")
        logger.info(
            f"[ARCH] NCA scaling disabled: {arch_config.get('disable_nca_scaling', False)}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ NCA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        nca_config = config.get("minimal_nca_cell", {})
        logger.info(f"[NCA] State size: {nca_config.get('state_size', 'unknown')}")
        logger.info(f"[NCA] Hidden dim: {nca_config.get('hidden_dim', 'unknown')}")
        logger.info(
            f"[NCA] Target params: {nca_config.get('target_params', 'unknown')}"
        )
        logger.info(
            f"[NCA] Scaling enabled: {nca_config.get('enable_lattice_scaling', 'unknown')}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert (
            arch_config.get("hybrid_mode") == True
        ), "Hybrid mode should be enabled in testing"
        assert (
            arch_config.get("disable_nca_scaling") == True
        ), "NCA scaling should be disabled"
        assert (
            nca_config.get("enable_lattice_scaling") == False
        ), "NCA lattice scaling should be disabled"

        logger.info("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (testing mode): –û–ö")
        return config

    except Exception as e:
        logger.error(f"‚ùå Dynamic config test failed: {e}")
        return None


def test_nca_from_dynamic_config(config):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è NCA –∫–ª–µ—Ç–∫–∏ –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è NCA –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ NCA –∫–ª–µ—Ç–∫–∏ –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        cell = create_nca_cell_from_config(config)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        total_params = sum(p.numel() for p in cell.parameters())
        info = cell.get_info()

        logger.info(f"[CELL] Architecture: {info['architecture']}")
        logger.info(f"[CELL] Total params: {total_params}")
        logger.info(f"[CELL] Target params: {info['target_parameters']}")
        logger.info(f"[CELL] Scaling mode: {info['scaling_mode']}")
        logger.info(f"[CELL] State size: {info['state_size']}")
        logger.info(f"[CELL] Hidden dim: {info['hidden_dim']}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ testing
        assert (
            info["scaling_mode"] == "fixed"
        ), f"Expected fixed scaling, got {info['scaling_mode']}"
        assert total_params < 100, f"Expected <100 params, got {total_params}"
        assert (
            info["lattice_scaling_enabled"] == False
        ), "Lattice scaling should be disabled"

        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ NCA –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –û–ö")
        return cell

    except Exception as e:
        logger.error(f"‚ùå NCA creation from dynamic config failed: {e}")
        return None


def test_parameter_count_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")

    test_configs = [
        # –¢–µ—Å—Ç 1: –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        {
            "minimal_nca_cell": {
                "state_size": 6,
                "neighbor_count": 26,
                "hidden_dim": 2,
                "external_input_size": 1,
                "enable_lattice_scaling": False,
                "target_params": 50,
            }
        },
        # –¢–µ—Å—Ç 2: –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        {
            "minimal_nca_cell": {
                "state_size": 8,
                "neighbor_count": 26,
                "hidden_dim": 3,
                "external_input_size": 1,
                "enable_lattice_scaling": False,
                "target_params": 69,
            }
        },
        # –¢–µ—Å—Ç 3: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è <100 params
        {
            "minimal_nca_cell": {
                "state_size": 10,
                "neighbor_count": 26,
                "hidden_dim": 4,
                "external_input_size": 1,
                "enable_lattice_scaling": False,
                "target_params": 99,
            }
        },
    ]

    results = []

    for i, config in enumerate(test_configs, 1):
        try:
            logger.info(f"[TEST {i}] Config: {config['minimal_nca_cell']}")

            cell = create_nca_cell_from_config(config)
            total_params = sum(p.numel() for p in cell.parameters())
            info = cell.get_info()

            logger.info(f"[TEST {i}] Actual params: {total_params}")
            logger.info(
                f"[TEST {i}] Dimensions: state={info['state_size']}, hidden={info['hidden_dim']}"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã < 100
            assert total_params < 100, f"Test {i}: Too many params: {total_params}"

            results.append(
                {
                    "test": i,
                    "config": config["minimal_nca_cell"],
                    "params": total_params,
                    "efficiency": total_params
                    / config["minimal_nca_cell"]["target_params"],
                }
            )

            logger.info(f"‚úÖ Test {i}: PASSED ({total_params} params)")

        except Exception as e:
            logger.error(f"‚ùå Test {i} failed: {e}")
            return False

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
    for result in results:
        logger.info(
            f"   Test {result['test']}: {result['params']} params (efficiency: {result['efficiency']:.2f}x)"
        )

    logger.info("‚úÖ Parameter optimization: –û–ö")
    return True


def test_forward_pass_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ forward pass"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ forward pass...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        config = {
            "minimal_nca_cell": {
                "state_size": 8,
                "neighbor_count": 26,
                "hidden_dim": 3,
                "external_input_size": 1,
                "enable_lattice_scaling": False,
                "target_params": 69,
            }
        }

        cell = create_nca_cell_from_config(config)
        total_params = sum(p.numel() for p in cell.parameters())

        logger.info(f"[PERF] Cell params: {total_params}")

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        test_sizes = [4, 16, 64]  # Batch sizes

        for batch_size in test_sizes:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            neighbor_states = torch.randn(batch_size, 26, 8)
            own_state = torch.randn(batch_size, 8)
            external_input = torch.randn(batch_size, 1)

            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            import time

            start_time = time.time()

            with torch.no_grad():
                for _ in range(10):  # 10 –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    output = cell(neighbor_states, own_state, external_input)

            end_time = time.time()
            avg_time = (end_time - start_time) / 10 * 1000  # ms

            logger.info(f"[PERF] Batch {batch_size}: {avg_time:.2f}ms per forward pass")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞
            assert output.shape == (
                batch_size,
                8,
            ), f"Wrong output shape: {output.shape}"
            assert not torch.isnan(output).any(), "NaN in output"

        logger.info("‚úÖ Forward pass performance: –û–ö")
        return True

    except Exception as e:
        logger.error(f"‚ùå Performance test failed: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info(
        "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
    )
    logger.info("=" * 80)

    # –¢–µ—Å—Ç 1: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = test_dynamic_config_testing_mode()
    if not config:
        logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return False

    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ NCA –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cell = test_nca_from_dynamic_config(config)
    if not cell:
        logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å NCA –∫–ª–µ—Ç–∫—É")
        return False

    # –¢–µ—Å—Ç 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not test_parameter_count_optimization():
        logger.error("üí• –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∞")
        return False

    # –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if not test_forward_pass_performance():
        logger.error("üí• –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ—à–µ–ª")
        return False

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 80)
    logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    logger.info("=" * 80)
    logger.info("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    logger.info("   ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    logger.info("   ‚úÖ –†–µ–∂–∏–º testing –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    logger.info("   ‚úÖ MinimalNCACell —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å <100 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    logger.info("   ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    logger.info("   ‚úÖ Forward pass —Å—Ç–∞–±–∏–ª–µ–Ω –∏ –±—ã—Å—Ç—Ä")
    logger.info("")
    logger.info("üî• –ì–û–¢–û–í–û –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í –û–°–ù–û–í–ù–û–ô –ü–†–û–ï–ö–¢!")
    logger.info("üî• –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ GatedMLPCell")

    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
