"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–¥—É–ª—å Spatial Optimization
=======================================

–†–µ–∞–ª–∏–∑—É–µ—Ç –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
–¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è 3D Cellular Neural Network –¥–æ —Ä–µ—à–µ—Ç–æ–∫ 100√ó100√ó100+ (1M –∫–ª–µ—Ç–æ–∫).

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- HierarchicalSpatialIndex: –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
- LatticeChunker: —Ä–∞–∑–±–∏–≤–∫–∞ –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —á–∞—Å—Ç–∏
- MemoryPoolManager: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GPU –ø–∞–º—è—Ç—å—é
- ParallelSpatialProcessor: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–¶–µ–ª–µ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
- 1M –∫–ª–µ—Ç–æ–∫: < 100ms –Ω–∞ forward pass
- Memory usage: < 16GB GPU RAM –¥–ª—è RTX 5090
- Scalability: –¥–æ 666√ó666√ó333 —Ä–µ—à–µ—Ç–æ–∫

–ê–≤—Ç–æ—Ä: 3D Cellular Neural Network Project
–í–µ—Ä—Å–∏—è: 2.0.0 (Phase 5 - Spatial Optimization)
"""

import torch
import torch.nn as nn
import numpy as np
from typing import Dict, List, Tuple, Optional, Set, Iterator
from dataclasses import dataclass
import threading
import time
from concurrent.futures import ThreadPoolExecutor
import gc

from new_rebuild.config import get_project_config

from .spatial_hashing import MortonEncoder, SpatialHashGrid, Coordinates3D
from .position import Position3D, Coordinates3D
from ...config import get_project_config
from ...utils.logging import get_logger

logger = get_logger(__name__)


@dataclass
class ChunkInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ chunk'–µ —Ä–µ—à–µ—Ç–∫–∏"""

    chunk_id: int
    start_coords: Coordinates3D
    end_coords: Coordinates3D
    cell_indices: List[int]
    neighbor_chunks: List[int]  # ID —Å–æ—Å–µ–¥–Ω–∏—Ö chunk'–æ–≤
    memory_size_mb: float
    processing_time_ms: float = 0.0


@dataclass
class SpatialOptimConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""

    # Chunking parameters
    chunk_size: int = 64  # –†–∞–∑–º–µ—Ä chunk'–∞ (64√ó64√ó64 = 262k –∫–ª–µ—Ç–æ–∫)
    chunk_overlap: int = 8  # –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É chunk'–∞–º–∏ –¥–ª—è —Å–æ—Å–µ–¥—Å—Ç–≤–∞
    max_chunks_in_memory: int = 4  # –ú–∞–∫—Å–∏–º—É–º chunk'–æ–≤ –≤ GPU –ø–∞–º—è—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

    # Memory management
    memory_pool_size_gb: float = 12.0  # –†–∞–∑–º–µ—Ä memory pool (75% –æ—Ç 16GB)
    garbage_collect_frequency: int = 100  # GC –∫–∞–∂–¥—ã–µ N –æ–ø–µ—Ä–∞—Ü–∏–π
    prefetch_chunks: bool = True  # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö chunk'–æ–≤

    # Hierarchical indexing
    spatial_levels: int = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    min_cells_per_node: int = 1000  # –ú–∏–Ω–∏–º—É–º –∫–ª–µ—Ç–æ–∫ –≤ —É–∑–ª–µ –∏–Ω–¥–µ–∫—Å–∞
    max_search_radius: float = 50.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π

    # Parallel processing
    num_worker_threads: int = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ worker –ø–æ—Ç–æ–∫–æ–≤
    batch_size_per_thread: int = 10000  # –†–∞–∑–º–µ—Ä batch'–∞ –Ω–∞ –ø–æ—Ç–æ–∫
    enable_async_processing: bool = True  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

    # Performance monitoring
    enable_profiling: bool = True  # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    log_memory_usage: bool = True  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏


class HierarchicalSpatialIndex:
    """
    –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ

    –°–æ–∑–¥–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é spatial hash grid'–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    –≤ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö (1M+ –∫–ª–µ—Ç–æ–∫).
    """

    def __init__(self, dimensions: Coordinates3D, config: SpatialOptimConfig):
        self.dimensions = dimensions
        self.config = config

        # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é spatial grid'–æ–≤
        self.levels: List[SpatialHashGrid] = []
        self._build_hierarchy()

        logger.info(f"üèóÔ∏è HierarchicalSpatialIndex —Å–æ–∑–¥–∞–Ω—ã {len(self.levels)} —É—Ä–æ–≤–Ω–µ–π")

    def _build_hierarchy(self):
        """–°—Ç—Ä–æ–∏—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é spatial grid'–æ–≤"""
        max_dim = max(self.dimensions)

        for level in range(self.config.spatial_levels):
            # –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —É—Ä–æ–≤–Ω–µ–º
            cell_size = max(1, max_dim // (4 ** (level + 1)))

            grid = SpatialHashGrid(self.dimensions, cell_size)
            self.levels.append(grid)

            logger.debug(f"   Level {level}: cell_size={cell_size}")

    def insert_batch(self, coords_list: List[Coordinates3D], indices_list: List[int]):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç batch –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–æ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏"""
        for coords, idx in zip(coords_list, indices_list):
            for grid in self.levels:
                grid.insert(coords, idx)

    def query_hierarchical(self, coords: Coordinates3D, radius: float) -> Set[int]:
        """
        –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π

        –ù–∞—á–∏–Ω–∞–µ—Ç —Å –∫—Ä—É–ø–Ω—ã—Ö —è—á–µ–µ–∫, –∑–∞—Ç–µ–º —É—Ç–æ—á–Ω—è–µ—Ç –≤ –º–µ–ª–∫–∏—Ö
        """
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –∫—Ä—É–ø–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        candidates = set()

        for level_idx, grid in enumerate(self.levels):
            level_radius = radius * (
                2**level_idx
            )  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            level_candidates = set(grid.query_radius(coords, level_radius))

            if level_idx == 0:
                candidates = level_candidates
            else:
                # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
                candidates = candidates.intersection(level_candidates)

            # –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –º–∞–ª–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Ä–∞–Ω—å—à–µ
            if len(candidates) < self.config.min_cells_per_node:
                break

        return candidates


class LatticeChunker:
    """
    –†–∞–∑–±–∏–≤–∫–∞ –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫ –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ chunk'–∏

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ä–µ—à–µ—Ç–∫—É –Ω–∞ —á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ GPU –ø–∞–º—è—Ç—å,
    —Å —É—á–µ—Ç–æ–º —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É chunk'–∞–º–∏.
    """

    def __init__(self, dimensions: Coordinates3D, config: SpatialOptimConfig):
        self.dimensions = dimensions
        self.config = config
        self.pos_helper = Position3D(dimensions)

        self.chunks: List[ChunkInfo] = []
        self._create_chunks()

        logger.info(f"üß© LatticeChunker —Å–æ–∑–¥–∞–ª {len(self.chunks)} chunk'–æ–≤")

    def _create_chunks(self):
        """–°–æ–∑–¥–∞–µ—Ç chunk'–∏ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º"""
        x_dim, y_dim, z_dim = self.dimensions
        chunk_size = self.config.chunk_size

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ chunk'–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π –æ—Å–∏
        x_chunks = max(1, (x_dim + chunk_size - 1) // chunk_size)
        y_chunks = max(1, (y_dim + chunk_size - 1) // chunk_size)
        z_chunks = max(1, (z_dim + chunk_size - 1) // chunk_size)

        chunk_id = 0

        for z_idx in range(z_chunks):
            for y_idx in range(y_chunks):
                for x_idx in range(x_chunks):
                    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã chunk'–∞
                    start_x = x_idx * chunk_size
                    start_y = y_idx * chunk_size
                    start_z = z_idx * chunk_size

                    end_x = min(start_x + chunk_size, x_dim)
                    end_y = min(start_y + chunk_size, y_dim)
                    end_z = min(start_z + chunk_size, z_dim)

                    # –°–æ–∑–¥–∞–µ–º chunk info
                    chunk_info = self._create_chunk_info(
                        chunk_id, (start_x, start_y, start_z), (end_x, end_y, end_z)
                    )

                    self.chunks.append(chunk_info)
                    chunk_id += 1

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ chunk'–∏
        self._compute_neighbor_chunks()

    def _create_chunk_info(
        self, chunk_id: int, start: Coordinates3D, end: Coordinates3D
    ) -> ChunkInfo:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ chunk'–µ"""
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã –∫–ª–µ—Ç–æ–∫ –≤ chunk'–µ
        cell_indices = []

        for x in range(start[0], end[0]):
            for y in range(start[1], end[1]):
                for z in range(start[2], end[2]):
                    idx = self.pos_helper.to_linear_index((x, y, z))
                    cell_indices.append(idx)

        # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        num_cells = len(cell_indices)
        bytes_per_cell = 32 * 4  # 32D —Å–æ—Å—Ç–æ—è–Ω–∏–µ √ó 4 –±–∞–π—Ç–∞ –Ω–∞ float32
        memory_size_mb = (num_cells * bytes_per_cell) / (1024**2)

        return ChunkInfo(
            chunk_id=chunk_id,
            start_coords=start,
            end_coords=end,
            cell_indices=cell_indices,
            neighbor_chunks=[],
            memory_size_mb=memory_size_mb,
        )

    def _compute_neighbor_chunks(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ chunk'–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chunk'–∞"""
        for chunk in self.chunks:
            neighbors = []

            for other_chunk in self.chunks:
                if chunk.chunk_id == other_chunk.chunk_id:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è—é—Ç—Å—è –ª–∏ chunk'–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏
                if self._are_chunks_neighbors(chunk, other_chunk):
                    neighbors.append(other_chunk.chunk_id)

            chunk.neighbor_chunks = neighbors

        avg_neighbors = sum(len(c.neighbor_chunks) for c in self.chunks) / len(
            self.chunks
        )
        logger.debug(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–Ω–∏—Ö chunk'–æ–≤: {avg_neighbors:.1f}")

    def _are_chunks_neighbors(self, chunk1: ChunkInfo, chunk2: ChunkInfo) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–∞ chunk'–∞ —Å–æ—Å–µ–¥–Ω–∏–º–∏"""
        overlap = self.config.chunk_overlap

        # –†–∞—Å—à–∏—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã chunk'–∞ –Ω–∞ overlap
        c1_start = (
            chunk1.start_coords[0] - overlap,
            chunk1.start_coords[1] - overlap,
            chunk1.start_coords[2] - overlap,
        )
        c1_end = (
            chunk1.end_coords[0] + overlap,
            chunk1.end_coords[1] + overlap,
            chunk1.end_coords[2] + overlap,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        return (
            c1_start[0] < chunk2.end_coords[0]
            and c1_end[0] > chunk2.start_coords[0]
            and c1_start[1] < chunk2.end_coords[1]
            and c1_end[1] > chunk2.start_coords[1]
            and c1_start[2] < chunk2.end_coords[2]
            and c1_end[2] > chunk2.start_coords[2]
        )

    def get_chunk_by_coords(self, coords: Coordinates3D) -> Optional[ChunkInfo]:
        """–ù–∞—Ö–æ–¥–∏—Ç chunk –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        for chunk in self.chunks:
            if (
                chunk.start_coords[0] <= coords[0] < chunk.end_coords[0]
                and chunk.start_coords[1] <= coords[1] < chunk.end_coords[1]
                and chunk.start_coords[2] <= coords[2] < chunk.end_coords[2]
            ):
                return chunk
        return None

    def get_processing_schedule(self) -> List[List[int]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ chunk'–æ–≤

        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç chunk'–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏
        """
        schedule = []
        processed = set()

        while len(processed) < len(self.chunks):
            batch = []
            batch_memory = 0.0

            for chunk in self.chunks:
                if chunk.chunk_id in processed:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ chunk –≤ –ø–∞–º—è—Ç—å
                if (
                    batch_memory + chunk.memory_size_mb
                    < self.config.memory_pool_size_gb * 1024
                ):
                    batch.append(chunk.chunk_id)
                    processed.add(chunk.chunk_id)
                    batch_memory += chunk.memory_size_mb

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä batch'–∞
                if len(batch) >= self.config.max_chunks_in_memory:
                    break

            if batch:
                schedule.append(batch)
            else:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ chunk'–∞, –±–µ—Ä–µ–º –æ–¥–∏–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                remaining = [
                    c.chunk_id for c in self.chunks if c.chunk_id not in processed
                ]
                if remaining:
                    schedule.append([remaining[0]])
                    processed.add(remaining[0])

        logger.info(f"üìÖ –°–æ–∑–¥–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {len(schedule)} batch'–µ–π")
        return schedule


class MemoryPoolManager:
    """
    –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GPU –ø–∞–º—è—Ç—å—é

    –†–µ–∞–ª–∏–∑—É–µ—Ç memory pool –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–Ω–∑–æ—Ä–æ–≤
    –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ memory fragmentation.
    """

    def __init__(self, config: SpatialOptimConfig):
        self.config = config
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

        # Memory pools –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        self.pools: Dict[str, List[torch.Tensor]] = {}
        self.allocated_memory = 0.0
        self.peak_memory = 0.0

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è GC
        self.allocation_count = 0

        logger.info(f"üíæ MemoryPoolManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (device: {self.device})")

    def get_tensor(
        self, shape: Tuple[int, ...], dtype: torch.dtype = torch.float32
    ) -> torch.Tensor:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–Ω–∑–æ—Ä –∏–∑ pool'–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π"""
        key = f"{shape}_{dtype}"

        if key in self.pools and self.pools[key]:
            tensor = self.pools[key].pop()
            tensor.zero_()  # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            return tensor

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–Ω–∑–æ—Ä
        tensor = torch.zeros(shape, dtype=dtype, device=self.device)
        self._track_allocation(tensor)

        return tensor

    def return_tensor(self, tensor: torch.Tensor):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–Ω–∑–æ—Ä –≤ pool"""
        if tensor.device != self.device:
            return  # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—ã —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        key = f"{tuple(tensor.shape)}_{tensor.dtype}"

        if key not in self.pools:
            self.pools[key] = []

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä pool'–∞
        if len(self.pools[key]) < 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —Ç–µ–Ω–∑–æ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            self.pools[key].append(tensor.detach())

    def _track_allocation(self, tensor: torch.Tensor):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
        size_mb = tensor.numel() * tensor.element_size() / (1024**2)
        self.allocated_memory += size_mb
        self.peak_memory = max(self.peak_memory, self.allocated_memory)

        self.allocation_count += 1

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π garbage collection
        if self.allocation_count % self.config.garbage_collect_frequency == 0:
            self.garbage_collect()

    def garbage_collect(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        if self.device.type == "cuda":
            torch.cuda.empty_cache()

        gc.collect()

        if self.config.log_memory_usage:
            current_memory = (
                torch.cuda.memory_allocated() / (1024**2)
                if torch.cuda.is_available()
                else 0
            )
            logger.debug(
                f"üóëÔ∏è Memory GC: current={current_memory:.1f}MB, peak={self.peak_memory:.1f}MB"
            )

    def get_memory_stats(self) -> Dict[str, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        if torch.cuda.is_available():
            current_cuda = torch.cuda.memory_allocated() / (1024**2)
            max_cuda = torch.cuda.max_memory_allocated() / (1024**2)
        else:
            current_cuda = max_cuda = 0.0

        return {
            "current_mb": current_cuda,
            "peak_mb": max_cuda,
            "pool_allocated_mb": self.allocated_memory,
            "pool_peak_mb": self.peak_memory,
            "num_pools": len(self.pools),
            "total_pooled_tensors": sum(len(pool) for pool in self.pools.values()),
        }


class ParallelSpatialProcessor:
    """
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É chunk'–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º multiple threads
    –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """

    def __init__(
        self,
        chunker: LatticeChunker,
        spatial_index: HierarchicalSpatialIndex,
        memory_manager: MemoryPoolManager,
        config: SpatialOptimConfig,
    ):
        self.chunker = chunker
        self.spatial_index = spatial_index
        self.memory_manager = memory_manager
        self.config = config

        # Thread pool –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.executor = ThreadPoolExecutor(max_workers=config.num_worker_threads)

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å tracking
        self.processing_stats = {
            "total_chunks_processed": 0,
            "total_processing_time": 0.0,
            "avg_chunk_time": 0.0,
        }

        logger.info(
            f"‚ö° ParallelSpatialProcessor –≥–æ—Ç–æ–≤ ({config.num_worker_threads} –ø–æ—Ç–æ–∫–æ–≤)"
        )

    def process_lattice_parallel(
        self, states: torch.Tensor, neighbor_processor_fn
    ) -> torch.Tensor:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–π —Ä–µ—à–µ—Ç–∫–∏ –ø–æ chunk'–∞–º
        """
        start_time = time.time()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        schedule = self.chunker.get_processing_schedule()

        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä
        output_states = self.memory_manager.get_tensor(states.shape, states.dtype)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π batch chunk'–æ–≤
        for batch_idx, chunk_ids in enumerate(schedule):
            batch_start = time.time()

            if self.config.enable_async_processing and len(chunk_ids) > 1:
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö chunk'–æ–≤
                futures = []
                for chunk_id in chunk_ids:
                    future = self.executor.submit(
                        self._process_chunk_async,
                        chunk_id,
                        states,
                        neighbor_processor_fn,
                    )
                    futures.append((chunk_id, future))

                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for chunk_id, future in futures:
                    chunk_output = future.result()
                    self._merge_chunk_output(output_states, chunk_id, chunk_output)

            else:
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                for chunk_id in chunk_ids:
                    chunk_output = self._process_chunk_sync(
                        chunk_id, states, neighbor_processor_fn
                    )
                    self._merge_chunk_output(output_states, chunk_id, chunk_output)

            batch_time = time.time() - batch_start
            logger.debug(
                f"üì¶ Batch {batch_idx+1}/{len(schedule)}: {len(chunk_ids)} chunk'–æ–≤ –∑–∞ {batch_time:.3f}s"
            )

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            if batch_idx % 2 == 0:
                self.memory_manager.garbage_collect()

        total_time = time.time() - start_time
        self._update_processing_stats(len(schedule), total_time)

        logger.info(f"üèÅ Lattice processing –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.3f}s")
        return output_states

    def _process_chunk_async(
        self, chunk_id: int, states: torch.Tensor, neighbor_processor_fn
    ) -> torch.Tensor:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ chunk'–∞"""
        return self._process_chunk_sync(chunk_id, states, neighbor_processor_fn)

    def _process_chunk_sync(
        self, chunk_id: int, states: torch.Tensor, neighbor_processor_fn
    ) -> torch.Tensor:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ chunk'–∞"""
        chunk = self.chunker.chunks[chunk_id]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫ chunk'–∞
        chunk_indices = torch.tensor(chunk.cell_indices, device=states.device)
        chunk_states = states[chunk_indices]

        # –ù–∞—Ö–æ–¥–∏–º —Å–æ—Å–µ–¥–µ–π –¥–ª—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ chunk'–∞ (–≤–∫–ª—é—á–∞—è –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö chunk'–æ–≤)
        chunk_neighbors = self._get_chunk_neighbors(chunk, states)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º neighbor processor
        chunk_output = neighbor_processor_fn(chunk_states, chunk_neighbors)

        return chunk_output

    def _get_chunk_neighbors(
        self, chunk: ChunkInfo, states: torch.Tensor
    ) -> torch.Tensor:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å–µ–¥–µ–π –¥–ª—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –≤ chunk'–µ"""
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–Ω–∑–æ—Ä —Å–æ—Å–µ–¥–µ–π
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç complex neighbor gathering
        device = states.device
        num_cells = len(chunk.cell_indices)
        neighbor_count = 26  # Moore neighborhood
        state_size = states.shape[-1]

        return self.memory_manager.get_tensor((num_cells, neighbor_count, state_size))

    def _merge_chunk_output(
        self, output_states: torch.Tensor, chunk_id: int, chunk_output: torch.Tensor
    ):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ chunk'–∞ —Å –æ–±—â–∏–º –≤—ã—Ö–æ–¥–æ–º"""
        chunk = self.chunker.chunks[chunk_id]
        chunk_indices = torch.tensor(chunk.cell_indices, device=output_states.device)

        output_states[chunk_indices] = chunk_output

    def _update_processing_stats(self, num_batches: int, total_time: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.processing_stats["total_chunks_processed"] += num_batches
        self.processing_stats["total_processing_time"] += total_time
        self.processing_stats["avg_chunk_time"] = self.processing_stats[
            "total_processing_time"
        ] / max(1, self.processing_stats["total_chunks_processed"])

    def get_performance_stats(self) -> Dict[str, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        memory_stats = self.memory_manager.get_memory_stats()

        return {
            **self.processing_stats,
            **memory_stats,
            "num_chunks": len(self.chunker.chunks),
            "avg_chunk_size": np.mean(
                [len(c.cell_indices) for c in self.chunker.chunks]
            ),
            "total_cells": sum(len(c.cell_indices) for c in self.chunker.chunks),
        }

    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É executor'–∞"""
        self.executor.shutdown(wait=True)


class SpatialOptimizer:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è spatial optimization

    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    """

    def __init__(
        self, dimensions: Coordinates3D, config: Optional[SpatialOptimConfig] = None
    ):
        self.dimensions = dimensions
        self.config = config or SpatialOptimConfig()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.spatial_index = HierarchicalSpatialIndex(dimensions, self.config)
        self.chunker = LatticeChunker(dimensions, self.config)
        self.memory_manager = MemoryPoolManager(self.config)
        self.parallel_processor = ParallelSpatialProcessor(
            self.chunker, self.spatial_index, self.memory_manager, self.config
        )

        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        self._build_spatial_index()

        logger.info(f"üöÄ SpatialOptimizer –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–µ—à–µ—Ç–∫–∏ {dimensions}")
        logger.info(f"   üìä Chunks: {len(self.chunker.chunks)}")
        logger.info(f"   üíæ Memory pool: {self.config.memory_pool_size_gb:.1f}GB")
        logger.info(f"   ‚ö° Threads: {self.config.num_worker_threads}")

    def _build_spatial_index(self):
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫"""
        self.pos_helper = Position3D(self.dimensions)
        all_coords = self.pos_helper.get_all_coordinates()
        all_indices = list(range(len(all_coords)))

        self.spatial_index.insert_batch(all_coords, all_indices)
        logger.debug(f"üóÇÔ∏è –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {len(all_coords)} –∫–ª–µ—Ç–æ–∫")

    def optimize_lattice_forward(
        self, states: torch.Tensor, neighbor_processor_fn
    ) -> torch.Tensor:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π forward pass —á–µ—Ä–µ–∑ —Ä–µ—à–µ—Ç–∫—É

        Args:
            states: –¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫ [num_cells, state_size]
            neighbor_processor_fn: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å–µ–¥–µ–π

        Returns:
            torch.Tensor: –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫
        """
        if self.config.enable_profiling:
            start_time = time.time()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º parallel processor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        output_states = self.parallel_processor.process_lattice_parallel(
            states, neighbor_processor_fn
        )

        if self.config.enable_profiling:
            processing_time = time.time() - start_time
            stats = self.get_performance_stats()

            logger.info(f"‚ö° Optimized forward pass –∑–∞–≤–µ—Ä—à–µ–Ω:")
            logger.info(f"   üïê –í—Ä–µ–º—è: {processing_time:.3f}s")
            logger.info(f"   üìä –ö–ª–µ—Ç–æ–∫: {stats['total_cells']:,}")
            logger.info(f"   üíæ –ü–∞–º—è—Ç—å: {stats['current_mb']:.1f}MB")

        return output_states

    def find_neighbors_optimized(
        self, coords: Coordinates3D, radius: float
    ) -> List[int]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π"""
        return list(self.spatial_index.query_hierarchical(coords, radius))

    def get_performance_stats(self) -> Dict[str, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return self.parallel_processor.get_performance_stats()

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.parallel_processor.shutdown()
        self.memory_manager.garbage_collect()

        logger.info("üßπ SpatialOptimizer cleanup –∑–∞–≤–µ—Ä—à–µ–Ω")


# –£—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏


def create_spatial_optimizer(dimensions: Coordinates3D) -> SpatialOptimizer:
    """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    project_config = get_project_config()

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ—à–µ—Ç–∫–∏
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]

    if total_cells > 1_000_000:  # 1M+ –∫–ª–µ—Ç–æ–∫
        config = SpatialOptimConfig(
            chunk_size=64,
            memory_pool_size_gb=12.0,
            num_worker_threads=6,
            enable_async_processing=True,
        )
    elif total_cells > 100_000:  # 100k+ –∫–ª–µ—Ç–æ–∫
        config = SpatialOptimConfig(
            chunk_size=32,
            memory_pool_size_gb=8.0,
            num_worker_threads=4,
            enable_async_processing=True,
        )
    else:  # –ú–∞–ª—ã–µ —Ä–µ—à–µ—Ç–∫–∏
        config = SpatialOptimConfig(
            chunk_size=16,
            memory_pool_size_gb=4.0,
            num_worker_threads=2,
            enable_async_processing=False,
        )

    return SpatialOptimizer(dimensions, config)


def estimate_memory_requirements(dimensions: Coordinates3D) -> Dict[str, float]:
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ä–µ—à–µ—Ç–∫–∏"""
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]

    # –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    state_size = 32  # float32
    bytes_per_cell = state_size * 4
    base_memory_gb = (total_cells * bytes_per_cell) / (1024**3)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è neighbor states, gradients, etc.
    neighbor_memory_gb = base_memory_gb * 2.0  # ~26 —Å–æ—Å–µ–¥–µ–π
    gradient_memory_gb = base_memory_gb * 1.0  # –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
    overhead_memory_gb = base_memory_gb * 0.5  # overhead

    total_memory_gb = (
        base_memory_gb + neighbor_memory_gb + gradient_memory_gb + overhead_memory_gb
    )

    return {
        "base_memory_gb": base_memory_gb,
        "neighbor_memory_gb": neighbor_memory_gb,
        "gradient_memory_gb": gradient_memory_gb,
        "overhead_memory_gb": overhead_memory_gb,
        "total_memory_gb": total_memory_gb,
        "recommended_gpu_memory_gb": total_memory_gb * 1.2,  # 20% –∑–∞–ø–∞—Å
    }


class MoESpatialOptimizer(SpatialOptimizer):
    """
    Spatial Optimizer –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å MoE Connection Processor
    –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–∫–∞—Ö.
    """

    def __init__(
        self,
        dimensions: Coordinates3D,
        moe_processor=None,
        config: Optional[SpatialOptimConfig] = None,
        device: Optional[torch.device] = None,
    ):
        super().__init__(dimensions, config)

        self.moe_processor = moe_processor
        self.expert_cache = {}  # –ö—ç—à –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ chunk'–∞–º

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        self.device = device or torch.device(
            "cuda" if torch.cuda.is_available() else "cpu"
        )

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if hasattr(self.moe_processor, "to"):
            self.moe_processor.to(self.device)

        # MoE-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ ProjectConfig
        from new_rebuild.config.project_config import get_project_config

        project_config = get_project_config()

        self.connection_distributions = {
            "local": project_config.local_connections_ratio,
            "functional": project_config.functional_connections_ratio,
            "distant": project_config.distant_connections_ratio,
        }

        logger.info(f"üîß MoESpatialOptimizer –≥–æ—Ç–æ–≤ –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        logger.info(f"   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π: {self.connection_distributions}")

    def optimize_moe_forward(self, states: torch.Tensor, moe_processor) -> torch.Tensor:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π forward pass –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç chunking + –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        """
        if self.config.enable_profiling:
            start_time = time.time()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ chunks —Å MoE-aware –ª–æ–≥–∏–∫–æ–π
        output_states = self._process_moe_chunks(states, moe_processor)

        if self.config.enable_profiling:
            processing_time = time.time() - start_time
            logger.info(f"‚ö° MoE optimized forward pass: {processing_time:.3f}s")

        return output_states

    def _process_moe_chunks(self, states: torch.Tensor, moe_processor) -> torch.Tensor:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç chunks —Å —É—á–µ—Ç–æ–º MoE —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""

        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ states –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        if states.device != self.device:
            states = states.to(self.device)

        total_cells = states.shape[0]
        output_states = torch.zeros_like(states, device=self.device)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ chunk'–æ–≤
        schedule = self.chunker.get_processing_schedule()

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ chunk'–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 3 batch'–∞)
        max_batches = min(3, len(schedule))

        for batch_idx, chunk_batch in enumerate(schedule[:max_batches]):
            batch_results = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º batch chunk'–æ–≤ (–º–∞–∫—Å–∏–º—É–º 2 chunk'–∞ –Ω–∞ batch)
            for chunk_id in chunk_batch[:2]:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç chunk'–∞ –ø–æ ID
                chunk = self.chunker.chunks[chunk_id]
                chunk_states = states[chunk.cell_indices].to(self.device)

                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è MoE –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                chunk_neighbors = self._get_moe_neighbors_for_chunk_fast(chunk)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ MoE processor
                chunk_result = moe_processor(
                    chunk_states,
                    chunk_neighbors,
                    chunk_info=chunk,  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
                )

                batch_results.append((chunk.cell_indices, chunk_result))

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã batch'–∞
            for indices, result in batch_results:
                output_states[indices] = result

        return output_states

    def _get_moe_neighbors_for_chunk(self, chunk: ChunkInfo) -> Dict[str, torch.Tensor]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å–µ–¥–µ–π –¥–ª—è chunk'–∞ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º

        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏: 'local', 'functional', 'distant'
        """
        chunk_neighbors = {"local": [], "functional": [], "distant": []}

        for cell_idx in chunk.cell_indices:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –∫–ª–µ—Ç–∫–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º
            adaptive_radius = min(
                project_config.calculate_adaptive_radius(),
                self.config.max_search_radius,
            )
            neighbors = self.find_neighbors_optimized(
                self.pos_helper.to_3d_coordinates(cell_idx),
                radius=adaptive_radius,
            )

            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–µ–π –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º
            classified = self._classify_neighbors_for_moe(cell_idx, neighbors)

            chunk_neighbors["local"].extend(classified["local"])
            chunk_neighbors["functional"].extend(classified["functional"])
            chunk_neighbors["distant"].extend(classified["distant"])

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–Ω–∑–æ—Ä—ã
        for expert_type in chunk_neighbors:
            if chunk_neighbors[expert_type]:
                chunk_neighbors[expert_type] = torch.tensor(
                    chunk_neighbors[expert_type],
                    dtype=torch.long,
                    device=(
                        self.config.device if hasattr(self.config, "device") else "cpu"
                    ),
                )
            else:
                chunk_neighbors[expert_type] = torch.empty(0, dtype=torch.long)

        return chunk_neighbors

    def _get_moe_neighbors_for_chunk_fast(
        self, chunk: ChunkInfo
    ) -> Dict[str, torch.Tensor]:
        """
        –ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∫–ª–µ—Ç–æ–∫ chunk'–∞
        """
        chunk_neighbors = {"local": [], "functional": [], "distant": []}

        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∫–ª–µ—Ç–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cells = chunk.cell_indices[: min(10, len(chunk.cell_indices))]

        for cell_idx in test_cells:
            # –ü–æ–ª—É—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
            adaptive_radius = min(
                project_config.calculate_adaptive_radius()
                * 0.5,  # 50% –æ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
                self.config.max_search_radius,
            )
            neighbors = self.find_neighbors_optimized(
                self.pos_helper.to_3d_coordinates(cell_idx),
                radius=adaptive_radius,
            )[
                :26
            ]  # –ú–∞–∫—Å–∏–º—É–º 26 —Å–æ—Å–µ–¥–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤

            # –ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Å–µ–¥–µ–π
            if neighbors:
                local_count = max(1, len(neighbors) // 10)  # 10%
                functional_count = max(1, len(neighbors) // 2)  # 50%

                chunk_neighbors["local"].extend(neighbors[:local_count])
                chunk_neighbors["functional"].extend(
                    neighbors[local_count : local_count + functional_count]
                )
                chunk_neighbors["distant"].extend(
                    neighbors[local_count + functional_count :]
                )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–Ω–∑–æ—Ä—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        for expert_type in chunk_neighbors:
            if chunk_neighbors[expert_type]:
                chunk_neighbors[expert_type] = torch.tensor(
                    chunk_neighbors[expert_type],
                    dtype=torch.long,
                    device=self.device,
                )
            else:
                chunk_neighbors[expert_type] = torch.empty(
                    0, dtype=torch.long, device=self.device
                )

        return chunk_neighbors

    def _classify_neighbors_for_moe(
        self, cell_idx: int, neighbors: List[int]
    ) -> Dict[str, List[int]]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–æ—Å–µ–¥–µ–π –ø–æ —Ç–∏–ø–∞–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""

        if not neighbors:
            return {"local": [], "functional": [], "distant": []}

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–µ–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        cell_coords = self.pos_helper.to_3d_coordinates(cell_idx)
        neighbor_distances = []

        for neighbor_idx in neighbors:
            neighbor_coords = self.pos_helper.to_3d_coordinates(neighbor_idx)
            distance = (
                sum((a - b) ** 2 for a, b in zip(cell_coords, neighbor_coords)) ** 0.5
            )
            neighbor_distances.append((distance, neighbor_idx))

        neighbor_distances.sort()  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º
        total_neighbors = len(neighbor_distances)
        local_count = max(
            1, int(total_neighbors * self.connection_distributions["local"])
        )
        functional_count = max(
            1, int(total_neighbors * self.connection_distributions["functional"])
        )

        classified = {
            "local": [idx for _, idx in neighbor_distances[:local_count]],
            "functional": [
                idx
                for _, idx in neighbor_distances[
                    local_count : local_count + functional_count
                ]
            ],
            "distant": [
                idx for _, idx in neighbor_distances[local_count + functional_count :]
            ],
        }

        return classified

    def estimate_moe_memory_requirements(
        self, dimensions: Coordinates3D
    ) -> Dict[str, float]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏ –¥–ª—è MoE + Spatial Optimization"""

        base_requirements = estimate_memory_requirements(dimensions)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è MoE
        total_cells = dimensions[0] * dimensions[1] * dimensions[2]

        moe_overhead = {
            "expert_states_gb": total_cells * 32 * 4 * 3 / (1024**3),  # 3 —ç–∫—Å–ø–µ—Ä—Ç–∞
            "connection_classification_gb": total_cells
            * 26
            * 4
            / (1024**3),  # –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–≤—è–∑–µ–π
            "spatial_index_gb": total_cells * 8 / (1024**3),  # –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            "chunk_coordination_gb": 0.1,  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è chunk'–æ–≤
        }

        # –û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        total_moe_overhead = sum(moe_overhead.values())

        result = base_requirements.copy()
        result.update(moe_overhead)
        result["total_memory_gb"] += total_moe_overhead
        result["recommended_gpu_memory_gb"] = (
            result["total_memory_gb"] * 1.3
        )  # 30% –∑–∞–ø–∞—Å

        return result


# –£—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è MoE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏


def create_moe_spatial_optimizer(
    dimensions: Coordinates3D, moe_processor=None, device: Optional[torch.device] = None
) -> MoESpatialOptimizer:
    """–°–æ–∑–¥–∞–µ—Ç MoE-aware spatial optimizer —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""

    project_config = get_project_config()
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    if device is None:
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è MoE (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –¥–ª—è –ø–∞–º—è—Ç–∏)
    if total_cells > 1_000_000:  # 1M+ –∫–ª–µ—Ç–æ–∫
        config = SpatialOptimConfig(
            chunk_size=32,  # –ú–µ–Ω—å—à–µ chunk'–∏ –¥–ª—è MoE
            memory_pool_size_gb=16.0,  # –ë–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            num_worker_threads=8,  # –ë–æ–ª—å—à–µ threads –¥–ª—è MoE
            enable_async_processing=True,
            enable_profiling=True,
            max_search_radius=50.0,  # –ë–æ–ª—å—à–æ–π —Ä–∞–¥–∏—É—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫
        )
    elif total_cells > 100_000:  # 100k+ –∫–ª–µ—Ç–æ–∫
        config = SpatialOptimConfig(
            chunk_size=24,
            memory_pool_size_gb=12.0,
            num_worker_threads=6,
            enable_async_processing=True,
            max_search_radius=20.0,  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–¥–∏—É—Å
        )
    else:  # –ú–∞–ª—ã–µ —Ä–µ—à–µ—Ç–∫–∏ (<100k –∫–ª–µ—Ç–æ–∫) - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
        config = SpatialOptimConfig(
            chunk_size=16,
            memory_pool_size_gb=4.0,  # –ú–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            num_worker_threads=2,  # –ú–µ–Ω—å—à–µ threads
            enable_async_processing=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            max_search_radius=8.0,  # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–¥–∏—É—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            spatial_levels=2,  # –ú–µ–Ω—å—à–µ —É—Ä–æ–≤–Ω–µ–π –∏–Ω–¥–µ–∫—Å–∞
            min_cells_per_node=100,  # –ú–µ–Ω—å—à–µ –∫–ª–µ—Ç–æ–∫ –≤ —É–∑–ª–µ
        )

    return MoESpatialOptimizer(dimensions, moe_processor, config, device)


def estimate_moe_memory_requirements(dimensions: Coordinates3D) -> Dict[str, float]:
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏ –¥–ª—è MoE + Spatial Optimization –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""

    total_cells = dimensions[0] * dimensions[1] * dimensions[2]

    # –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    base_memory_gb = total_cells * 32 * 4 / (1024**3)  # 32D —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # MoE —ç–∫—Å–ø–µ—Ä—Ç—ã
    moe_experts_gb = (
        total_cells
        * (2.195 + 15.220 + 3.138)  # SimpleLinear + GNN + CNF (–≤ –∫–∏–ª–æ–ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö)
        * 4
        / (1024**3)
    )

    # Gating Network
    gating_gb = total_cells * 0.815 * 4 / (1024**3)

    # Spatial optimization overhead
    spatial_gb = total_cells * 8 / (1024**3)  # –∏–Ω–¥–µ–∫—Å—ã –∏ chunk'–∏

    # Neighbor connections
    neighbors_gb = total_cells * 26 * 4 / (1024**3)  # –¥–æ 26 —Å–æ—Å–µ–¥–µ–π –Ω–∞ –∫–ª–µ—Ç–∫—É

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    expert_buffers_gb = total_cells * 32 * 4 * 3 / (1024**3)  # –ø–æ –±—É—Ñ–µ—Ä—É –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞

    total_gb = (
        base_memory_gb
        + moe_experts_gb
        + gating_gb
        + spatial_gb
        + neighbors_gb
        + expert_buffers_gb
    )

    return {
        "base_memory_gb": base_memory_gb,
        "moe_experts_gb": moe_experts_gb,
        "gating_network_gb": gating_gb,
        "spatial_optimization_gb": spatial_gb,
        "neighbor_memory_gb": neighbors_gb,
        "expert_buffers_gb": expert_buffers_gb,
        "total_memory_gb": total_gb,
        "recommended_gpu_memory_gb": total_gb * 1.4,  # 40% –∑–∞–ø–∞—Å –¥–ª—è MoE
        "estimated_cells": total_cells,
    }
