#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ device mismatch –≤ GPU Optimized Euler Solver
"""

import torch
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def debug_adaptive_integration():
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç adaptive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ device issues"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ device mismatch –≤ adaptive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    try:
        from core.cnf import create_gpu_optimized_euler_solver, AdaptiveMethod
        
        # –°–æ–∑–¥–∞–µ–º solver
        solver = create_gpu_optimized_euler_solver(
            adaptive_method=AdaptiveMethod.LIPSCHITZ_BASED,
            memory_efficient=True
        )
        
        print(f"‚úÖ Solver —Å–æ–∑–¥–∞–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {solver.device}")
        
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π
        def simple_derivative(t, states):
            print(f"  derivative_fn called with t device: {t.device if torch.is_tensor(t) else 'scalar'}")
            print(f"  derivative_fn called with states device: {states.device}")
            result = -0.1 * states  # –ü—Ä–æ—Å—Ç–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
            print(f"  derivative_fn result device: {result.device}")
            return result
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        batch_size = 2
        state_size = 4
        initial_states = torch.randn(batch_size, state_size)
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"  initial_states device: {initial_states.device}")
        print(f"  initial_states shape: {initial_states.shape}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º adaptive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        print(f"üöÄ –ó–∞–ø—É—Å–∫ batch_integrate_adaptive...")
        result = solver.batch_integrate_adaptive(
            simple_derivative,
            initial_states,
            integration_time=0.1,  # –ö–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            max_steps=2,           # –í—Å–µ–≥–æ 2 —à–∞–≥–∞
            return_trajectory=False
        )
        
        print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"  final_state device: {result.final_state.device}")
        print(f"  final_state shape: {result.final_state.shape}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if 'solver' in locals():
            solver.cleanup()

if __name__ == "__main__":
    debug_adaptive_integration()