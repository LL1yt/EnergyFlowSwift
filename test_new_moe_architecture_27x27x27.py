#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã 27√ó27√ó27
=====================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É:
- GatingNetwork –∑–∞–º–µ–Ω—è–µ—Ç NCA –Ω–µ–π—Ä–æ–Ω
- 3 —ç–∫—Å–ø–µ—Ä—Ç–∞: SimpleLinear (10%), GNN (55%), LightweightCNF (35%)
- –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
- –†–µ—à–µ—Ç–∫–∞ 27√ó27√ó27 = 19,683 –∫–ª–µ—Ç–æ–∫
"""

import torch
import torch.nn as nn
from new_rebuild.config import get_project_config
from new_rebuild.core.moe import MoEConnectionProcessor
from new_rebuild.core.lattice import create_lattice


def test_config_moe_parameters():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ MoE –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MoE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    config = get_project_config()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ MoE –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    assert (
        config.architecture_type == "moe"
    ), f"–û–∂–∏–¥–∞–ª–∏ 'moe', –ø–æ–ª—É—á–∏–ª–∏ '{config.architecture_type}'"
    assert config.enable_moe == True, "MoE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    assert (
        config.local_expert_params == 2059
    ), f"Local expert: –æ–∂–∏–¥–∞–ª–∏ 2059, –ø–æ–ª—É—á–∏–ª–∏ {config.local_expert_params}"
    assert (
        config.functional_expert_params == 8233
    ), f"Functional expert: –æ–∂–∏–¥–∞–ª–∏ 8233, –ø–æ–ª—É—á–∏–ª–∏ {config.functional_expert_params}"
    assert (
        config.distant_expert_params == 4000
    ), f"Distant expert: –æ–∂–∏–¥–∞–ª–∏ 4000, –ø–æ–ª—É—á–∏–ª–∏ {config.distant_expert_params}"
    assert (
        config.gating_params == 808
    ), f"Gating network: –æ–∂–∏–¥–∞–ª–∏ 808, –ø–æ–ª—É—á–∏–ª–∏ {config.gating_params}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π
    assert (
        config.local_connections_ratio == 0.10
    ), f"Local ratio: –æ–∂–∏–¥–∞–ª–∏ 0.10, –ø–æ–ª—É—á–∏–ª–∏ {config.local_connections_ratio}"
    assert (
        config.functional_connections_ratio == 0.55
    ), f"Functional ratio: –æ–∂–∏–¥–∞–ª–∏ 0.55, –ø–æ–ª—É—á–∏–ª–∏ {config.functional_connections_ratio}"
    assert (
        config.distant_connections_ratio == 0.35
    ), f"Distant ratio: –æ–∂–∏–¥–∞–ª–∏ 0.35, –ø–æ–ª—É—á–∏–ª–∏ {config.distant_connections_ratio}"

    total_ratio = (
        config.local_connections_ratio
        + config.functional_connections_ratio
        + config.distant_connections_ratio
    )
    assert (
        abs(total_ratio - 1.0) < 1e-6
    ), f"–°—É–º–º–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1.0, –ø–æ–ª—É—á–∏–ª–∏ {total_ratio}"

    print(f"‚úÖ MoE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:")
    print(f"   - Architecture: {config.architecture_type}")
    print(
        f"   - Local Expert: {config.local_expert_params} params ({config.local_connections_ratio*100:.0f}%)"
    )
    print(
        f"   - Functional Expert: {config.functional_expert_params} params ({config.functional_connections_ratio*100:.0f}%)"
    )
    print(
        f"   - Distant Expert: {config.distant_expert_params} params ({config.distant_connections_ratio*100:.0f}%)"
    )
    print(f"   - Gating Network: {config.gating_params} params")


def test_moe_processor_creation():
    """–¢–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ MoE Connection Processor"""
    print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è MoE Processor...")

    config = get_project_config()

    # –°–æ–∑–¥–∞–µ–º MoE processor
    moe_processor = MoEConnectionProcessor(
        state_size=config.gating_state_size,
        neighbors=config.effective_neighbors,
        device=config.device,
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    assert moe_processor is not None, "MoE processor –Ω–µ —Å–æ–∑–¥–∞–Ω"
    assert hasattr(moe_processor, "gating_network"), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç gating network"
    assert hasattr(moe_processor, "local_expert"), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç local expert"
    assert hasattr(moe_processor, "functional_expert"), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç functional expert"
    assert hasattr(moe_processor, "distant_expert"), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç distant expert"

    print(f"‚úÖ MoE Processor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
    print(f"   - State size: {config.gating_state_size}")
    print(f"   - Neighbors: {config.effective_neighbors}")
    print(f"   - Device: {config.device}")

    return moe_processor


def test_moe_forward_pass():
    """–¢–µ—Å—Ç: forward pass —á–µ—Ä–µ–∑ MoE"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MoE forward pass...")

    config = get_project_config()

    # –°–æ–∑–¥–∞–µ–º MoE processor
    moe_processor = MoEConnectionProcessor(
        state_size=config.gating_state_size,
        neighbors=config.effective_neighbors,
        device=config.device,
    )

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 1000  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–µ –∫–ª–µ—Ç–æ–∫
    current_state = torch.randn(
        batch_size, config.gating_state_size, device=config.device
    )
    neighbor_states = torch.randn(
        batch_size,
        config.effective_neighbors,
        config.gating_state_size,
        device=config.device,
    )

    # Forward pass
    with torch.no_grad():
        output_state = moe_processor(current_state, neighbor_states)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert output_state is not None, "MoE –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    assert (
        output_state.shape == current_state.shape
    ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: –æ–∂–∏–¥–∞–ª–∏ {current_state.shape}, –ø–æ–ª—É—á–∏–ª–∏ {output_state.shape}"
    assert not torch.isnan(output_state).any(), "MoE –≤–µ—Ä–Ω—É–ª NaN –∑–Ω–∞—á–µ–Ω–∏—è"
    assert not torch.isinf(output_state).any(), "MoE –≤–µ—Ä–Ω—É–ª Inf –∑–Ω–∞—á–µ–Ω–∏—è"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    state_changed = not torch.allclose(current_state, output_state, atol=1e-6)
    assert state_changed, "MoE –Ω–µ –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"

    print(f"‚úÖ MoE forward pass —Ä–∞–±–æ—Ç–∞–µ—Ç:")
    print(f"   - Input shape: {current_state.shape}")
    print(f"   - Output shape: {output_state.shape}")
    print(f"   - State changed: {state_changed}")
    print(f"   - Output range: [{output_state.min():.4f}, {output_state.max():.4f}]")


def test_moe_parameter_count():
    """–¢–µ—Å—Ç: –ø–æ–¥—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ MoE"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ MoE...")

    config = get_project_config()

    # –°–æ–∑–¥–∞–µ–º MoE processor
    moe_processor = MoEConnectionProcessor(
        state_size=config.gating_state_size,
        neighbors=config.effective_neighbors,
        device=config.device,
    )

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    total_params = sum(p.numel() for p in moe_processor.parameters())
    gating_params = sum(p.numel() for p in moe_processor.gating_network.parameters())
    local_params = sum(p.numel() for p in moe_processor.local_expert.parameters())
    functional_params = sum(
        p.numel() for p in moe_processor.functional_expert.parameters()
    )
    distant_params = sum(p.numel() for p in moe_processor.distant_expert.parameters())

    print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:")
    print(
        f"   - Gating Network: {gating_params:,} params (—Ü–µ–ª—å: {config.gating_params:,})"
    )
    print(
        f"   - Local Expert: {local_params:,} params (—Ü–µ–ª—å: {config.local_expert_params:,})"
    )
    print(
        f"   - Functional Expert: {functional_params:,} params (—Ü–µ–ª—å: {config.functional_expert_params:,})"
    )
    print(
        f"   - Distant Expert: {distant_params:,} params (—Ü–µ–ª—å: {config.distant_expert_params:,})"
    )
    print(f"   - –û–ë–©–ò–ô –ò–¢–û–ì: {total_params:,} params")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–ª–∏ (–¥–æ–ø—É—Å–∫–∞–µ–º 20% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
    def check_target(actual, target, name):
        deviation = abs(actual - target) / target
        status = "‚úÖ" if deviation <= 0.2 else "‚ö†Ô∏è"
        print(f"   {status} {name}: {deviation*100:.1f}% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–∏")
        return deviation <= 0.2

    all_good = True
    all_good &= check_target(gating_params, config.gating_params, "Gating Network")
    all_good &= check_target(local_params, config.local_expert_params, "Local Expert")
    all_good &= check_target(
        functional_params, config.functional_expert_params, "Functional Expert"
    )
    all_good &= check_target(
        distant_params, config.distant_expert_params, "Distant Expert"
    )

    if all_good:
        print("üéâ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ü–µ–ª–µ–π")


def test_lattice_27x27x27_integration():
    """–¢–µ—Å—Ç: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ—à–µ—Ç–∫–æ–π 27√ó27√ó27"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ—à–µ—Ç–∫–æ–π 27√ó27√ó27...")

    config = get_project_config()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏ 27√ó27√ó27
    config.lattice_dimensions = (27, 27, 27)
    total_cells = 27 * 27 * 27

    print(f"   –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É {config.lattice_dimensions} = {total_cells:,} –∫–ª–µ—Ç–æ–∫...")

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É (—ç—Ç–æ –∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è –¥–ª—è 19k –∫–ª–µ—Ç–æ–∫)
    lattice = create_lattice(config.lattice_dimensions, config)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ—Ç–∫—É
    assert lattice is not None, "–†–µ—à–µ—Ç–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
    assert (
        lattice.total_cells == total_cells
    ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫: –æ–∂–∏–¥–∞–ª–∏ {total_cells}, –ø–æ–ª—É—á–∏–ª–∏ {lattice.total_cells}"

    # –°–æ–∑–¥–∞–µ–º MoE processor
    moe_processor = MoEConnectionProcessor(
        state_size=config.gating_state_size,
        neighbors=config.effective_neighbors,
        device=config.device,
    )

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–µ –∫–ª–µ—Ç–æ–∫ (–¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    test_cells = min(1000, total_cells)
    current_state = torch.randn(
        test_cells, config.gating_state_size, device=config.device
    )
    neighbor_states = torch.randn(
        test_cells,
        config.effective_neighbors,
        config.gating_state_size,
        device=config.device,
    )

    # Forward pass
    with torch.no_grad():
        output_state = moe_processor(current_state, neighbor_states)

    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ—à–µ—Ç–∫–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç:")
    print(f"   - –†–µ—à–µ—Ç–∫–∞: {config.lattice_dimensions} = {total_cells:,} –∫–ª–µ—Ç–æ–∫")
    print(f"   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–ª–µ—Ç–æ–∫: {test_cells:,}")
    print(f"   - Neighbors per cell: {config.effective_neighbors}")
    print(f"   - MoE forward pass: —É—Å–ø–µ—à–Ω–æ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ –ù–û–í–û–ô MoE –ê–†–•–ò–¢–ï–ö–¢–£–†–´ 27√ó27√ó27")
    print("=" * 60)

    try:
        # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        test_config_moe_parameters()

        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ MoE
        test_moe_processor_creation()

        # –¢–µ—Å—Ç 3: Forward pass
        test_moe_forward_pass()

        # –¢–µ—Å—Ç 4: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        test_moe_parameter_count()

        # –¢–µ—Å—Ç 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ—à–µ—Ç–∫–æ–π
        test_lattice_27x27x27_integration()

        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ù–û–í–û–ô MoE –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–†–û–ô–î–ï–ù–´!")
        print("=" * 60)
        print("\nüöÄ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞:")
        print("   - GatingNetwork –∑–∞–º–µ–Ω–∏–ª NCA –Ω–µ–π—Ä–æ–Ω")
        print("   - 3 —ç–∫—Å–ø–µ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   - –†–µ—à–µ—Ç–∫–∞ 27√ó27√ó27 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        print("   - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è –¥–ª—è MoE")
        print("   2. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å embedding —Å–∏—Å—Ç–µ–º–æ–π")
        print("   3. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback

        traceback.print_exc()
        return False

    return True


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
