"""
–¢–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ Lattice3D.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É IOPointPlacer –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Lattice3D.
"""

import torch
import numpy as np
from core.lattice_3d import (
    Lattice3D, LatticeConfig, IOPointPlacer, 
    PlacementStrategy, Face
)

def test_io_point_placer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç IOPointPlacer —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏."""
    print("=== –¢–µ—Å—Ç IOPointPlacer ===")
    
    dimensions = (8, 8, 8)
    
    # –¢–µ—Å—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    print("\n1. –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:")
    config = {
        'coverage_ratio': {'min_percentage': 7.8, 'max_percentage': 15.6},
        'absolute_limits': {'min_points': 5, 'max_points': 10},
        'seed': 42
    }
    
    placer = IOPointPlacer(dimensions, PlacementStrategy.PROPORTIONAL, config, seed=42)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
    face_area = 8 * 8  # 64 –∫–ª–µ—Ç–∫–∏
    min_points, max_points = placer.calculate_num_points(face_area)
    print(f"  –ü–ª–æ—â–∞–¥—å –≥—Ä–∞–Ω–∏: {face_area}")
    print(f"  –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {min_points} - {max_points}")
    print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ: {min_points/face_area*100:.1f}% - {max_points/face_area*100:.1f}%")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞
    input_points = placer.get_input_points(Face.FRONT)
    output_points = placer.get_output_points(Face.BACK)
    
    print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ –≤–≤–æ–¥–∞: {len(input_points)}")
    print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ –≤—ã–≤–æ–¥–∞: {len(output_points)}")
    print(f"  –ü—Ä–∏–º–µ—Ä—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–≤–æ–¥–∞: {input_points[:3]}")
    
    # –¢–µ—Å—Ç –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    print("\n2. –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–≥–ª–æ–≤:")
    placer_corners = IOPointPlacer(dimensions, PlacementStrategy.CORNERS, {}, seed=42)
    corner_points = placer_corners.get_input_points(Face.FRONT)
    print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤—ã—Ö —Ç–æ—á–µ–∫: {len(corner_points)}")
    print(f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–≥–ª–æ–≤: {corner_points}")
    
    print("\n3. –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:")
    placer_full = IOPointPlacer(dimensions, PlacementStrategy.FULL_FACE, {}, seed=42)
    full_points = placer_full.get_input_points(Face.FRONT)
    print(f"  –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {len(full_points)} —Ç–æ—á–µ–∫")


def test_lattice_3d_with_proportional_io():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Lattice3D —Å –Ω–æ–≤–æ–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π."""
    print("\n=== –¢–µ—Å—Ç Lattice3D —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π I/O ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = LatticeConfig(
        dimensions=(8, 8, 8),
        placement_strategy=PlacementStrategy.PROPORTIONAL,
        io_strategy_config={
            'coverage_ratio': {'min_percentage': 10.0, 'max_percentage': 20.0},
            'absolute_limits': {'min_points': 5, 'max_points': 15},
            'seed': 42
        },
        gpu_enabled=False,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        enable_logging=True
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ—Ç–∫–∏...")
    lattice = Lattice3D(config)
    print(f"   –†–µ—à–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {config.dimensions}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ I/O —Ç–æ—á–∫–∞—Ö
    print("\n2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ I/O —Ç–æ—á–∫–∞—Ö:")
    io_info = lattice.get_io_point_info()
    print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {io_info['strategy']}")
    print(f"   –í—Ö–æ–¥–Ω–∞—è –≥—Ä–∞–Ω—å: {io_info['input_face']}")
    print(f"   –¢–æ—á–∫–∏ –≤–≤–æ–¥–∞: {io_info['input_points']['count']} ({io_info['input_points']['coverage_percentage']:.1f}%)")
    print(f"   –¢–æ—á–∫–∏ –≤—ã–≤–æ–¥–∞: {io_info['output_points']['count']} ({io_info['output_points']['coverage_percentage']:.1f}%)")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ forward pass:")
    num_input_points = io_info['input_points']['count']
    input_size = lattice.cell_prototype.input_size
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    external_inputs = torch.randn(num_input_points, input_size)
    print(f"   –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {external_inputs.shape}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º forward pass
    output_states = lattice.forward(external_inputs)
    print(f"   –í—ã—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫: {output_states.shape}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏
    output_only = lattice.get_output_states()
    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: {output_only.shape}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    stats = lattice.get_performance_stats()
    print(f"   Forward calls: {stats['forward_calls']}")
    print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['total_time']:.4f}s")


def test_scaling_behavior():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    print("\n=== –¢–µ—Å—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    
    sizes = [(4, 4, 4), (8, 8, 8), (16, 16, 16), (32, 32, 32)]
    config = {
        'coverage_ratio': {'min_percentage': 7.8, 'max_percentage': 15.6},
        'absolute_limits': {'min_points': 5, 'max_points': 0},  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        'seed': 42
    }
    
    print("–†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏ | –ü–ª–æ—â–∞–¥—å –≥—Ä–∞–Ω–∏ | –¢–æ—á–∫–∏ –≤–≤–æ–¥–∞ | –ü–æ–∫—Ä—ã—Ç–∏–µ")
    print("-" * 55)
    
    for size in sizes:
        placer = IOPointPlacer(size, PlacementStrategy.PROPORTIONAL, config, seed=42)
        face_area = size[0] * size[1]  # –ü–ª–æ—â–∞–¥—å –≥—Ä–∞–Ω–∏ FRONT/BACK
        input_points = placer.get_input_points(Face.FRONT)
        coverage = len(input_points) / face_area * 100
        
        print(f"{size[0]:2d}√ó{size[1]:2d}√ó{size[2]:2d}      | {face_area:10d} | {len(input_points):10d} | {coverage:6.1f}%")


def compare_strategies():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è."""
    print("\n=== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ===")
    
    dimensions = (8, 8, 8)
    face_area = 64
    
    strategies = [
        (PlacementStrategy.PROPORTIONAL, {'coverage_ratio': {'min_percentage': 10, 'max_percentage': 20}}),
        (PlacementStrategy.CORNERS, {}),
        (PlacementStrategy.CORNERS_CENTER, {}),
        (PlacementStrategy.RANDOM, {}),
        (PlacementStrategy.FULL_FACE, {}),
    ]
    
    print("–°—Ç—Ä–∞—Ç–µ–≥–∏—è           | –¢–æ—á–∫–∏ | –ü–æ–∫—Ä—ã—Ç–∏–µ")
    print("-" * 40)
    
    for strategy, config in strategies:
        placer = IOPointPlacer(dimensions, strategy, config, seed=42)
        points = placer.get_input_points(Face.FRONT)
        coverage = len(points) / face_area * 100
        
        print(f"{strategy.value:18s} | {len(points):5d} | {coverage:6.1f}%")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º IOPointPlacer
        test_io_point_placer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Lattice3D
        test_lattice_3d_with_proportional_io()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_scaling_behavior()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        compare_strategies()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üéØ –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 