#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DeviceManager –≤ new_rebuild –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
=====================================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é DeviceManager
2. –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ProjectConfig
"""

import sys
import torch
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º new_rebuild –≤ path
sys.path.insert(0, str(Path(__file__).parent / "new_rebuild"))

from new_rebuild.utils.device_manager import (
    DeviceManager,
    get_device_manager,
    reset_device_manager,
)
from new_rebuild.config.project_config import ProjectConfig, get_project_config
from new_rebuild.core.moe.moe_processor import MoEConnectionProcessor


def test_device_manager_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ DeviceManager"""
    print("üîß –¢–µ—Å—Ç DeviceManager - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    print("=" * 60)

    # –°–±—Ä–æ—Å –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    reset_device_manager()

    # –°–æ–∑–¥–∞–Ω–∏–µ DeviceManager
    device_manager = get_device_manager(debug_mode=True)

    print(f"‚úÖ DeviceManager —Å–æ–∑–¥–∞–Ω: {device_manager.get_device()}")
    print(f"   CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.is_available()}")
    print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_manager.get_device_str()}")

    # –¢–µ—Å—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è tensor'–∞
    test_tensor = device_manager.allocate_tensor((100, 32), dtype=torch.float32)
    print(f"‚úÖ Tensor –≤—ã–¥–µ–ª–µ–Ω: {test_tensor.shape} –Ω–∞ {test_tensor.device}")

    # –¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ tensor'–∞
    cpu_tensor = torch.randn(50, 32)
    gpu_tensor = device_manager.ensure_device(cpu_tensor)
    print(f"‚úÖ Tensor –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω: {cpu_tensor.device} ‚Üí {gpu_tensor.device}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
    stats = device_manager.get_memory_stats()
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:")
    for key, value in stats.items():
        if isinstance(value, float):
            print(f"   {key}: {value:.2f}")
        else:
            print(f"   {key}: {value}")

    # Cleanup
    device_manager.cleanup()
    print("‚úÖ Cleanup –≤—ã–ø–æ–ª–Ω–µ–Ω")

    return True


def test_project_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DeviceManager —Å ProjectConfig"""
    print("\nüîß –¢–µ—Å—Ç ProjectConfig - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è DeviceManager")
    print("=" * 60)

    # –°–æ–∑–¥–∞–Ω–∏–µ ProjectConfig
    config = ProjectConfig(debug_mode=True, prefer_cuda=True)

    print(f"‚úÖ ProjectConfig —Å–æ–∑–¥–∞–Ω —Å DeviceManager")
    print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {config.device}")
    print(f"   DeviceManager: {config.device_manager}")

    # –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ DeviceManager —á–µ—Ä–µ–∑ ProjectConfig
    test_tensor = config.allocate_tensor((10, 32))
    print(f"‚úÖ Tensor —á–µ—Ä–µ–∑ ProjectConfig: {test_tensor.shape} –Ω–∞ {test_tensor.device}")

    # –¢–µ—Å—Ç device config
    device_config = config.get_device_config()
    print(f"‚úÖ Device config –ø–æ–ª—É—á–µ–Ω:")
    for key, value in device_config.items():
        if key != "device_manager":  # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –≤—ã–≤–æ–¥–∞
            print(f"   {key}: {value}")

    return True


def test_moe_processor_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DeviceManager —Å MoEProcessor"""
    print("\nüîß –¢–µ—Å—Ç MoEProcessor - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è DeviceManager")
    print("=" * 60)

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ MoEProcessor (–¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DeviceManager)
        processor = MoEConnectionProcessor(
            state_size=32,
            lattice_dimensions=(6, 6, 6),  # –ú–∞–ª–∞—è —Ä–µ—à–µ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            neighbor_count=26,
        )

        print(f"‚úÖ MoEProcessor —Å–æ–∑–¥–∞–Ω")
        print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {processor.device}")
        print(f"   DeviceManager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω: {hasattr(processor, 'device_manager')}")

        # –¢–µ—Å—Ç forward pass
        current_state = torch.randn(32)
        neighbor_states = torch.randn(10, 32)

        result = processor.forward(
            current_state=current_state,
            neighbor_states=neighbor_states,
            cell_idx=0,
            neighbor_indices=list(range(10)),
        )

        print(f"‚úÖ Forward pass –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.keys()}")
        print(f"   –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {result['new_state'].shape}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ MoEProcessor —Ç–µ—Å—Ç–µ: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_memory_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é"""
    print("\nüîß –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é")
    print("=" * 60)

    device_manager = get_device_manager()

    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ tensor'–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è cleanup
    tensors = []
    for i in range(20):
        tensor = device_manager.allocate_tensor((100, 32))
        tensors.append(tensor)

    stats_before = device_manager.get_memory_stats()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(tensors)} tensor'–æ–≤")
    print(f"   –í—ã–¥–µ–ª–µ–Ω–∏–π: {stats_before['total_allocations']}")

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π cleanup
    device_manager.cleanup()

    stats_after = device_manager.get_memory_stats()
    print(f"‚úÖ Cleanup –≤—ã–ø–æ–ª–Ω–µ–Ω")
    print(f"   –í—ã–¥–µ–ª–µ–Ω–∏–π: {stats_after['total_allocations']}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ memory cleanup —Ä–∞–±–æ—Ç–∞–µ—Ç
    if device_manager.is_cuda():
        print(f"   GPU –ø–∞–º—è—Ç—å –¥–æ: {stats_before.get('allocated_mb', 0):.2f}MB")
        print(f"   GPU –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ: {stats_after.get('allocated_mb', 0):.2f}MB")

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò DEVICEMANAGER –í NEW_REBUILD")
    print("=" * 80)

    tests = [
        ("DeviceManager - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_device_manager_basic),
        ("ProjectConfig - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è DeviceManager", test_project_config_integration),
        ("MoEProcessor - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è DeviceManager", test_moe_processor_integration),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é", test_memory_management),
    ]

    results = {}

    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = "‚úÖ PASS" if result else "‚ùå FAIL"
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = "‚ùå ERROR"

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 80)

    for test_name, result in results.items():
        print(f"{result} | {test_name}")

    passed = sum(1 for r in results.values() if r == "‚úÖ PASS")
    total = len(results)

    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! DeviceManager —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.")
        return 1


if __name__ == "__main__":
    exit(main())
