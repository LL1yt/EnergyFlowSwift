#!/usr/bin/env python3
"""
üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ê–Ω–∞–ª–∏–∑ tensor version conflicts –º–µ–∂–¥—É training steps

–¶–µ–ª—å: –ü–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É –ø–µ—Ä–≤—ã–π train_step –ø—Ä–æ—Ö–æ–¥–∏—Ç, –∞ –≤—Ç–æ—Ä–æ–π –ø–∞–¥–∞–µ—Ç —Å version error.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import torch
import logging
from training.embedding_trainer.emergent_training_stage_3_1_4_1_no_st import EmergentCubeTrainer, EmergentTrainingConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('tensor_version_debug.log', mode='w', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

def test_tensor_versions():
    """–¢–µ—Å—Ç –≤–µ—Ä—Å–∏–π —Ç–µ–Ω–∑–æ—Ä–æ–≤ –º–µ–∂–¥—É training steps"""
    
    print("üî¨ === TENSOR VERSION DIAGNOSTIC TEST ===")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = EmergentTrainingConfig()
    config.cube_dimensions = (3, 3, 3)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É–± –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    config.mixed_precision = False  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    config.gradient_checkpointing = False
    
    # –°–æ–∑–¥–∞–µ–º trainer
    trainer = EmergentCubeTrainer(config=config, device="cpu")
    print(f"‚úÖ Trainer created with {trainer.get_system_info()['total_system_params']} parameters")
    
    # –°–æ–∑–¥–∞–µ–º test data
    batch_size = 4
    question_embeddings = torch.randn(batch_size, 225, requires_grad=True)
    answer_embeddings = torch.randn(batch_size, 4096, requires_grad=True)
    
    print("\nüîç === TRAINING STEP 1 ===")
    try:
        # –ü–µ—Ä–≤—ã–π training step
        loss_1 = trainer.train_step(question_embeddings, answer_embeddings)
        print(f"‚úÖ Step 1 SUCCESS: loss = {loss_1['total_loss']:.6f}")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
        trainer._debug_tensor_versions("AFTER Step 1")
        
    except Exception as e:
        print(f"‚ùå Step 1 FAILED: {e}")
        return False
    
    print("\nüîç === TRAINING STEP 2 ===")
    try:
        # –í—Ç–æ—Ä–æ–π training step (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
        loss_2 = trainer.train_step(question_embeddings, answer_embeddings)
        print(f"‚úÖ Step 2 SUCCESS: loss = {loss_2['total_loss']:.6f}")
        
    except RuntimeError as e:
        if "is at version" in str(e) and "expected version" in str(e):
            print(f"‚ùå Step 2 FAILED with VERSION ERROR: {e}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä—Å–∏–π –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤
            print("\nüîç === DETAILED VERSION ANALYSIS ===")
            trainer._debug_tensor_versions("DURING ERROR Step 2")
            
            return False
        else:
            print(f"‚ùå Step 2 FAILED with OTHER ERROR: {e}")
            return False
    
    print("\n‚úÖ === ALL TESTS PASSED ===")
    return True

def test_specialization_tracker_isolation():
    """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ specialization_tracker –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏"""
    
    print("\nüß™ === SPECIALIZATION TRACKER ISOLATION TEST ===")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é gMLP cell
    from training.embedding_trainer.emergent_training_stage_3_1_4_1_no_st import EmergentGMLPCell
    
    cell = EmergentGMLPCell(state_size=8, neighbor_count=6, hidden_dim=8)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é tracker'–∞ –¥–æ –∏ –ø–æ—Å–ª–µ forward pass
    initial_version = cell.specialization_tracker._version if hasattr(cell.specialization_tracker, '_version') else 'N/A'
    print(f"üîç Initial tracker version: {initial_version}")
    
    # –ü–µ—Ä–≤—ã–π forward pass
    neighbor_states = torch.randn(1, 6, 8)
    own_state = torch.randn(1, 8)
    
    output_1 = cell(neighbor_states, own_state)
    version_after_1 = cell.specialization_tracker._version if hasattr(cell.specialization_tracker, '_version') else 'N/A'
    print(f"üîç After forward 1 version: {version_after_1}")
    
    # –í—Ç–æ—Ä–æ–π forward pass (–ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –º–µ—Å—Ç–æ)
    output_2 = cell(neighbor_states, own_state)
    version_after_2 = cell.specialization_tracker._version if hasattr(cell.specialization_tracker, '_version') else 'N/A'
    print(f"üîç After forward 2 version: {version_after_2}")
    
    print(f"‚úÖ Specialization tracker isolation test completed")

if __name__ == "__main__":
    print("üöÄ Starting tensor version diagnostic tests...")
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π training steps
    success = test_tensor_versions()
    
    # –¢–µ—Å—Ç 2: –ò–∑–æ–ª—è—Ü–∏—è specialization tracker
    test_specialization_tracker_isolation()
    
    if success:
        print("\nüéâ ALL DIAGNOSTIC TESTS PASSED")
    else:
        print("\n‚ö†Ô∏è DIAGNOSTIC TESTS REVEALED ISSUES - check logs for details") 