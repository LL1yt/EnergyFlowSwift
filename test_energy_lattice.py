"""
–¢–µ—Å—Ç –¥–ª—è EnergyLattice - 3D —Ä–µ—à–µ—Ç–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏
==========================================================================

–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ EnergyLattice:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ—Ç–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–∞ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (z=0)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
- –°–±–æ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å –≤—ã—Ö–æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã (z=depth-1)
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
"""

import torch
import torch.nn as nn
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append('/mnt/c/Users/n0n4a/projects/AA')

from energy_flow.core.energy_lattice import EnergyLattice, EnergyFlow, create_energy_lattice
from energy_flow.config import create_debug_config, set_energy_config
from energy_flow.utils.logging import setup_logging

# –í–∫–ª—é—á–∞–µ–º debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
setup_logging(debug_mode=True, level="DEBUG")

def test_energy_lattice_init():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EnergyLattice"""
    print("\n=== –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EnergyLattice ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = create_debug_config()
    set_energy_config(config)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É
    lattice = create_energy_lattice(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print(f"‚úÖ EnergyLattice —Å–æ–∑–¥–∞–Ω–∞: {lattice.width}x{lattice.height}x{lattice.depth}")
    print(f"‚úÖ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {lattice.max_active_flows}")
    print(f"‚úÖ –í—Ö–æ–¥–Ω—ã—Ö/–≤—ã—Ö–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫: {lattice.width * lattice.height}")
    print(f"‚úÖ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –Ω–∞ –∫–ª–µ—Ç–∫—É: {lattice.embedding_dim}")
    print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {lattice.device}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    assert len(lattice.active_flows) == 0, "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    assert lattice.next_flow_id == 0, "ID —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0"
    
    stats = lattice.get_statistics()
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    return lattice

def test_place_initial_energy():
    """–¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("\n=== –¢–µ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    lattice = create_energy_lattice(config)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    batch_size = 2
    device = lattice.device
    
    # –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ input_embedding_dim (768D)
    input_embeddings = torch.randn(batch_size, config.input_embedding_dim, device=device)
    
    print(f"üìù –í—Ö–æ–¥–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: {input_embeddings.shape}")
    print(f"üìù –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {lattice.width * lattice.height * batch_size}")
    
    # –†–∞–∑–º–µ—â–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
    flow_ids = lattice.place_initial_energy(input_embeddings)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: {len(flow_ids)}")
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {len(lattice.get_active_flows())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ç–æ–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (z=0)
    active_flows = lattice.get_active_flows()
    z_positions = [flow.position[2].item() for flow in active_flows]
    all_at_input = all(z == 0 for z in z_positions)
    print(f"‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –Ω–∞ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (z=0): {all_at_input}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–µ—Ç–∫–∞–º
    positions = [(int(flow.position[0].item()), int(flow.position[1].item())) for flow in active_flows]
    unique_positions = set(positions)
    expected_unique = lattice.width * lattice.height
    print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(unique_positions)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_unique})")
    
    return lattice, flow_ids

def test_flow_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏"""
    print("\n=== –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    lattice = create_energy_lattice(config)
    
    device = lattice.device
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ –≤—Ä—É—á–Ω—É—é
    position1 = torch.tensor([5, 8, 3], dtype=torch.float32, device=device)
    position2 = torch.tensor([12, 6, 7], dtype=torch.float32, device=device)
    
    energy1 = torch.randn(config.embedding_per_cell, device=device)
    energy2 = torch.randn(config.embedding_per_cell, device=device)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    flow_id1 = lattice._create_flow(position1, energy1)
    flow_id2 = lattice._create_flow(position2, energy2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–æ—Ç–æ–∫–∏ —Å ID: {flow_id1}, {flow_id2}")
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {len(lattice.get_active_flows())}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç–æ–∫
    new_position = torch.tensor([6, 9, 4], dtype=torch.float32, device=device)
    new_energy = torch.randn(config.embedding_per_cell, device=device)
    new_hidden = torch.randn(config.carrier_num_layers, config.carrier_hidden_size, device=device)
    
    lattice.update_flow(flow_id1, new_position, new_energy, new_hidden)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    updated_flow = lattice.active_flows[flow_id1]
    position_updated = torch.allclose(updated_flow.position, new_position)
    print(f"‚úÖ –ü–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {position_updated}")
    print(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –ø–æ—Ç–æ–∫–∞: {updated_flow.age}")
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫
    lattice.deactivate_flow(flow_id2, "test_deactivation")
    active_after_deactivation = len(lattice.get_active_flows())
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {active_after_deactivation}")
    
    return lattice

def test_spawn_flows():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö"""
    print("\n=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    lattice = create_energy_lattice(config)
    
    device = lattice.device
    
    # –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ç–æ–∫
    parent_position = torch.tensor([10, 10, 5], dtype=torch.float32, device=device)
    parent_energy = torch.randn(config.embedding_per_cell, device=device)
    parent_id = lattice._create_flow(parent_position, parent_energy)
    
    print(f"‚úÖ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω —Å ID: {parent_id}")
    
    # –≠–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    spawn_energies = [
        torch.randn(config.embedding_per_cell, device=device),
        torch.randn(config.embedding_per_cell, device=device),
        torch.randn(config.embedding_per_cell, device=device)
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–º–∫–æ–≤
    child_ids = lattice.spawn_flows(parent_id, spawn_energies)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ—Ç–æ–º–∫–æ–≤: {len(child_ids)}")
    print(f"‚úÖ ID –ø–æ—Ç–æ–º–∫–æ–≤: {child_ids}")
    print(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {len(lattice.get_active_flows())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ç–æ–º–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
    parent_flow = lattice.active_flows[parent_id]
    for child_id in child_ids:
        child_flow = lattice.active_flows[child_id]
        same_position = torch.allclose(child_flow.position, parent_flow.position)
        correct_parent = child_flow.parent_id == parent_id
        print(f"   –ü–æ—Ç–æ–º–æ–∫ {child_id}: –ø–æ–∑–∏—Ü–∏—è={same_position}, —Ä–æ–¥–∏—Ç–µ–ª—å={correct_parent}")
    
    return lattice, parent_id, child_ids

def test_collect_output_energy():
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏"""
    print("\n=== –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ ===") 
    
    config = create_debug_config()
    set_energy_config(config)
    lattice = create_energy_lattice(config)
    
    device = lattice.device
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (z = depth-1)
    output_z = config.lattice_depth - 1
    
    flow_positions = [
        torch.tensor([0, 0, output_z], dtype=torch.float32, device=device),
        torch.tensor([5, 8, output_z], dtype=torch.float32, device=device),
        torch.tensor([19, 19, output_z], dtype=torch.float32, device=device),
        torch.tensor([10, 15, 5], dtype=torch.float32, device=device),  # –ù–µ –Ω–∞ –≤—ã—Ö–æ–¥–µ
    ]
    
    energies = [torch.randn(config.embedding_per_cell, device=device) for _ in flow_positions]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    flow_ids = []
    for pos, energy in zip(flow_positions, energies):
        flow_id = lattice._create_flow(pos, energy)
        flow_ids.append(flow_id)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: {len(flow_ids)} (3 –Ω–∞ –≤—ã—Ö–æ–¥–µ, 1 –≤–Ω—É—Ç—Ä–∏)")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é
    output_embeddings, output_flow_ids = lattice.collect_output_energy()
    
    print(f"‚úÖ –í—ã—Ö–æ–¥–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {output_embeddings.shape}")
    print(f"‚úÖ –ü–æ—Ç–æ–∫–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–µ: {len(output_flow_ids)}")
    print(f"‚úÖ ID –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–µ: {output_flow_ids}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    expected_shape = (1, config.input_embedding_dim)
    correct_shape = output_embeddings.shape == expected_shape
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞: {correct_shape} {output_embeddings.shape} vs {expected_shape}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ —á—Ç–æ –Ω–∞ –≤—ã—Ö–æ–¥–µ)
    expected_output_flows = 3  # –ü–µ—Ä–≤—ã–µ 3 –ø–æ—Ç–æ–∫–∞ –±—ã–ª–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
    correct_count = len(output_flow_ids) == expected_output_flows
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {correct_count}")
    
    return lattice, output_embeddings

def test_weighted_averaging():
    """–¢–µ—Å—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è ===")
    
    config = create_debug_config()
    set_energy_config(config)
    lattice = create_energy_lattice(config)
    
    device = lattice.device
    output_z = config.lattice_depth - 1
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –≤ –æ–¥–Ω–æ–π –≤—ã—Ö–æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ (10, 10)
    test_position = [10, 10, output_z]
    
    # –ü–æ—Ç–æ–∫ 1: –º–æ–ª–æ–¥–æ–π —Å –≤—ã—Å–æ–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π
    energy1 = torch.ones(config.embedding_per_cell, device=device) * 2.0  # –í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è
    flow_id1 = lattice._create_flow(
        torch.tensor(test_position, dtype=torch.float32, device=device),
        energy1
    )
    
    # –ü–æ—Ç–æ–∫ 2: —Å—Ç–∞—Ä—ã–π —Å –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π (–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –±–æ–ª—å—à–∏–π –≤–µ—Å –∏–∑-–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞)
    energy2 = torch.ones(config.embedding_per_cell, device=device) * 0.5  # –ù–∏–∑–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è
    flow_id2 = lattice._create_flow(
        torch.tensor(test_position, dtype=torch.float32, device=device),
        energy2
    )
    
    # –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    lattice.active_flows[flow_id2].age = 10  # –°—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫
    
    # –ü–æ—Ç–æ–∫ 3: —Å—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–æ–∫
    energy3 = torch.ones(config.embedding_per_cell, device=device) * 1.0
    flow_id3 = lattice._create_flow(
        torch.tensor(test_position, dtype=torch.float32, device=device),
        energy3
    )
    lattice.active_flows[flow_id3].age = 5
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ 3 –ø–æ—Ç–æ–∫–∞ –≤ –∫–ª–µ—Ç–∫–µ ({test_position[0]}, {test_position[1]}):")
    print(f"   –ü–æ—Ç–æ–∫ {flow_id1}: —ç–Ω–µ—Ä–≥–∏—è=2.0, –≤–æ–∑—Ä–∞—Å—Ç=0")
    print(f"   –ü–æ—Ç–æ–∫ {flow_id2}: —ç–Ω–µ—Ä–≥–∏—è=0.5, –≤–æ–∑—Ä–∞—Å—Ç=10") 
    print(f"   –ü–æ—Ç–æ–∫ {flow_id3}: —ç–Ω–µ—Ä–≥–∏—è=1.0, –≤–æ–∑—Ä–∞—Å—Ç=5")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –≤–µ—Å–∞
    weight1 = 2.0 * (1 + 0 * 0.1)   # = 2.0
    weight2 = 0.5 * (1 + 10 * 0.1)  # = 1.0  
    weight3 = 1.0 * (1 + 5 * 0.1)   # = 1.5
    total_weight = weight1 + weight2 + weight3  # = 4.5
    
    print(f"üìä –û–∂–∏–¥–∞–µ–º—ã–µ –≤–µ—Å–∞: {weight1:.1f}, {weight2:.1f}, {weight3:.1f} (—Å—É–º–º–∞: {total_weight:.1f})")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é
    output_embeddings, flow_ids = lattice.collect_output_energy()
    
    print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: {len(flow_ids)}")
    print(f"‚úÖ ID –ø–æ—Ç–æ–∫–æ–≤: {flow_ids}")
    print(f"‚úÖ –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {output_embeddings.shape}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    weighted_avg_applied = len(flow_ids) == 3
    correct_output_shape = output_embeddings.shape == (1, config.lattice_width * config.lattice_height)
    
    print(f"‚úÖ –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {weighted_avg_applied}")
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞: {correct_output_shape}")
    
    return lattice, output_embeddings

def test_statistics_and_cleanup():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏"""
    print("\n=== –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    lattice = create_energy_lattice(config)
    
    device = lattice.device
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤
    for i in range(5):
        position = torch.tensor([i, i, i], dtype=torch.float32, device=device)
        energy = torch.randn(config.embedding_per_cell, device=device)
        flow_id = lattice._create_flow(position, energy)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ
        if i % 2 == 0:
            lattice.deactivate_flow(flow_id, "test")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ 5 –ø–æ—Ç–æ–∫–æ–≤, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ 3")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏
    stats_before = lattice.get_statistics()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏: {stats_before}")
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    lattice._cleanup_inactive_flows()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    stats_after = lattice.get_statistics()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {stats_after}")
    
    # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
    lattice.reset()
    stats_reset = lattice.get_statistics()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {stats_reset}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–±—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
    reset_successful = (
        len(lattice.active_flows) == 0 and
        lattice.next_flow_id == 0 and
        stats_reset['current_active'] == 0
    )
    print(f"‚úÖ –°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {reset_successful}")
    
    return stats_before, stats_after, stats_reset

def test_buffered_flow_collection():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –ø–æ—Ç–æ–∫–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    lattice = create_energy_lattice(config)
    
    device = lattice.device
    
    # 1. –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –≤—Ä—É—á–Ω—É—é
    test_flows = []
    for i in range(5):
        position = torch.tensor([i*2, i*3, 0], dtype=torch.float32, device=device)
        energy = torch.randn(config.embedding_per_cell, device=device) * (i + 1)  # –†–∞–∑–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
        flow_id = lattice._create_flow(position, energy)
        test_flows.append(flow_id)
    
    print(f"üå± –°–æ–∑–¥–∞–Ω–æ {len(test_flows)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
    
    # 2. –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ—Ç–æ–∫–∏ –∫ –≤—ã—Ö–æ–¥—É
    for i, flow_id in enumerate(test_flows):
        flow = lattice.active_flows[flow_id]
        new_position = flow.position.clone()
        
        if i < 2:
            # –ü–æ—Ç–æ–∫–∏ 0,1: —Ç–æ—á–Ω–æ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (z = depth-1)
            new_position[2] = config.lattice_depth - 1
        elif i < 4:
            # –ü–æ—Ç–æ–∫–∏ 2,3: –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã (z > depth-1)
            new_position[2] = config.lattice_depth + 2
        else:
            # –ü–æ—Ç–æ–∫ 4: –Ω–µ –¥–æ—à–µ–ª –¥–æ –≤—ã—Ö–æ–¥–∞
            new_position[2] = config.lattice_depth - 3
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        lattice.active_flows[flow_id].age = i * 2
        
        lattice.update_flow(flow_id, new_position, flow.energy, flow.hidden_state)
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ñ–µ—Ä
    buffered_count = lattice.get_buffered_flows_count()
    print(f"üì¶ –ü–æ—Ç–æ–∫–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ: {buffered_count}")
    print(f"üì¶ –ö–ª–µ—Ç–æ–∫ —Å –ø–æ—Ç–æ–∫–∞–º–∏ –≤ –±—É—Ñ–µ—Ä–µ: {len(lattice.output_buffer)}")
    
    # 4. –°–æ–±–∏—Ä–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –∏–∑ –±—É—Ñ–µ—Ä–∞
    output_embeddings, collected_ids = lattice.collect_buffered_energy()
    
    print(f"üèÅ –°–æ–±—Ä–∞–Ω–æ –∏–∑ –±—É—Ñ–µ—Ä–∞: {len(collected_ids)} –ø–æ—Ç–æ–∫–æ–≤")
    print(f"üèÅ ID —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {collected_ids}")
    print(f"üì¶ –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {output_embeddings.shape}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ç–æ–∫–∏ 0,1,2,3 —Å–æ–±—Ä–∞–Ω—ã (4 –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å)
    expected_collected = [0, 1, 2, 3]  # –ü–æ—Ç–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –≤—ã—Ö–æ–¥–∞
    collected_correctly = set(collected_ids) == set(expected_collected)
    print(f"‚úÖ –°–æ–±—Ä–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: {collected_correctly}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É—Ñ–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è (–¥–ª—è FlowProcessor)
    buffered_after = lattice.get_buffered_flows_count()
    buffer_persists = buffered_after == buffered_count  # –ë—É—Ñ–µ—Ä –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è
    print(f"üì¶ –ë—É—Ñ–µ—Ä —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {buffer_persists}")
    
    # 7. –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤—Ä—É—á–Ω—É—é
    lattice.clear_output_buffer()
    buffered_after_clear = lattice.get_buffered_flows_count()
    print(f"üßπ –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω: {buffered_after_clear == 0}")
    
    return output_embeddings, collected_ids

def test_energy_flow_lifecycle():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ—Ç–æ–∫–∞"""
    print("\n=== –¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ—Ç–æ–∫–∞ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    lattice = create_energy_lattice(config)
    
    device = lattice.device
    
    # 1. –†–∞–∑–º–µ—â–∞–µ–º –≤—Ö–æ–¥–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é
    input_embedding = torch.randn(1, config.input_embedding_dim, device=device)
    initial_flow_ids = lattice.place_initial_energy(input_embedding)
    
    print(f"üå± –†–∞–∑–º–µ—â–µ–Ω–æ {len(initial_flow_ids)} –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
    
    # 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –∫ –≤—ã—Ö–æ–¥—É
    active_flows = lattice.get_active_flows()
    moved_flow_ids = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤—ã—Ö–æ–¥–∞
    for i, flow in enumerate(active_flows[:5]):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        new_position = flow.position.clone()
        
        if i < 2:
            # –ü–æ—Ç–æ–∫–∏ 0,1: —Ç–æ—á–Ω–æ –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (z = depth-1)
            new_position[2] = config.lattice_depth - 1
        elif i < 4:
            # –ü–æ—Ç–æ–∫–∏ 2,3: –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã (z > depth-1) - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã
            new_position[2] = config.lattice_depth + 2  # –í—ã—Ö–æ–¥–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        else:
            # –ü–æ—Ç–æ–∫ 4: –ø–æ—á—Ç–∏ –Ω–∞ –≤—ã—Ö–æ–¥–µ, –Ω–æ –Ω–µ –¥–æ—à–µ–ª
            new_position[2] = config.lattice_depth - 2
        
        lattice.update_flow(
            flow.id,
            new_position,
            flow.energy,
            flow.hidden_state
        )
        moved_flow_ids.append(flow.id)
    
    print(f"üöÄ –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ {len(moved_flow_ids)} –ø–æ—Ç–æ–∫–æ–≤: 2 –Ω–∞ –≤—ã—Ö–æ–¥, 2 –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, 1 –ø–æ—á—Ç–∏ –Ω–∞ –≤—ã—Ö–æ–¥–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤:")
    for flow_id in moved_flow_ids:
        if flow_id in lattice.active_flows:
            flow = lattice.active_flows[flow_id]
            z_pos = flow.position[2].item()
            print(f"   –ü–æ—Ç–æ–∫ {flow_id}: z={z_pos:.1f}, –∞–∫—Ç–∏–≤–µ–Ω={flow.is_active}")
    
    # 3. –°–æ–±–∏—Ä–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é
    output_embeddings, completed_flow_ids = lattice.collect_output_energy()
    
    print(f"üèÅ –°–æ–±—Ä–∞–ª–∏ —ç–Ω–µ—Ä–≥–∏—é –æ—Ç {len(completed_flow_ids)} –ø–æ—Ç–æ–∫–æ–≤")
    print(f"üì¶ –í—ã—Ö–æ–¥–Ω–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥: {output_embeddings.shape}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ —Å–±–æ—Ä–∞
    expected_collected = 4  # 2 –Ω–∞ –≤—ã—Ö–æ–¥–µ + 2 –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ = 4 –ø–æ—Ç–æ–∫–∞
    print(f"üîç –û–∂–∏–¥–∞–ª–∏ —Å–æ–±—Ä–∞—Ç—å: {expected_collected} –ø–æ—Ç–æ–∫–æ–≤ (2 –Ω–∞ –≤—ã—Ö–æ–¥–µ + 2 –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏)")
    print(f"üîç ID —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {completed_flow_ids}")
    
    # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_stats = lattice.get_statistics()
    print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    lifecycle_success = (
        len(completed_flow_ids) >= expected_collected and  # –°–æ–±—Ä–∞–ª–∏ –Ω—É–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        output_embeddings.shape[0] == 1 and               # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π batch size
        output_embeddings.shape[1] == lattice.width * lattice.height  # –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–π —Ä–µ—à–µ—Ç–∫–∏
    )
    print(f"‚úÖ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {lifecycle_success}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏:")
    print(f"   - –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {output_embeddings.shape} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: [1, {lattice.width * lattice.height}])")
    print(f"   - –ü–æ—Ç–æ–∫–∏ —Å–æ–±—Ä–∞–Ω—ã: {len(completed_flow_ids)}/{expected_collected}")
    print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {final_stats['current_active']}")
    
    return output_embeddings, final_stats

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è EnergyLattice")
    print("=" * 50)
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        lattice = test_energy_lattice_init()
        lattice, flow_ids = test_place_initial_energy()
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        lattice = test_flow_management()
        lattice, parent_id, child_ids = test_spawn_flows()
        lattice, output_emb = test_collect_output_energy()
        lattice, weighted_output = test_weighted_averaging()
        stats = test_statistics_and_cleanup()
        
        # –¢–µ—Å—Ç—ã –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        buffer_output, buffer_ids = test_buffered_flow_collection()
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        final_output, final_stats = test_energy_flow_lifecycle()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã EnergyLattice –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {lattice.device}")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {lattice.width}x{lattice.height}x{lattice.depth}")
        print(f"üìä –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {lattice.max_active_flows}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)