```mermaid
graph TB
    subgraph "üèóÔ∏è Lattice 3D Module Architecture"
        direction TB
        
        subgraph "üì• Input Layer"
            CONFIG["`**LatticeConfig**<br/>‚Ä¢ dimensions: (X,Y,Z)<br/>‚Ä¢ boundary_conditions<br/>‚Ä¢ placement_strategy<br/>‚Ä¢ io_strategy_config`"]
            YAML["`**YAML Config**<br/>config/default.yaml`"]
            YAML --> CONFIG
        end
        
        subgraph "üÜï I/O Strategy System"
            direction LR
            STRATEGY["`**PlacementStrategy**<br/>‚Ä¢ PROPORTIONAL<br/>‚Ä¢ RANDOM<br/>‚Ä¢ CORNERS<br/>‚Ä¢ CORNERS_CENTER<br/>‚Ä¢ FULL_FACE`"]
            PLACER["`**IOPointPlacer**<br/>‚Ä¢ calculate_num_points()<br/>‚Ä¢ get_input_points()<br/>‚Ä¢ get_output_points()<br/>‚Ä¢ Auto-scaling 7.8-15.6%`"]
            FACES["`**Face Enum**<br/>‚Ä¢ FRONT (input)<br/>‚Ä¢ BACK (output)<br/>‚Ä¢ LEFT/RIGHT/TOP/BOTTOM`"]
            
            STRATEGY --> PLACER
            FACES --> PLACER
        end
        
        subgraph "üî¨ Core Components"
            direction TB
            LATTICE["`**Lattice3D**<br/>PyTorch nn.Module<br/>‚Ä¢ forward(external_inputs)<br/>‚Ä¢ get_output_states()<br/>‚Ä¢ get_io_point_info()`"]
            POSITION["`**Position3D**<br/>‚Ä¢ 3D coordinates<br/>‚Ä¢ transformations<br/>‚Ä¢ validation`"]
            NEIGHBOR["`**NeighborTopology**<br/>‚Ä¢ 6-connectivity<br/>‚Ä¢ boundary handling<br/>‚Ä¢ caching`"]
        end
        
        subgraph "üß¨ Cell System"
            PROTOTYPE["`**CellPrototype**<br/>from cell_prototype module<br/>‚Ä¢ input_size<br/>‚Ä¢ state_size<br/>‚Ä¢ neighbor_channels`"]
            CELLS["`**Cell Grid**<br/>3D array of cells<br/>Shape: (X√óY√óZ, state_size)`"]
            
            PROTOTYPE --> CELLS
        end
        
        subgraph "üìä Data Flow"
            direction LR
            INPUT_DATA["`**External Inputs**<br/>Shape: (num_io_points, input_size)<br/>Only proportional points`"]
            STATES["`**Cell States**<br/>Shape: (total_cells, state_size)<br/>All cells updated`"]
            OUTPUT_DATA["`**Output States**<br/>Shape: (num_output_points, state_size)<br/>Only output face points`"]
            
            INPUT_DATA --> STATES
            STATES --> OUTPUT_DATA
        end
    end
    
    %% Dependencies
    CONFIG --> LATTICE
    PLACER --> LATTICE
    POSITION --> NEIGHBOR
    NEIGHBOR --> LATTICE
    CELLS --> LATTICE
    
    %% Data flow connections
    LATTICE --> INPUT_DATA
    LATTICE --> OUTPUT_DATA
    
    %% Styling
    classDef configClass fill:#e1f5fe,stroke:#0277bd,stroke-width:2px
    classDef newClass fill:#f3e5f5,stroke:#7b1fa2,stroke-width:3px
    classDef coreClass fill:#e8f5e8,stroke:#388e3c,stroke-width:2px
    classDef dataClass fill:#fff3e0,stroke:#f57c00,stroke-width:2px
    
    class CONFIG,YAML configClass
    class STRATEGY,PLACER,FACES newClass
    class LATTICE,POSITION,NEIGHBOR,PROTOTYPE,CELLS coreClass
    class INPUT_DATA,STATES,OUTPUT_DATA dataClass
```

**–û—Å–Ω–æ–≤–Ω—ã–µ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:**

## üÜï I/O Strategy System (–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
- **PlacementStrategy**: –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ 5 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- **IOPointPlacer**: –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—á–µ–∫ I/O
- **Face**: –°–∏—Å—Ç–µ–º–∞ –≥—Ä–∞–Ω–µ–π —Ä–µ—à–µ—Ç–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞

## üî¨ Core Components (–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
- **Lattice3D**: –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ä–µ—à–µ—Ç–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ I/O
- **Position3D**: –°–∏—Å—Ç–µ–º–∞ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
- **NeighborTopology**: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å–µ–¥—Å—Ç–≤–æ–º –∫–ª–µ—Ç–æ–∫

## üìä Data Flow (–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö)
- **Input**: –¢–æ–ª—å–∫–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ I/O —Ç–æ—á–∫–∏ (–Ω–µ –≤—Å–µ –≥—Ä–∞–Ω–∏)
- **Processing**: –í—Å–µ –∫–ª–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–æ–ø–æ–ª–æ–≥–∏–∏
- **Output**: –¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

## üéØ Key Benefits of New Architecture
1. **–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å**: –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç–æ—Ä–æ–≤ 7.8-15.6%
2. **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ**: –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç 4√ó4√ó4 –¥–æ 128√ó128√ó128
3. **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ I/O —Ç–æ—á–µ–∫
4. **–ì–∏–±–∫–æ—Å—Ç—å**: 5 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
5. **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ—Å—Ç—å**: YAML-driven –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ 