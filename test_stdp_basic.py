#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è STDP –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤ Lattice3D
==================================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é STDP –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
2. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–µ—Ç–æ–∫
3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ STDP –ø—Ä–∞–≤–∏–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤
4. –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é config/adaptive_connectivity.yaml
"""

import sys
import os
import torch
import numpy as np
import yaml
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent))

from core.lattice_3d import create_lattice_from_config


def test_stdp_initialization():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ STDP –º–µ—Ö–∞–Ω–∏–∑–º–∞"""
    print("üß† –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è STDP –º–µ—Ö–∞–Ω–∏–∑–º–∞")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = "config/adaptive_connectivity.yaml"
    if not os.path.exists(config_path):
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_path}")
        return False

    try:
        # === –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ===
        with open(config_path, "r", encoding="utf-8") as f:
            raw_config = yaml.safe_load(f)

        print(f"üîç –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print(f"   cell_prototype –µ—Å—Ç—å: {'cell_prototype' in raw_config}")
        print(f"   cell –µ—Å—Ç—å: {'cell' in raw_config}")
        if "cell_prototype" in raw_config:
            print(f"   cell_prototype —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {raw_config['cell_prototype']}")
        if "cell" in raw_config:
            print(f"   cell —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {raw_config['cell']}")

        lattice = create_lattice_from_config(config_path=config_path)

        # === –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø–∞–ª–æ –≤ lattice ===
        print(f"üîç Lattice config –æ—Ç–ª–∞–¥–∫–∞:")
        print(f"   cell_config: {lattice.config.cell_config}")
        print(f"   neighbors –≤ lattice: {lattice.config.neighbors}")
        print(f"   cell_prototype state_size: {lattice.cell_prototype.state_size}")
        print(f"   cell_prototype —Ç–∏–ø: {type(lattice.cell_prototype)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ STDP –≤–∫–ª—é—á–µ–Ω
        assert lattice.enable_stdp == True, "STDP –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ STDP –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        assert hasattr(lattice, "activity_threshold"), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç activity_threshold"
        assert hasattr(lattice, "learning_rate"), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç learning_rate"
        assert hasattr(lattice, "A_plus"), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç A_plus"
        assert hasattr(lattice, "A_minus"), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç A_minus"
        assert hasattr(lattice, "weight_bounds"), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç weight_bounds"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º previous_states
        assert lattice.previous_states is not None, "previous_states –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        assert (
            lattice.previous_states.shape == lattice.states.shape
        ), "–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å previous_states –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º activity_history
        assert (
            lattice.activity_history is not None
        ), "activity_history –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        assert (
            lattice.activity_history.maxlen == 10
        ), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä activity_history"

        print(f"‚úÖ STDP –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        print(f"   - –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥: {lattice.activity_threshold}")
        print(f"   - –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {lattice.learning_rate}")
        print(f"   - –î–∏–∞–ø–∞–∑–æ–Ω –≤–µ—Å–æ–≤: {lattice.weight_bounds}")
        print(f"   - –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {lattice.config.dimensions}")
        print(f"   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫: {lattice.config.total_cells}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def test_activity_tracking():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    print("\nüìä –¢–µ—Å—Ç 2: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

    try:
        lattice = create_lattice_from_config(
            config_path="config/adaptive_connectivity.yaml"
        )

        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        initial_history_len = len(lattice.activity_history)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ forward passes
        for step in range(5):
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –≤–Ω–µ—à–Ω–µ–µ –≤–æ–∑–º—É—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            external_input = (
                torch.randn(
                    len(lattice.input_indices),
                    lattice.cell_prototype.external_input_size,
                    device=lattice.device,
                )
                * 0.1
            )

            lattice.forward(external_input)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ç–µ—Ç
            assert (
                len(lattice.activity_history) == step + 1
            ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ —à–∞–≥–µ {step}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            last_activity = lattice.activity_history[-1]
            assert "step" in last_activity, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'step' –≤ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            assert (
                "active_cells" in last_activity
            ), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'active_cells' –≤ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            assert (
                "state_change" in last_activity
            ), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'state_change' –≤ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
            assert (
                len(last_activity["active_cells"]) == lattice.config.total_cells
            ), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä active_cells"
            assert (
                len(last_activity["state_change"]) == lattice.config.total_cells
            ), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä state_change"

        print(f"‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"   - –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(lattice.activity_history)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        last_activity = lattice.activity_history[-1]
        active_count = np.sum(last_activity["active_cells"])
        avg_state_change = np.mean(last_activity["state_change"])

        print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫: {active_count}/{lattice.config.total_cells}")
        print(f"   - –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {avg_state_change:.4f}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_stdp_update():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ STDP –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    print("\n‚ö° –¢–µ—Å—Ç 3: STDP –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤")

    try:
        lattice = create_lattice_from_config(
            config_path="config/adaptive_connectivity.yaml"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        initial_weights = lattice.connection_weights.clone()
        initial_mean = float(initial_weights.mean())
        initial_std = float(initial_weights.std())

        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ –≤–µ—Å–∞ - mean: {initial_mean:.4f}, std: {initial_std:.4f}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º forward passes –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        for step in range(3):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–ª—å–Ω–æ–µ –≤–Ω–µ—à–Ω–µ–µ –≤–æ–∑–º—É—â–µ–Ω–∏–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            external_input = (
                torch.randn(
                    len(lattice.input_indices),
                    lattice.cell_prototype.external_input_size,
                    device=lattice.device,
                )
                * 0.5
            )
            lattice.forward(external_input)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è STDP
        assert len(lattice.activity_history) >= 2, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è STDP"

        # –ü—Ä–∏–º–µ–Ω—è–µ–º STDP –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        stdp_stats = lattice.apply_stdp_update()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É STDP
        assert isinstance(stdp_stats, dict), "STDP –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        required_keys = [
            "active_cells",
            "ltp_updates",
            "ltd_updates",
            "total_weight_change",
        ]
        for key in required_keys:
            assert key in stdp_stats, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key} –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ STDP"

        print(f"‚úÖ STDP –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫: {stdp_stats['active_cells']}")
        print(f"   - LTP –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {stdp_stats['ltp_updates']}")
        print(f"   - LTD –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {stdp_stats['ltd_updates']}")
        print(f"   - –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤: {stdp_stats['total_weight_change']:.6f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (–µ—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
        final_weights = lattice.connection_weights
        if stdp_stats["active_cells"] > 0:
            weight_diff = torch.norm(final_weights - initial_weights).item()
            assert weight_diff > 0, "–í–µ—Å–∞ –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            print(f"   - –ù–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤: {weight_diff:.6f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º bounds checking
        assert (
            float(final_weights.min()) >= lattice.weight_bounds[0]
        ), "–í–µ—Å–∞ –Ω–∞—Ä—É—à–∞—é—Ç –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É"
        assert (
            float(final_weights.max()) <= lattice.weight_bounds[1]
        ), "–í–µ—Å–∞ –Ω–∞—Ä—É—à–∞—é—Ç –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤
        if "connection_weights_stats" in stdp_stats:
            final_stats = stdp_stats["connection_weights_stats"]
            print(
                f"   –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ - mean: {final_stats['mean']:.4f}, std: {final_stats['std']:.4f}"
            )
            print(
                f"                  - min: {final_stats['min']:.4f}, max: {final_stats['max']:.4f}"
            )

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ STDP –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_biological_plausibility():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç–∏"""
    print("\nüß¨ –¢–µ—Å—Ç 4: –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å")

    try:
        lattice = create_lattice_from_config(
            config_path="config/adaptive_connectivity.yaml"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        assert (
            0.001 <= lattice.learning_rate <= 0.1
        ), "–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –Ω–µ –≤ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"
        assert 0.001 <= lattice.A_plus <= 0.1, "A_plus –Ω–µ –≤ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"
        assert 0.001 <= lattice.A_minus <= 0.1, "A_minus –Ω–µ –≤ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"
        assert 1 <= lattice.tau_plus <= 100, "tau_plus –Ω–µ –≤ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"
        assert 1 <= lattice.tau_minus <= 100, "tau_minus –Ω–µ –≤ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–ø—Ä–∞–≤–ª—è–µ–º—ã–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        total_cells = lattice.config.total_cells
        assert (
            1000 <= total_cells <= 10000
        ), f"–†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏ {total_cells} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–æ—Å–µ–¥–µ–π (–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ)
        neighbors_ratio = lattice.config.neighbors / 26  # –ú–∞–∫—Å–∏–º—É–º 26 –≤ 3D —Ä–µ—à–µ—Ç–∫–µ
        assert (
            0.5 <= neighbors_ratio <= 1.0
        ), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –Ω–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ"

        print(f"‚úÖ –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        print(
            f"   - –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {lattice.config.dimensions} ({total_cells} –∫–ª–µ—Ç–æ–∫)"
        )
        print(f"   - –°–æ—Å–µ–¥–µ–π –Ω–∞ –∫–ª–µ—Ç–∫—É: {lattice.config.neighbors}")
        print(f"   - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–æ—Å–µ–¥–µ–π: {neighbors_ratio:.2f}")
        print(
            f"   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã: œÑ+ = {lattice.tau_plus}, œÑ- = {lattice.tau_minus}"
        )

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç–∏: {e}")
        return False


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ STDP –º–µ—Ö–∞–Ω–∏–∑–º–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ STDP –º–µ—Ö–∞–Ω–∏–∑–º–∞ (–®–∞–≥ 2.3)")
    print("=" * 60)

    tests = [
        test_stdp_initialization,
        test_activity_tracking,
        test_stdp_update,
        test_biological_plausibility,
    ]

    passed = 0
    total = len(tests)

    for test in tests:
        if test():
            passed += 1
        else:
            print(f"\n‚ùå –¢–µ—Å—Ç {test.__name__} –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!")

    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! STDP –º–µ—Ö–∞–Ω–∏–∑–º –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
