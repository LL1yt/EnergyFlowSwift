#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç
============================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from new_rebuild.config import (
    create_debug_config, 
    create_experiment_config,
    create_optimized_config,
    get_project_config,
    set_project_config
)
from new_rebuild.utils import strict_no_hardcoded, HardcodedValueError


def test_lattice_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Lattice3D –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥"""
    print("\n=== –¢–µ—Å—Ç Lattice3D ===")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DEBUG –∫–æ–Ω—Ñ–∏–≥
    config = create_debug_config()
    set_project_config(config)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∞–±—Ä–∏—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    from new_rebuild.core.lattice import create_lattice
    lattice = create_lattice()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    
    print(f"‚úÖ Lattice —Å–æ–∑–¥–∞–Ω —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {config.lattice.dimensions}")
    print(f"   Total cells: {lattice.pos_helper.total_positions}")
    print(f"   Adaptive radius: {config.calculate_adaptive_radius():.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∂–∏–º—É
    assert lattice.pos_helper.dimensions == (8, 8, 8), "DEBUG —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 8x8x8"
    assert lattice.pos_helper.total_positions == 512
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ EXPERIMENT
    config2 = create_experiment_config()
    set_project_config(config2)
    lattice2 = create_lattice()
    
    assert lattice2.pos_helper.dimensions == (15, 15, 15), "EXPERIMENT —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 15x15x15"
    print(f"‚úÖ EXPERIMENT —Ä–µ–∂–∏–º: {lattice2.pos_helper.dimensions}, {lattice2.pos_helper.total_positions} cells")


def test_model_cell_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–Ω—Ñ–∏–≥"""
    print("\n=== –¢–µ—Å—Ç Model Cells ===")
    
    config = create_debug_config()
    set_project_config(config)
    
    from new_rebuild.core.cells import create_cell
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–µ—Ç–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥)
    cell = create_cell("vectorized_gnn")
    
    print(f"‚úÖ VectorizedGNNCell —Å–æ–∑–¥–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞:")
    print(f"   State size: {cell.state_size}")
    print(f"   Hidden dim: {cell.hidden_dim}")
    print(f"   Message dim: {cell.message_dim}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DEBUG –∑–Ω–∞—á–µ–Ω–∏—è
    assert cell.state_size == config.model.state_size
    assert cell.state_size == 32  # DEBUG preset


def test_moe_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ MoE –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–Ω—Ñ–∏–≥"""
    print("\n=== –¢–µ—Å—Ç MoE Components ===")
    
    config = create_experiment_config()
    set_project_config(config)
    
    from new_rebuild.core.moe import UnifiedConnectionClassifier
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Ä–µ—à–µ—Ç–∫–∏
    classifier = UnifiedConnectionClassifier(
        lattice_dimensions=config.lattice.dimensions
    )
    
    print(f"‚úÖ UnifiedConnectionClassifier —Å–æ–∑–¥–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞:")
    print(f"   Lattice dimensions: {classifier.lattice_dimensions}")
    print(f"   State size: {classifier.state_size}")
    print(f"   Cache enabled: {classifier.enable_cache}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    assert classifier.state_size == config.model.state_size
    assert classifier.state_size == 64  # EXPERIMENT preset


def test_training_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥"""
    print("\n=== –¢–µ—Å—Ç Training Components ===")
    
    config = create_optimized_config()
    set_project_config(config)
    
    print(f"‚úÖ OPTIMIZED —Ä–µ–∂–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è:")
    print(f"   Max samples: {config.training_embedding.max_total_samples}")
    print(f"   Epochs: {config.training_embedding.num_epochs}")
    print(f"   Learning rate: {config.training_optimizer.learning_rate}")
    print(f"   Memory reserve: {config.memory_management.training_memory_reserve_gb}GB")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OPTIMIZED –∑–Ω–∞—á–µ–Ω–∏—è
    assert config.training_embedding.max_total_samples == 50000
    assert config.training_embedding.num_epochs == 20
    assert config.memory_management.training_memory_reserve_gb == 8.0


def test_hardcoded_protection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç hardcoded –∑–Ω–∞—á–µ–Ω–∏–π"""
    print("\n=== –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç Hardcoded ===")
    
    config = create_debug_config()
    set_project_config(config)
    
    # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
    def bad_function():
        # –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
        learning_rate = strict_no_hardcoded(1e-4, "training_optimizer.learning_rate")
        return learning_rate
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    lr = bad_function()
    print(f"‚úÖ strict_no_hardcoded –∑–∞–º–µ–Ω–∏–ª 1e-4 –Ω–∞ {lr} –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
    assert lr == config.training_optimizer.learning_rate
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
    try:
        value = strict_no_hardcoded(12345, "non.existent.param")
        print("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞!")
    except HardcodedValueError as e:
        print("‚úÖ –ü–æ–π–º–∞–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")


def test_config_mode_switching():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏"""
    print("\n=== –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ ===")
    
    modes = [
        ("DEBUG", create_debug_config, (8, 8, 8), 32, 100),
        ("EXPERIMENT", create_experiment_config, (15, 15, 15), 64, 10000), 
        ("OPTIMIZED", create_optimized_config, (30, 30, 30), 128, 50000),
    ]
    
    for mode_name, create_func, expected_dims, expected_state, expected_samples in modes:
        config = create_func()
        set_project_config(config)
        
        print(f"\n{mode_name} —Ä–µ–∂–∏–º:")
        print(f"  –†–µ—à–µ—Ç–∫–∞: {config.lattice.dimensions}")
        print(f"  State size: {config.model.state_size}")
        print(f"  Max samples: {config.training_embedding.max_total_samples}")
        
        assert config.lattice.dimensions == expected_dims
        assert config.model.state_size == expected_state
        assert config.training_embedding.max_total_samples == expected_samples
        
    print("\n‚úÖ –í—Å–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


def test_config_access_patterns():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É"""
    print("\n=== –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞ ===")
    
    config = create_experiment_config()
    set_project_config(config)
    
    # 1. –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ—Å–µ—Ç–∞–º
    print("1. –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ—Å–µ—Ç–∞–º:")
    print(f"   Debug lattice: {config.mode_presets.debug.lattice_dimensions}")
    print(f"   Optimized lattice: {config.mode_presets.optimized.lattice_dimensions}")
    
    # 2. –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("\n2. –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    print(f"   Lattice total: {config.lattice.total_cells}")
    print(f"   Model params: {config.model.target_params}")
    
    # 3. –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    print("\n3. –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:")
    print(f"   Cube surface dim: {config.cube_surface_dim}")
    print(f"   Cube embedding dim: {config.cube_embedding_dim}")
    print(f"   Effective chunk size: {config.effective_max_chunk_size}")
    
    # 4. Runtime –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("\n4. Runtime –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    print(f"   Device: {config.current_device}")
    print(f"   Device manager: {config.device_manager}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    try:
        test_lattice_integration()
        test_model_cell_integration()
        test_moe_integration()
        test_training_integration()
        test_hardcoded_protection()
        test_config_mode_switching()
        test_config_access_patterns()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüí° –í—ã–≤–æ–¥—ã:")
        print("1. –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        print("2. –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥")
        print("3. –ó–∞—â–∏—Ç–∞ –æ—Ç hardcoded –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("4. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("5. –ü—Ä–µ—Å–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())