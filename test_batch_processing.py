#!/usr/bin/env python3
"""
Test Batch Processing
====================

–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ batch –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
"""

import torch
import pytest
import time
import numpy as np
from typing import Dict, List

from new_rebuild.core.moe.batch import BatchMoEProcessor, BatchProcessingAdapter
from new_rebuild.core.lattice import Lattice3D
from new_rebuild.core.lattice.spatial_optimization.batch_integration import (
    create_batch_optimized_spatial_optimizer,
    upgrade_lattice_to_batch
)
from new_rebuild.config import create_debug_config, set_project_config
from new_rebuild.utils.logging import get_logger

logger = get_logger(__name__)


class TestBatchProcessing:
    """–¢–µ—Å—Ç—ã –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    @pytest.fixture(autouse=True)
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º debug –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = create_debug_config()
        config.effective_max_chunk_size = 8  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä chunk'–∞
        set_project_config(config)
        
    def test_batch_vs_percell_correctness(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ batch –∏ per-cell –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        logger.info("üß™ Testing batch vs per-cell correctness...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ—à–µ—Ç–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞
        dimensions = (8, 8, 8)
        lattice = Lattice3D(dimensions=dimensions)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        initial_states = lattice.get_states().clone()
        
        # Forward pass —Å per-cell –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        lattice.spatial_optimizer.set_batch_enabled(False) if hasattr(lattice.spatial_optimizer, 'set_batch_enabled') else None
        percell_result = lattice.forward()
        percell_states = percell_result.clone()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        lattice.set_states(initial_states)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—à–µ—Ç–∫—É –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        lattice = upgrade_lattice_to_batch(lattice)
        lattice.set_batch_enabled(True)
        
        # Forward pass —Å batch –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        batch_result = lattice.forward()
        batch_states = batch_result.clone()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        max_diff = torch.max(torch.abs(percell_states - batch_states)).item()
        mean_diff = torch.mean(torch.abs(percell_states - batch_states)).item()
        
        logger.info(f"Max difference: {max_diff:.6f}")
        logger.info(f"Mean difference: {mean_diff:.6f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–ª–∏—á–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã (—Å —É—á–µ—Ç–æ–º floating point –æ—à–∏–±–æ–∫)
        assert max_diff < 1e-5, f"Results differ too much: max_diff={max_diff}"
        assert mean_diff < 1e-6, f"Results differ too much: mean_diff={mean_diff}"
        
        logger.info("‚úÖ Batch and per-cell processing produce identical results!")
    
    def test_batch_performance_improvement(self):
        """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å batch –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        logger.info("üß™ Testing batch performance improvement...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ—à–µ—Ç–∫–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        dimensions = (15, 15, 15)
        lattice = Lattice3D(dimensions=dimensions)
        
        # –ò–∑–º–µ—Ä—è–µ–º per-cell –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        logger.info("Testing per-cell performance...")
        percell_times = []
        for i in range(3):
            start = time.time()
            lattice.forward()
            percell_times.append(time.time() - start)
        
        avg_percell_time = np.mean(percell_times[1:])  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π (–ø—Ä–æ–≥—Ä–µ–≤)
        logger.info(f"Per-cell average time: {avg_percell_time*1000:.1f}ms")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        lattice = upgrade_lattice_to_batch(lattice)
        lattice.set_batch_enabled(True)
        
        # –ò–∑–º–µ—Ä—è–µ–º batch –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        logger.info("Testing batch performance...")
        batch_times = []
        for i in range(3):
            start = time.time()
            lattice.forward()
            batch_times.append(time.time() - start)
        
        avg_batch_time = np.mean(batch_times[1:])  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π (–ø—Ä–æ–≥—Ä–µ–≤)
        logger.info(f"Batch average time: {avg_batch_time*1000:.1f}ms")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        speedup = avg_percell_time / avg_batch_time if avg_batch_time > 0 else 0
        logger.info(f"üöÄ Speedup: {speedup:.2f}x")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        perf_report = lattice.get_batch_performance()
        logger.info(f"Performance report: {perf_report}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ
        assert speedup > 1.5, f"Expected significant speedup, got only {speedup:.2f}x"
        
        logger.info("‚úÖ Batch processing shows significant performance improvement!")
    
    def test_batch_adapter_fallback(self):
        """–¢–µ—Å—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        logger.info("üß™ Testing batch adapter fallback...")
        
        from new_rebuild.core.moe.moe_processor import MoEConnectionProcessor
        
        # –°–æ–∑–¥–∞–µ–º MoE –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        dimensions = (8, 8, 8)
        moe = MoEConnectionProcessor(lattice_dimensions=dimensions)
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º fallback
        adapter = BatchProcessingAdapter(
            moe_processor=moe,
            enable_batch=True,
            fallback_on_error=True
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        total_cells = np.prod(dimensions)
        states = torch.randn(total_cells, moe.state_size)
        cell_indices = [0, 10, 20, 30]  # –¢–µ—Å—Ç–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫–∏
        result = adapter.process_cells(
            cell_indices=cell_indices,
            full_lattice_states=states
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert len(result) == len(cell_indices), "Should process all cells"
        for idx in cell_indices:
            assert idx in result, f"Cell {idx} not processed"
            assert result[idx].shape == (moe.state_size,), f"Wrong shape for cell {idx}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = adapter.get_performance_comparison()
        logger.info(f"Adapter stats: {stats}")
        
        logger.info("‚úÖ Batch adapter works correctly with fallback!")
    
    def test_different_chunk_sizes(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ chunk'–æ–≤"""
        logger.info("üß™ Testing different chunk sizes...")
        
        dimensions = (15, 15, 15)
        results = []
        
        for chunk_size in [4, 8, 16, 32]:
            logger.info(f"\nTesting chunk size: {chunk_size}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º chunk'–∞
            config = create_debug_config()
            config.effective_max_chunk_size = chunk_size
            set_project_config(config)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É —Å batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            lattice = Lattice3D(dimensions=dimensions)
            lattice = upgrade_lattice_to_batch(lattice)
            lattice.set_batch_enabled(True)
            
            # –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            times = []
            for _ in range(3):
                start = time.time()
                lattice.forward()
                times.append(time.time() - start)
            
            avg_time = np.mean(times[1:])  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π
            
            results.append({
                "chunk_size": chunk_size,
                "avg_time_ms": avg_time * 1000,
                "performance": lattice.get_batch_performance()
            })
            
            logger.info(f"Chunk size {chunk_size}: {avg_time*1000:.1f}ms")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        best_result = min(results, key=lambda x: x["avg_time_ms"])
        logger.info(f"\nüèÜ Best chunk size: {best_result['chunk_size']} "
                   f"with {best_result['avg_time_ms']:.1f}ms")
        
        logger.info("‚úÖ Chunk size analysis completed!")


def run_performance_benchmark():
    """–ó–∞–ø—É—Å–∫ benchmark'–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    logger.info("=" * 60)
    logger.info("üèÅ BATCH PROCESSING PERFORMANCE BENCHMARK")
    logger.info("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    config = create_debug_config()
    set_project_config(config)
    
    test_dimensions = [(8, 8, 8), (15, 15, 15), (20, 20, 20)]
    results = []
    
    for dims in test_dimensions:
        logger.info(f"\nüìä Testing lattice {dims}...")
        
        # Per-cell baseline
        lattice = Lattice3D(dimensions=dims)
        percell_times = []
        for _ in range(5):
            start = time.time()
            lattice.forward()
            percell_times.append(time.time() - start)
        avg_percell = np.mean(percell_times[1:]) * 1000  # ms
        
        # Batch optimized
        lattice = upgrade_lattice_to_batch(lattice)
        lattice.set_batch_enabled(True)
        batch_times = []
        for _ in range(5):
            start = time.time()
            lattice.forward()
            batch_times.append(time.time() - start)
        avg_batch = np.mean(batch_times[1:]) * 1000  # ms
        
        speedup = avg_percell / avg_batch if avg_batch > 0 else 0
        
        results.append({
            "dimensions": dims,
            "total_cells": np.prod(dims),
            "percell_ms": avg_percell,
            "batch_ms": avg_batch,
            "speedup": speedup
        })
        
        logger.info(f"Per-cell: {avg_percell:.1f}ms, Batch: {avg_batch:.1f}ms, Speedup: {speedup:.2f}x")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
    logger.info("\n" + "=" * 60)
    logger.info("üìà BENCHMARK RESULTS")
    logger.info("=" * 60)
    logger.info(f"{'Lattice':<15} {'Cells':<10} {'Per-cell':<12} {'Batch':<12} {'Speedup':<10}")
    logger.info("-" * 60)
    
    for r in results:
        dims_str = f"{r['dimensions'][0]}x{r['dimensions'][1]}x{r['dimensions'][2]}"
        logger.info(
            f"{dims_str:<15} {r['total_cells']:<10} "
            f"{r['percell_ms']:<12.1f} {r['batch_ms']:<12.1f} "
            f"{r['speedup']:<10.2f}x"
        )
    
    avg_speedup = np.mean([r["speedup"] for r in results])
    logger.info(f"\nüéØ Average speedup: {avg_speedup:.2f}x")
    

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test = TestBatchProcessing()
    test.setup()
    
    try:
        test.test_batch_vs_percell_correctness()
        test.test_batch_performance_improvement()
        test.test_batch_adapter_fallback()
        test.test_different_chunk_sizes()
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ benchmark'–∞
        run_performance_benchmark()
        
    except Exception as e:
        logger.error(f"Test failed: {e}")
        raise