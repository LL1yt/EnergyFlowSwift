#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Ä–µ—à–µ—Ç–∫–∏

–†–∞—Å—Å–ª–µ–¥—É–µ–º –ø–æ—á–µ–º—É –ø–æ–ª—É—á–∞–µ—Ç—Å—è 7√ó7√ó3 –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö 16√ó16√ó16+

–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. Scale factor –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã
2. Progressive scaling –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
3. Expression evaluation –≤ dynamic config
4. –ü–µ—Ä–µ–¥–∞—á–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ stage runner
5. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ—à–µ—Ç–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö
"""

import sys
import os
import tempfile
import yaml
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(str(Path(__file__).parent))

from training.automated_training.types import StageConfig
from training.automated_training.progressive_config import ProgressiveConfigManager
from training.automated_training.stage_runner import TrainingStageRunner
from utils.config_manager.dynamic_config import (
    DynamicConfigGenerator,
    DynamicConfigManager,
)


def test_scale_factor_impact():
    """–¢–µ—Å—Ç –≤–ª–∏—è–Ω–∏—è scale factor –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è scale factor –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏...")

    scale_factors = [0.001, 0.01, 0.1, 1.0]

    for scale in scale_factors:
        print(f"\n--- Scale Factor: {scale} ---")

        # –°–æ–∑–¥–∞–µ–º dynamic config manager —Å —Ä–∞–∑–Ω—ã–º–∏ scale
        dynamic_manager = DynamicConfigManager()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π scale
        setattr(dynamic_manager.generator.scale_settings, "development", scale)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_data = dynamic_manager.create_config_for_mode("development")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏
        lattice_config = config_data.get("lattice", {})
        width = lattice_config.get("lattice_width", "unknown")
        height = lattice_config.get("lattice_height", "unknown")
        depth = lattice_config.get("lattice_depth", "unknown")

        print(f"   Lattice dimensions: {width}√ó{height}√ó{depth}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        bio_constants = dynamic_manager.generator.bio_constants
        print(
            f"   Base dimensions: {bio_constants.base_width}√ó{bio_constants.base_height}√ó{bio_constants.base_depth}"
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        expected_width = int(bio_constants.base_width * scale)
        expected_height = int(bio_constants.base_height * scale)
        expected_depth = int(bio_constants.base_depth * scale)

        print(f"   Expected: {expected_width}√ó{expected_height}√ó{expected_depth}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ expression evaluation
        if isinstance(width, str) and width.startswith("{"):
            print(f"   ‚ö†Ô∏è  Width is expression: {width}")
        if isinstance(height, str) and height.startswith("{"):
            print(f"   ‚ö†Ô∏è  Height is expression: {height}")
        if isinstance(depth, str) and depth.startswith("{"):
            print(f"   ‚ö†Ô∏è  Depth is expression: {depth}")


def test_progressive_scaling_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ progressive scaling"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ progressive scaling...")

    # –°–æ–∑–¥–∞–µ–º stage configs —Å progressive scaling
    for stage in [1, 2, 3, 4, 5]:
        print(f"\n--- Stage {stage} Analysis ---")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∞–¥–∏–∏
        stage_config = StageConfig(
            stage=stage,
            dataset_limit=100,
            epochs=2,
            batch_size=16,
            description=f"Debug Stage {stage}",
            plasticity_profile="learning",
            clustering_enabled=True,
            activity_threshold=0.03,
            memory_optimizations=True,
            emergence_tracking=True,
            progressive_scaling=True,  # –ö–ª—é—á–µ–≤–∞—è –æ–ø—Ü–∏—è
        )

        # –°–æ–∑–¥–∞–µ–º runner
        runner = TrainingStageRunner(mode="development", scale=0.01, verbose=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        adaptive_dims = runner._get_adaptive_dimensions(stage)
        print(
            f"   Adaptive dimensions: {adaptive_dims[0]}√ó{adaptive_dims[1]}√ó{adaptive_dims[2]}"
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        temp_config_path = runner._generate_temp_config(stage_config)

        if temp_config_path:
            with open(temp_config_path, "r", encoding="utf-8") as f:
                config_data = yaml.safe_load(f)

            lattice_config = config_data.get("lattice", {})
            actual_width = lattice_config.get("lattice_width", "unknown")
            actual_height = lattice_config.get("lattice_height", "unknown")
            actual_depth = lattice_config.get("lattice_depth", "unknown")

            print(f"   Generated config: {actual_width}√ó{actual_height}√ó{actual_depth}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if (actual_width, actual_height, actual_depth) == adaptive_dims:
                print("   ‚úÖ Progressive scaling –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("   ‚ùå Progressive scaling –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                print(f"      Expected: {adaptive_dims}")
                print(
                    f"      Actual: ({actual_width}, {actual_height}, {actual_depth})"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏
            if "plasticity" in config_data:
                print("   ‚úÖ Plasticity section present")
            else:
                print("   ‚ùå Plasticity section missing")

            if "optimization" in config_data:
                print("   ‚úÖ Optimization section present")
            else:
                print("   ‚ùå Optimization section missing")

            os.remove(temp_config_path)
        else:
            print("   ‚ùå Failed to generate config")


def test_expression_evaluation():
    """–¢–µ—Å—Ç evaluation –≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤ dynamic config"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ expression evaluation...")

    generator = DynamicConfigGenerator()

    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    test_expressions = [
        "{smart_round(666 * 0.01)}",
        "{int(666 * 0.01)}",
        "{666 * 0.01}",
        "{lattice_width}",
        "{smart_round(lattice_width * 0.5)}",
    ]

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    test_context = {
        "lattice_width": 666,
        "lattice_height": 666,
        "lattice_depth": 333,
        "scale": 0.01,
    }

    print("Testing expression evaluation:")
    for expr in test_expressions:
        try:
            result = generator.evaluator.evaluate_expression(expr, test_context)
            print(f"   {expr} ‚Üí {result} (type: {type(result).__name__})")
        except Exception as e:
            print(f"   {expr} ‚Üí ERROR: {e}")


def test_full_pipeline_tracing():
    """–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ pipeline –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîç –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ pipeline...")

    # –°–æ–∑–¥–∞–µ–º stage config —Å progressive scaling
    stage_config = StageConfig(
        stage=2,
        dataset_limit=100,
        epochs=2,
        batch_size=16,
        description="Full Pipeline Debug",
        plasticity_profile="learning",
        clustering_enabled=True,
        activity_threshold=0.025,
        memory_optimizations=True,
        emergence_tracking=True,
        progressive_scaling=True,
    )

    print("1. Stage Config Created:")
    print(f"   Stage: {stage_config.stage}")
    print(f"   Progressive scaling: {stage_config.progressive_scaling}")

    # –°–æ–∑–¥–∞–µ–º runner
    runner = TrainingStageRunner(mode="development", scale=0.01, verbose=True)

    print("\n2. TrainingStageRunner Created:")
    print(f"   Mode: {runner.mode}")
    print(f"   Scale: {runner.scale}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    adaptive_dims = runner._get_adaptive_dimensions(stage_config.stage)
    print(f"\n3. Adaptive Dimensions:")
    print(f"   Expected: {adaptive_dims[0]}√ó{adaptive_dims[1]}√ó{adaptive_dims[2]}")

    # –°–æ–∑–¥–∞–µ–º dynamic manager
    dynamic_manager = DynamicConfigManager()

    print("\n4. Dynamic Config Manager:")
    print(f"   Scale settings: {dynamic_manager.generator.scale_settings.development}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scale –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if runner.scale is not None:
        setattr(dynamic_manager.generator.scale_settings, runner.mode, runner.scale)
        print(f"   Applied custom scale: {runner.scale}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_data = dynamic_manager.create_config_for_mode(runner.mode)

    print("\n5. Base Config Generated:")
    lattice_config = config_data.get("lattice", {})
    print(
        f"   Base lattice: {lattice_config.get('lattice_width')}√ó{lattice_config.get('lattice_height')}√ó{lattice_config.get('lattice_depth')}"
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimized_config = runner._prepare_config_with_optimizations(
        config_data, stage_config
    )

    print("\n6. Optimized Config Applied:")
    opt_lattice_config = optimized_config.get("lattice", {})
    print(
        f"   Final lattice: {opt_lattice_config.get('lattice_width')}√ó{opt_lattice_config.get('lattice_height')}√ó{opt_lattice_config.get('lattice_depth')}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ progressive scaling –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è
    if stage_config.progressive_scaling:
        expected_width, expected_height, expected_depth = adaptive_dims
        actual_width = opt_lattice_config.get("lattice_width")
        actual_height = opt_lattice_config.get("lattice_height")
        actual_depth = opt_lattice_config.get("lattice_depth")

        print("\n7. Progressive Scaling Check:")
        print(f"   Expected: {expected_width}√ó{expected_height}√ó{expected_depth}")
        print(f"   Actual: {actual_width}√ó{actual_height}√ó{actual_depth}")

        if (actual_width, actual_height, actual_depth) == (
            expected_width,
            expected_height,
            expected_depth,
        ):
            print("   ‚úÖ Progressive scaling applied correctly")
        else:
            print("   ‚ùå Progressive scaling NOT applied correctly")
            print("   üîç This is likely the source of the 7√ó7√ó3 issue!")

    return optimized_config


def diagnose_smart_resume_integration():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å smart_resume_training"""
    print("\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ smart_resume_training...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ smart_resume_training –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("Checking smart_resume_training config flow:")
    print("1. TrainingStageRunner generates temp config")
    print("2. smart_resume_training.py loads temp config")
    print("3. Config initializer processes loaded config")

    # –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–∫–∏ —Å–±–æ—è:
    problems = [
        "Temp config –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã",
        "smart_resume_training –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏",
        "Config initializer –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã",
        "Scale factor –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã (compound scaling)",
        "Expression evaluation –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
    ]

    print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–∫–∏ —Å–±–æ—è:")
    for i, problem in enumerate(problems, 1):
        print(f"   {i}. {problem}")

    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:")
    print("1. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏ –≤ smart_resume_training.py –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–µ—à–µ—Ç–∫–∏")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å config_initializer.py –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ä–∞–∑–º–µ—Ä–æ–≤")
    print("3. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤ _prepare_config_with_optimizations")
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å expression evaluation")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –†–ê–ó–ú–ï–†–ê–ú–ò –†–ï–®–ï–¢–ö–ò")
    print("=" * 70)
    print("–¶–µ–ª—å: –ü–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É –ø–æ–ª—É—á–∞–µ—Ç—Å—è 7√ó7√ó3 –≤–º–µ—Å—Ç–æ 16√ó16√ó16+")
    print()

    try:
        # 1. –¢–µ—Å—Ç –≤–ª–∏—è–Ω–∏—è scale factor
        test_scale_factor_impact()

        # 2. –¢–µ—Å—Ç progressive scaling
        test_progressive_scaling_integration()

        # 3. –¢–µ—Å—Ç expression evaluation
        test_expression_evaluation()

        # 4. –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
        final_config = test_full_pipeline_tracing()

        # 5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ smart_resume –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        diagnose_smart_resume_integration()

        print("\n" + "=" * 70)
        print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print()
        print("üìä –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        debug_config_path = "debug_final_config.yaml"
        with open(debug_config_path, "w", encoding="utf-8") as f:
            yaml.dump(final_config, f, allow_unicode=True, indent=2)

        print(f"üíæ –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {debug_config_path}")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
        print()
        print("üîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–µ—Å—Ç–∞")
        print("3. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")

        return True

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
