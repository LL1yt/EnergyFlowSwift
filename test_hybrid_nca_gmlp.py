#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã NCA + GatedMLP
========================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. MinimalNCACell —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (69 params)
2. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è NCA
3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
4. –í–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import sys
import os
import torch
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.abspath("."))

from core.cell_prototype.architectures.minimal_nca_cell import (
    MinimalNCACell,
    create_nca_cell_from_config,
)
from core.lattice_3d import create_lattice_from_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def test_nca_fixed_scaling():
    """–¢–µ—Å—Ç MinimalNCACell —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MinimalNCACell —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π NCA –∫–ª–µ—Ç–∫–∏
    nca_config = {
        "state_size": 36,
        "neighbor_count": 26,
        "hidden_dim": 6,
        "external_input_size": 2,
        "activation": "tanh",
        "target_params": 69,
        "enable_lattice_scaling": False,  # –ö–†–ò–¢–ò–ß–ù–û: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        cell_fixed = MinimalNCACell(**nca_config)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        total_params = sum(p.numel() for p in cell_fixed.parameters())
        info = cell_fixed.get_info()

        logger.info(f"[NCA-FIXED] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {total_params}")
        logger.info(f"[NCA-FIXED] –†–µ–∂–∏–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {info['scaling_mode']}")
        logger.info(
            f"[NCA-FIXED] –†–∞–∑–º–µ—Ä—ã: state={info['state_size']}, hidden={info['hidden_dim']}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert (
            info["scaling_mode"] == "fixed"
        ), f"Expected fixed scaling, got {info['scaling_mode']}"
        assert (
            info["state_size"] == 36
        ), f"Expected state_size=36, got {info['state_size']}"
        assert (
            info["hidden_dim"] == 6
        ), f"Expected hidden_dim=6, got {info['hidden_dim']}"
        assert total_params <= 100, f"Expected ‚â§100 params, got {total_params}"

        logger.info("‚úÖ MinimalNCACell —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –û–ö")
        return True

    except Exception as e:
        logger.error(f"‚ùå MinimalNCACell —Ç–µ—Å—Ç failed: {e}")
        return False


def test_nca_dynamic_scaling():
    """–¢–µ—Å—Ç MinimalNCACell —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MinimalNCACell —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")

    # –¢–∞ –∂–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –Ω–æ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    nca_config = {
        "state_size": 36,
        "neighbor_count": 26,
        "hidden_dim": 6,
        "external_input_size": 2,
        "activation": "tanh",
        "target_params": 1000,  # –ë–æ–ª—å—à–∏–π target –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        "enable_lattice_scaling": True,  # –í–∫–ª—é—á–µ–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    }

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        cell_dynamic = MinimalNCACell(**nca_config)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        total_params = sum(p.numel() for p in cell_dynamic.parameters())
        info = cell_dynamic.get_info()

        logger.info(f"[NCA-DYNAMIC] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {total_params}")
        logger.info(f"[NCA-DYNAMIC] –†–µ–∂–∏–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {info['scaling_mode']}")
        logger.info(
            f"[NCA-DYNAMIC] –†–∞–∑–º–µ—Ä—ã: state={info['state_size']}, hidden={info['hidden_dim']}"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert (
            info["scaling_mode"] == "dynamic"
        ), f"Expected dynamic scaling, got {info['scaling_mode']}"
        assert (
            info["state_size"] > 36
        ), f"Expected scaled state_size>36, got {info['state_size']}"

        logger.info("‚úÖ MinimalNCACell –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –û–ö")
        return True

    except Exception as e:
        logger.error(f"‚ùå MinimalNCACell dynamic test failed: {e}")
        return False


def test_hybrid_config_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è NCA –∫–ª–µ—Ç–∫–∏ –∏–∑ –≥–∏–±—Ä–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è NCA –∏–∑ –≥–∏–±—Ä–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ hybrid_nca_gmlp.yaml
    hybrid_config = {
        "minimal_nca_cell": {
            "state_size": 36,
            "neighbor_count": 26,
            "hidden_dim": 6,
            "external_input_size": 2,
            "activation": "tanh",
            "target_params": 69,
            "enable_lattice_scaling": False,  # –ö–†–ò–¢–ò–ß–ù–û
        }
    }

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        cell = create_nca_cell_from_config(hybrid_config)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        total_params = sum(p.numel() for p in cell.parameters())
        info = cell.get_info()

        logger.info(f"[CONFIG] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {total_params}")
        logger.info(f"[CONFIG] –†–µ–∂–∏–º: {info['scaling_mode']}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert (
            info["scaling_mode"] == "fixed"
        ), "Config should create fixed scaling cell"
        assert total_params <= 100, f"Expected ‚â§100 params, got {total_params}"

        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –≥–∏–±—Ä–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –û–ö")
        return True

    except Exception as e:
        logger.error(f"‚ùå Config creation test failed: {e}")
        return False


def test_forward_pass():
    """–¢–µ—Å—Ç forward pass —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π NCA –∫–ª–µ—Ç–∫–æ–π"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ forward pass...")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π NCA –∫–ª–µ—Ç–∫–∏
    cell = MinimalNCACell(
        state_size=36,
        neighbor_count=26,
        hidden_dim=6,
        external_input_size=2,
        enable_lattice_scaling=False,
        target_params=69,
    )

    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        batch_size = 4
        neighbor_states = torch.randn(batch_size, 26, 36)
        own_state = torch.randn(batch_size, 36)
        external_input = torch.randn(batch_size, 2)

        # Forward pass
        new_state = cell(neighbor_states, own_state, external_input)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert new_state.shape == (
            batch_size,
            36,
        ), f"Wrong output shape: {new_state.shape}"
        assert not torch.isnan(new_state).any(), "NaN values in output"
        assert not torch.isinf(new_state).any(), "Inf values in output"

        logger.info(f"[FORWARD] Input shape: {own_state.shape}")
        logger.info(f"[FORWARD] Output shape: {new_state.shape}")
        logger.info(f"[FORWARD] Output norm: {new_state.norm().item():.4f}")

        logger.info("‚úÖ Forward pass: –û–ö")
        return True

    except Exception as e:
        logger.error(f"‚ùå Forward pass test failed: {e}")
        return False


def test_parameter_efficiency():
    """–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")

    configs = [
        {"target_params": 69, "enable_lattice_scaling": False, "expected_max": 100},
        {"target_params": 150, "enable_lattice_scaling": False, "expected_max": 200},
        {"target_params": 300, "enable_lattice_scaling": False, "expected_max": 400},
    ]

    results = []

    for config in configs:
        try:
            cell = MinimalNCACell(
                state_size=36,
                neighbor_count=26,
                hidden_dim=6,
                target_params=config["target_params"],
                enable_lattice_scaling=config["enable_lattice_scaling"],
            )

            total_params = sum(p.numel() for p in cell.parameters())
            efficiency = total_params / config["target_params"]

            logger.info(
                f"[EFFICIENCY] Target: {config['target_params']}, Actual: {total_params}, Ratio: {efficiency:.2f}"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            assert (
                total_params <= config["expected_max"]
            ), f"Too many params: {total_params} > {config['expected_max']}"

            results.append(
                {
                    "target": config["target_params"],
                    "actual": total_params,
                    "efficiency": efficiency,
                }
            )

        except Exception as e:
            logger.error(
                f"‚ùå Efficiency test failed for {config['target_params']}: {e}"
            )
            return False

    logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
    for result in results:
        logger.info(
            f"   Target: {result['target']}, Actual: {result['actual']}, Efficiency: {result['efficiency']:.2f}x"
        )

    logger.info("‚úÖ Parameter efficiency: –û–ö")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–∏–±—Ä–∏–¥–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã NCA+GatedMLP")
    logger.info("=" * 60)

    tests = [
        ("NCA Fixed Scaling", test_nca_fixed_scaling),
        ("NCA Dynamic Scaling", test_nca_dynamic_scaling),
        ("Hybrid Config Creation", test_hybrid_config_creation),
        ("Forward Pass", test_forward_pass),
        ("Parameter Efficiency", test_parameter_efficiency),
    ]

    results = []

    for test_name, test_func in tests:
        logger.info(f"\nüîç –¢–µ—Å—Ç: {test_name}")
        logger.info("-" * 40)

        success = test_func()
        results.append((test_name, success))

        if success:
            logger.info(f"‚úÖ {test_name}: PASSED")
        else:
            logger.error(f"‚ùå {test_name}: FAILED")

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 60)
    logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info("=" * 60)

    passed = sum(1 for _, success in results if success)
    total = len(results)

    for test_name, success in results:
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        logger.info(f"   {test_name}: {status}")

    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")

    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≥–∏–±—Ä–∏–¥–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üî• –ì–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ –§–∞–∑–µ 2.1 (Spatial Hashing)")
        return True
    else:
        logger.error("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
