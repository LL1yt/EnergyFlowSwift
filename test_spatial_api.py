#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API spatial optimizer"""

from new_rebuild.config import SimpleProjectConfig
from new_rebuild.core.lattice.lattice import Lattice3D

print("üîç –¢–µ—Å—Ç API spatial optimizer...")

config = SimpleProjectConfig()
lattice = Lattice3D()

print(f"üìä Spatial optimizer type: {type(lattice.spatial_optimizer)}")
print(f"üìä Available methods:")

# –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
methods = [method for method in dir(lattice.spatial_optimizer) if not method.startswith('_')]
for method in methods[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –º–µ—Ç–æ–¥–æ–≤
    print(f"  - {method}")

# –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å find_neighbors_optimized
try:
    coords = [0, 0, 0]  # —É–≥–æ–ª –∫—É–±–∞
    neighbors = lattice.spatial_optimizer.find_neighbors_optimized(coords, 1.5)
    print(f"\n‚úÖ find_neighbors_optimized —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ {len(neighbors)} —Å–æ—Å–µ–¥–µ–π –¥–ª—è {coords}")
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ find_neighbors_optimized: {e}")
    print(f"üìä –ü–æ–ª–Ω—ã–π traceback:")
    import traceback
    traceback.print_exc()

print("\n‚úÖ –¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω")