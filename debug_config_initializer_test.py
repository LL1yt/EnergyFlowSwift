#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ config_initializer —Ç–µ—Å—Ç–∞
"""

import tempfile
import yaml
from pathlib import Path


def test_config_initializer_debug():
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç config_initializer —Å –ª–æ–≥–∞–º–∏"""
    print("üîç –ü–û–î–†–û–ë–ù–´–ô –î–ï–ë–ê–ì config_initializer")
    print("=" * 60)

    try:
        from smart_resume_training.core.config_initializer import ConfigInitializer
        from utils.config_manager.dynamic_config import DynamicConfigGenerator

        # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        generator = DynamicConfigGenerator()
        test_config = generator.generate_config("development")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª
        print("üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        architecture_debug = test_config.get("architecture", {})
        emergent_debug = test_config.get("emergent_training", {})
        print(f"   architecture.hybrid_mode: {architecture_debug.get('hybrid_mode')}")
        print(
            f"   architecture.neuron_architecture: {architecture_debug.get('neuron_architecture')}"
        )
        print(
            f"   emergent_training.cell_architecture: {emergent_debug.get('cell_architecture')}"
        )

        # –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        print("\n2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª...")
        with tempfile.NamedTemporaryFile(mode="w", suffix=".yaml", delete=False) as f:
            yaml.dump(test_config, f)
            temp_path = f.name

        print(f"   –§–∞–π–ª: {temp_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        print("üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
        with open(temp_path, "r", encoding="utf-8") as f:
            file_content = f.read()

        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        if "hybrid_mode: true" in file_content:
            print("   ‚úÖ hybrid_mode: true –Ω–∞–π–¥–µ–Ω")
        elif "hybrid_mode: false" in file_content:
            print("   ‚ùå hybrid_mode: false –Ω–∞–π–¥–µ–Ω")
        else:
            print("   ‚ùì hybrid_mode –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if "cell_architecture: nca" in file_content:
            print("   ‚úÖ cell_architecture: nca –Ω–∞–π–¥–µ–Ω")
        elif "cell_architecture: gmlp" in file_content:
            print("   ‚ùå cell_architecture: gmlp –Ω–∞–π–¥–µ–Ω")
        else:
            print("   ‚ùì cell_architecture –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ ConfigInitializer
        print("\n3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ ConfigInitializer...")
        initializer = ConfigInitializer(temp_path)
        config = initializer.config

        print("üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        architecture_loaded = config.get("architecture", {})
        emergent_loaded = config.get("emergent_training", {})
        print(f"   architecture.hybrid_mode: {architecture_loaded.get('hybrid_mode')}")
        print(
            f"   emergent_training.cell_architecture: {emergent_loaded.get('cell_architecture')}"
        )

        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ç–µ—Å—Ç–∞
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ç–µ—Å—Ç–∞...")
        hybrid_mode = architecture_loaded.get("hybrid_mode", False)
        cell_architecture = emergent_loaded.get("cell_architecture", "gmlp")

        print(f"   hybrid_mode = {hybrid_mode}")
        print(f"   cell_architecture = {cell_architecture}")
        print(f"   –£—Å–ª–æ–≤–∏–µ: hybrid_mode={hybrid_mode} AND cell_architecture='nca'")

        if hybrid_mode and cell_architecture == "nca":
            print("   ‚úÖ –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
            success = True
        else:
            print("   ‚ùå –£—Å–ª–æ–≤–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
            success = False

        # –®–∞–≥ 5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print("\n5Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º NCA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        nca_config = emergent_loaded.get("nca_config", {})
        minimal_nca = config.get("minimal_nca_cell", {})

        print(f"   emergent_training.nca_config: {bool(nca_config)}")
        print(f"   minimal_nca_cell: {bool(minimal_nca)}")

        if nca_config:
            print(f"   nca_config.state_size: {nca_config.get('state_size')}")
        if minimal_nca:
            print(f"   minimal_nca.state_size: {minimal_nca.get('state_size')}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Path(temp_path).unlink()

        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ –£–°–ü–ï–•' if success else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    test_config_initializer_debug()
