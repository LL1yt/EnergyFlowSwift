graph TB
    %% –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Module 2
    subgraph "INPUT"
        EM[["Processed Embedding<br/>(768D –æ—Ç EmbeddingProcessor)"]]
    end
    
    %% –¢—Ä–∏ –ø–æ–¥—Ö–æ–¥–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ç—É—Å implementation)
    subgraph "DECODER SELECTION"
        DS["DecoderFactory<br/>‚è≥ Configuration-Based Selection"]
        
        DS --> PBD["PhraseBankDecoder<br/>‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù (Stage 1.1)"]
        DS --> GD["GenerativeDecoder<br/>üìã –ü–õ–ê–ù–ò–†–£–ï–¢–°–Ø (Stage 2)"]  
        DS --> HD["HybridDecoder<br/>üìã –ü–õ–ê–ù–ò–†–£–ï–¢–°–Ø (Stage 3)"]
    end
    
    %% PhraseBankDecoder –¥–µ—Ç–∞–ª–∏ ‚úÖ –ì–û–¢–û–í–û
    subgraph "PHRASE BANK APPROACH ‚úÖ –ì–û–¢–û–í–û"
        PB["PhraseBank<br/>‚úÖ 25 sample phrases loaded"]
        IDX["Search Index<br/>‚úÖ Linear/FAISS support"]
        SIM["Similarity Matching<br/>‚úÖ Cosine similarity <10ms"]
        ASM["Text Assembly<br/>‚úÖ Weighted/Greedy/Beam methods"]
        
        PBD --> PB
        PB --> IDX
        IDX --> SIM
        SIM --> ASM
    end
    
    %% GenerativeDecoder –¥–µ—Ç–∞–ª–∏ (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)
    subgraph "GENERATIVE APPROACH üìã –ü–õ–ê–ù–ò–†–£–ï–¢–°–Ø"
        EMB["Embedding Input Layer<br/>üìã 768D ‚Üí Hidden"]
        TRF["Mini Transformer<br/>üìã 4 layers, 8 heads"]
        VOC["Vocabulary Projection<br/>üìã 32K tokens"]
        SAMP["Temperature Sampling<br/>üìã Controlled Generation"]
        
        GD --> EMB
        EMB --> TRF
        TRF --> VOC
        VOC --> SAMP
    end
    
    %% HybridDecoder –¥–µ—Ç–∞–ª–∏ (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)
    subgraph "HYBRID APPROACH üìã –ü–õ–ê–ù–ò–†–£–ï–¢–°–Ø"
        CONF["Confidence Scoring<br/>üìã Route Decision"]
        ROUTE["Dynamic Routing<br/>üìã Phrase vs Generation"]
        COMB["Result Combination<br/>üìã Quality Optimization"]
        
        HD --> CONF
        CONF --> ROUTE
        ROUTE --> PBD
        ROUTE --> GD
        PBD --> COMB
        GD --> COMB
    end
    
    %% –ö–∞—á–µ—Å—Ç–≤–æ –∏ –æ—Ü–µ–Ω–∫–∞ ‚úÖ –ì–û–¢–û–í–û
    subgraph "QUALITY ASSESSMENT ‚úÖ –ì–û–¢–û–í–û"
        BLEU["BLEU Score<br/>‚úÖ Framework ready"]
        ROUGE["ROUGE Score<br/>‚úÖ Framework ready"]
        SEM["Semantic Similarity<br/>‚úÖ Working"]
        COH["Coherence Score<br/>‚úÖ Implemented"]
    end
    
    %% –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚úÖ –ì–û–¢–û–í–û
    subgraph "OUTPUT ‚úÖ –ì–û–¢–û–í–û"
        TXT[["Generated Text<br/>‚úÖ Natural Language Output"]]
        METRICS[["Quality Metrics<br/>‚úÖ Performance Stats"]]
    end
    
    %% –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π ‚úÖ –ì–û–¢–û–í–û
    subgraph "SYSTEM INTEGRATION ‚úÖ –ì–û–¢–û–í–û"
        MOD1["Module 1<br/>‚úÖ EmbeddingLoader"]
        MOD2["Module 2<br/>‚è≥ EmbeddingProcessor"]
        MOD3["Module 3<br/>‚úÖ PhraseBankDecoder"]
        PIPE["End-to-End Pipeline<br/>‚úÖ Module 1 ‚Üí Module 3"]
    end
    
    %% –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚úÖ –ì–û–¢–û–í–û
    subgraph "CONFIGURATION ‚úÖ –ì–û–¢–û–í–û"
        YAML["lightweight_decoder.yaml<br/>‚úÖ Settings configured"]
        CACHE["CacheManager<br/>‚úÖ Phrase caching"]
        ERR["Error Handling<br/>‚úÖ RTX 5090 CPU fallback"]
    end
    
    %% –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û
    subgraph "TESTING ‚úÖ CHECKPOINT 1.1 PASSED"
        TEST1["‚úÖ Phrase Bank Loading"]
        TEST2["‚úÖ Similarity Search"]
        TEST3["‚úÖ Performance <10ms"]
        TEST4["‚úÖ PhraseBankDecoder"]
        TEST5["‚úÖ Module Integration"]
    end
    
    %% –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤—è–∑–∏ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
    EM --> DS
    
    ASM --> TXT
    %% SAMP --> TXT  (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
    %% COMB --> TXT  (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
    
    TXT --> BLEU
    TXT --> ROUGE
    TXT --> SEM
    TXT --> COH
    
    BLEU --> METRICS
    ROUGE --> METRICS
    SEM --> METRICS
    COH --> METRICS
    
    %% –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)
    MOD1 --> MOD3  %% –ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Module 1 ‚Üí Module 3
    %% MOD2 --> MOD3  (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤ –±—É–¥—É—â–µ–º)
    MOD3 --> PIPE
    
    %% –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
    YAML --> DS
    CACHE --> PBD
    ERR --> PBD
    
    %% –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏
    PBD --> TEST1
    PBD --> TEST2
    PBD --> TEST3
    PBD --> TEST4
    MOD1 --> TEST5
    
    %% –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    classDef input fill:#e1f5fe
    classDef decoder fill:#fff3e0
    classDef phrase_ready fill:#c8e6c9   %% –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ
    classDef generative_planned fill:#ffecb3   %% –ñ–µ–ª—Ç—ã–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ
    classDef hybrid_planned fill:#ffecb3       %% –ñ–µ–ª—Ç—ã–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ
    classDef quality_ready fill:#c8e6c9       %% –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ
    classDef output_ready fill:#c8e6c9        %% –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ
    classDef system_ready fill:#c8e6c9        %% –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ
    classDef config_ready fill:#c8e6c9        %% –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ
    classDef test_passed fill:#4caf50         %% –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    
    class EM input
    class DS decoder
    class PBD,PB,IDX,SIM,ASM phrase_ready
    class GD,EMB,TRF,VOC,SAMP generative_planned
    class HD,CONF,ROUTE,COMB hybrid_planned
    class BLEU,ROUGE,SEM,COH quality_ready
    class TXT,METRICS output_ready
    class MOD1,MOD2,MOD3,PIPE system_ready
    class YAML,CACHE,ERR config_ready
    class TEST1,TEST2,TEST3,TEST4,TEST5 test_passed 