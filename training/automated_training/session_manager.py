"""
Session Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞,
—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–æ–∫ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.
"""

import json
import logging
from pathlib import Path
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
from dataclasses import asdict

from .types import StageResult, SessionSummary
from . import session_persistence

logger = logging.getLogger(__name__)


class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""

    def __init__(
        self,
        mode: str = "development",
        scale: Optional[float] = None,
        max_total_time_hours: float = 8.0,
    ):
        """
        Args:
            mode: –†–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            scale: Custom scale factor
            max_total_time_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö
        """
        self.mode = mode
        self.scale = scale
        self.max_total_time_hours = max_total_time_hours
        self.start_time = datetime.now()

        # –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è
        self.training_history: List[StageResult] = []

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        self.log_dir = Path("logs/automated_training")
        self.log_dir.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–æ–≤
        Path("logs").mkdir(exist_ok=True)

        # –§–∞–π–ª –ª–æ–≥–∞ —Å–µ—Å—Å–∏–∏
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.session_log = self.log_dir / f"automated_session_{timestamp}.json"

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if max_total_time_hours > 4:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            logger.warning(
                f"[SESSION] Long training session: {self.max_total_time_hours}h"
            )

    def add_stage_result(self, result: StageResult):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–¥–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.training_history.append(result)
        self.save_session()

    def get_session_summary(self) -> SessionSummary:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        successful_stages = [h for h in self.training_history if h.success]

        if not successful_stages:
            return SessionSummary(
                total_stages=0,
                total_time_minutes=0.0,
                best_similarity=None,
                avg_similarity=None,
                similarity_trend=[],
            )

        total_time = sum(h.actual_time_minutes for h in successful_stages)
        similarities = [
            h.final_similarity
            for h in successful_stages
            if h.final_similarity is not None
        ]

        return SessionSummary(
            total_stages=len(successful_stages),
            total_time_minutes=total_time,
            best_similarity=max(similarities) if similarities else None,
            avg_similarity=(
                sum(similarities) / len(similarities) if similarities else None
            ),
            similarity_trend=(
                similarities[-3:] if len(similarities) >= 3 else similarities
            ),
        )

    def should_continue_session(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è"""
        elapsed_hours = (datetime.now() - self.start_time).total_seconds() / 3600

        if elapsed_hours >= self.max_total_time_hours:
            logger.warning(f"‚è∞ Time limit reached: {elapsed_hours:.1f}h")
            return False

        return True

    def get_remaining_time_hours(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Å–∞—Ö"""
        elapsed_hours = (datetime.now() - self.start_time).total_seconds() / 3600
        return max(0, self.max_total_time_hours - elapsed_hours)

    def get_elapsed_time_hours(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Å–∞—Ö"""
        return (datetime.now() - self.start_time).total_seconds() / 3600

    def log_session_start(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ)"""
        logger.warning(f"üéØ AUTOMATED TRAINING SESSION STARTED")
        logger.warning(f"   Duration: {self.max_total_time_hours}h | Mode: {self.mode}")
        if self.scale:
            logger.warning(f"   Scale: {self.scale}")

    def log_stage_start(self, stage: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Å—Ç–∞–¥–∏–∏ (—É–±—Ä–∞–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        pass

    def log_stage_completion(self, result: StageResult, stage_duration: float):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        summary = self.get_session_summary()
        elapsed_total = self.get_elapsed_time_hours()
        remaining_time = self.get_remaining_time_hours()

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é 3-—é —Å—Ç–∞–¥–∏—é –∏–ª–∏ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
        if result.stage % 3 == 0 or not result.success or remaining_time < 1.0:
            logger.warning(
                f"üìä Progress: Stage {result.stage} | {elapsed_total:.1f}h/{self.max_total_time_hours}h"
            )
            if summary.best_similarity:
                logger.warning(f"   Best similarity: {summary.best_similarity:.3f}")
            if remaining_time < 1.0:
                logger.warning(f"   ‚ö†Ô∏è Less than 1h remaining!")

    def log_final_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏–∏"""
        summary = self.get_session_summary()
        elapsed_hours = self.get_elapsed_time_hours()

        logger.warning(f"üöÄ TRAINING SESSION COMPLETED")
        logger.warning(
            f"   Duration: {elapsed_hours:.1f}h | Stages: {summary.total_stages}"
        )
        if summary.best_similarity:
            logger.warning(f"   Best similarity: {summary.best_similarity:.3f}")
        logger.warning(f"   Session log: {self.session_log}")

    def save_session(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ —Å–µ—Å—Å–∏–∏ –≤ JSON —Ñ–∞–π–ª"""
        session_persistence.save_session_log(
            session_log_file=self.session_log,
            mode=self.mode,
            scale=self.scale,
            max_hours=self.max_total_time_hours,
            start_time=self.start_time.isoformat(),
            elapsed_hours=self.get_elapsed_time_hours(),
            history=self.training_history,
            summary=self.get_session_summary(),
        )

    def load_session_history(self, session_file: Path) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞

        Args:
            session_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏

        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        history = session_persistence.load_session_history(session_file)
        if history:
            self.training_history = history
            # Potentially restore other state here if needed
            logger.info(f"[SESSION] Loaded session history from {session_file}")
            return True
        return False
