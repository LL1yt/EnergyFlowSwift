#!/usr/bin/env python3
"""
Centralized Logging Configuration for Automated Training
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–≥–∞–º–∏
- –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
- –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ—Ç—Ä–∏–∫ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–ê–≤—Ç–æ—Ä: 3D Cellular Neural Network Project
"""

import logging
import logging.handlers
import sys
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime


class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""

    # ANSI —Ü–≤–µ—Ç–∞
    COLORS = {
        "DEBUG": "\033[36m",  # Cyan
        "INFO": "\033[32m",  # Green
        "WARNING": "\033[33m",  # Yellow
        "ERROR": "\033[31m",  # Red
        "CRITICAL": "\033[35m",  # Magenta
        "RESET": "\033[0m",  # Reset
    }

    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if record.levelname in self.COLORS:
            record.levelname = f"{self.COLORS[record.levelname]}{record.levelname}{self.COLORS['RESET']}"

        return super().format(record)


class StructuredFormatter(logging.Formatter):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ç–µ–≥–∞–º–∏"""

    def format(self, record):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ –∏–º–µ–Ω–∏ –ª–æ–≥–≥–µ—Ä–∞
        component = self._extract_component(record.name)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        timestamp = datetime.now().strftime("%H:%M:%S")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(record, "tag"):
            tag = f"[{record.tag}]"
        else:
            tag = ""

        formatted = f"{timestamp} ‚îÇ {component:>12} ‚îÇ {record.levelname:>7} ‚îÇ {tag} {record.getMessage()}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            formatted += "\n" + self.formatException(record.exc_info)

        return formatted

    def _extract_component(self, logger_name: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ –∏–º–µ–Ω–∏ –ª–æ–≥–≥–µ—Ä–∞"""
        if "automated_trainer" in logger_name:
            return "TRAINER"
        elif "session_manager" in logger_name:
            return "SESSION"
        elif "stage_runner" in logger_name:
            return "RUNNER"
        elif "progressive_config" in logger_name:
            return "CONFIG"
        elif "cli_interface" in logger_name:
            return "CLI"
        elif "cell_prototype" in logger_name:
            return "CELL"
        elif "lattice" in logger_name:
            return "LATTICE"
        else:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –∏–º–µ–Ω–∏
            parts = logger_name.split(".")
            return parts[-1].upper()[:12]


class AutomatedTrainingLogger:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, verbose: bool = False, quiet: bool = False):
        self.verbose = verbose
        self.quiet = quiet
        self.log_dir = Path("logs/automated_training")
        self.log_dir.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã
        self._setup_loggers()

    def _setup_loggers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –ª–æ–≥–≥–µ—Ä—ã"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
        if self.quiet:
            console_level = logging.ERROR
        elif self.verbose:
            console_level = logging.INFO  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å DEBUG
        else:
            console_level = logging.WARNING  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ–µ

        # –§–∞–π–ª–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
        file_level = logging.INFO  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å DEBUG

        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
        console_formatter = StructuredFormatter()
        file_formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        root_logger = logging.getLogger()
        root_logger.setLevel(logging.DEBUG)

        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        if not self.quiet:
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setLevel(console_level)
            console_handler.setFormatter(console_formatter)
            root_logger.addHandler(console_handler)

        # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä - –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        main_log_file = self.log_dir / f"automated_training_{timestamp}.log"

        file_handler = logging.FileHandler(main_log_file, encoding="utf-8")
        file_handler.setLevel(file_level)
        file_handler.setFormatter(file_formatter)
        root_logger.addHandler(file_handler)

        # –†–æ—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—â–∏—Ö –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)
        rotating_handler = logging.handlers.RotatingFileHandler(
            "logs/main.log",
            maxBytes=5 * 1024 * 1024,  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 5MB
            backupCount=3,  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ backup —Ñ–∞–π–ª–æ–≤
            encoding="utf-8",
        )
        rotating_handler.setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ WARNING –∏ –≤—ã—à–µ
        rotating_handler.setFormatter(file_formatter)
        root_logger.addHandler(rotating_handler)

        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        error_handler = logging.FileHandler(
            self.log_dir / f"errors_{timestamp}.log", encoding="utf-8"
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(file_formatter)
        root_logger.addHandler(error_handler)

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ verbose)
        if self.verbose:
            logging.info(
                f"üîß [LOGGING] –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)"
            )
            logging.info(
                f"   Console: {logging.getLevelName(console_level)}, File: {logging.getLevelName(file_level)}"
            )

        # –ü–æ–¥–∞–≤–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        self._suppress_noisy_loggers()

    def _suppress_noisy_loggers(self):
        """–ü–æ–¥–∞–≤–ª—è–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        noisy_loggers = [
            "transformers",
            "torch",
            "matplotlib",
            "PIL",
            "urllib3",
            "requests",
            "tensorflow",
            "tensorboard",
            "wandb",
            "accelerate",
            "datasets",
        ]

        for logger_name in noisy_loggers:
            logger = logging.getLogger(logger_name)
            logger.setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏

    @staticmethod
    def get_logger(name: str) -> logging.Logger:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        return logging.getLogger(name)

    @staticmethod
    def log_with_tag(
        logger: logging.Logger, level: int, tag: str, message: str, **kwargs
    ):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–≥–æ–º"""
        record = logger.makeRecord(
            name=logger.name,
            level=level,
            fn="",
            lno=0,
            msg=message,
            args=(),
            exc_info=None,
            **kwargs,
        )
        record.tag = tag
        logger.handle(record)


class MetricsLogger:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""

    def __init__(self, session_id: str = None):
        self.session_id = session_id or datetime.now().strftime("%Y%m%d_%H%M%S")
        self.logger = logging.getLogger(f"metrics.{self.session_id}")
        self.metrics_file = (
            Path("logs/automated_training") / f"metrics_{self.session_id}.json"
        )

        # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ª–æ–≥
        self.logger.setLevel(logging.WARNING)

    def log_stage_metrics(self, stage: int, metrics: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞–¥–∏–∏ (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ)"""
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏
        if metrics.get("status") == "completed":
            if metrics.get("success"):
                self.logger.info(
                    f"‚úÖ Stage {stage}: {metrics.get('actual_time_minutes', 0):.1f}min"
                )
            else:
                self.logger.error(f"‚ùå Stage {stage}: FAILED")

        # JSON –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ–≥–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        import json

        try:
            if self.metrics_file.exists():
                with open(self.metrics_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
            else:
                data = {"session_id": self.session_id, "stages": {}}

            data["stages"][str(stage)] = {
                "timestamp": datetime.now().isoformat(),
                **metrics,
            }

            with open(self.metrics_file, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

        except Exception as e:
            self.logger.error(f"Failed to save metrics: {e}")

    def log_performance(
        self, operation: str, duration: float, details: Dict[str, Any] = None
    ):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ)"""
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥
        if duration > 30.0:
            details = details or {}
            self.logger.warning(f"üêå [SLOW] {operation}: {duration:.1f}s {details}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
_training_logger = None
_metrics_logger = None


def setup_automated_training_logging(
    verbose: bool = False, quiet: bool = False
) -> AutomatedTrainingLogger:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è automated training"""
    global _training_logger
    _training_logger = AutomatedTrainingLogger(verbose=verbose, quiet=quiet)
    return _training_logger


def get_training_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è automated training"""
    if _training_logger is None:
        setup_automated_training_logging()
    return _training_logger.get_logger(name)


def get_metrics_logger(session_id: str = None) -> MetricsLogger:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –º–µ—Ç—Ä–∏–∫"""
    global _metrics_logger
    if _metrics_logger is None or (
        session_id and _metrics_logger.session_id != session_id
    ):
        _metrics_logger = MetricsLogger(session_id)
    return _metrics_logger


def log_stage_start(stage: int, config: Dict[str, Any]):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Å—Ç–∞–¥–∏–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ)"""
    logger = get_training_logger("stage")
    metrics_logger = get_metrics_logger()

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Å—Ç–∞–¥–∏–∏
    logger.warning(f"üöÄ Stage {stage} starting...")

    # –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    metrics_logger.log_stage_metrics(
        stage,
        {
            "status": "started",
            "dataset_limit": config.get("dataset_limit"),
            "epochs": config.get("epochs"),
            "batch_size": config.get("batch_size"),
        },
    )


def log_stage_complete(stage: int, result: Dict[str, Any]):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ)"""
    logger = get_training_logger("stage")
    metrics_logger = get_metrics_logger()

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result.get("success"):
        logger.warning(
            f"‚úÖ Stage {stage}: {result.get('actual_time_minutes', 0):.1f}min"
        )
        if result.get("final_similarity"):
            logger.warning(f"   Similarity: {result.get('final_similarity'):.3f}")
    else:
        logger.error(f"‚ùå Stage {stage}: FAILED")

    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ JSON
    metrics_logger.log_stage_metrics(
        stage,
        {
            "status": "completed",
            "success": result.get("success"),
            "actual_time_minutes": result.get("actual_time_minutes"),
            "final_similarity": result.get("final_similarity"),
        },
    )
