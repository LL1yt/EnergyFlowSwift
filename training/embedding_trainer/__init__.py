"""
Embedding Trainer - –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è 3D Cubic Core

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–ú–æ–¥—É–ª—å 2)
–Ω–∞ —ç–º–±–µ–¥–∏–Ω–≥‚Üí—ç–º–±–µ–¥–∏–Ω–≥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è—Ö –≤ —Ä–∞–º–∫–∞—Ö –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- CubeTrainer: –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
- AutoencoderDataset: –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è autoencoder –∑–∞–¥–∞—á
- DialogueDataset: –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –∑–∞–¥–∞—á
- EmbeddingMetrics: —Å–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
- TrainingLogger: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- CheckpointManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–ø–æ–π–Ω—Ç–∞–º–∏

–ê–≤—Ç–æ—Ä: 3D Cellular Neural Network Project
–í–µ—Ä—Å–∏—è: v1.0.0 (Phase 3.1)
–î–∞—Ç–∞: 6 –∏—é–Ω—è 2025
"""

# –ò–º–ø–æ—Ä—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤
# –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –±—É–¥—É—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

__version__ = "1.0.0"
__author__ = "3D Cellular Neural Network Project"
__status__ = "Phase 3.1 - Stage 1.3 Complete"

# –ò–º–ø–æ—Ä—Ç—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    from .cube_trainer import CubeTrainer, TrainingConfig, EmbeddingMetrics
    CUBE_TRAINER_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  CubeTrainer not available: {e}")
    CUBE_TRAINER_AVAILABLE = False
    
    # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    class CubeTrainer:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞"""
        def __init__(self, *args, **kwargs):
            raise NotImplementedError("CubeTrainer dependencies not available")

# üöÄ STAGE 1.2: AutoencoderDataset - –ì–û–¢–û–í!
try:
    from .autoencoder_dataset import (
        AutoencoderDataset, 
        DatasetConfig, 
        create_text_dataset, 
        create_file_dataset
    )
    AUTOENCODER_DATASET_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  AutoencoderDataset not available: {e}")
    AUTOENCODER_DATASET_AVAILABLE = False
    
    # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    class AutoencoderDataset:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è autoencoder –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        def __init__(self, *args, **kwargs):
            raise NotImplementedError("AutoencoderDataset dependencies not available")

# üöÄ STAGE 1.3: DialogueDataset - –ì–û–¢–û–í!
try:
    from .dialogue_dataset import (
        DialogueDataset, 
        DialogueConfig, 
        create_dialogue_dataset, 
        create_conversation_dataset,
        load_dialogue_dataset_from_files
    )
    DIALOGUE_DATASET_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  DialogueDataset not available: {e}")
    DIALOGUE_DATASET_AVAILABLE = False
    
    # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    class DialogueDataset:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è dialogue –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        def __init__(self, *args, **kwargs):
            raise NotImplementedError("DialogueDataset dependencies not available")

# TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
# from .logger import TrainingLogger
# from .checkpoint_manager import CheckpointManager
# from .utils import (
#     calculate_embedding_similarity,
#     save_training_checkpoint,
#     load_training_checkpoint
# )

# –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def _check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        import torch
        import numpy as np
        from pathlib import Path
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–±—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
        required_modules = [
            'core.embedding_processor',
            'data.embedding_reshaper',
            'data.embedding_loader',
            'utils.config_manager'
        ]
        
        missing_modules = []
        for module_name in required_modules:
            try:
                __import__(module_name)
            except ImportError:
                missing_modules.append(module_name)
        
        if missing_modules:
            print(f"‚ö†Ô∏è  Warning: Missing required modules: {missing_modules}")
            print("   Make sure all dependencies are implemented before using EmbeddingTrainer")
        else:
            print("‚úÖ All dependencies are available")
            
    except ImportError as e:
        print(f"‚ùå Critical dependency missing: {e}")
        print("   Install required packages: torch, numpy")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_check_dependencies()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
def get_module_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ"""
    ready_components = []
    if CUBE_TRAINER_AVAILABLE:
        ready_components.extend(['CubeTrainer', 'TrainingConfig', 'EmbeddingMetrics'])
    if AUTOENCODER_DATASET_AVAILABLE:
        ready_components.extend(['AutoencoderDataset', 'DatasetConfig', 'create_text_dataset', 'create_file_dataset'])
    if DIALOGUE_DATASET_AVAILABLE:
        ready_components.extend(['DialogueDataset', 'DialogueConfig', 'create_dialogue_dataset', 'create_conversation_dataset', 'load_dialogue_dataset_from_files'])
    
    return {
        'name': 'EmbeddingTrainer',
        'version': __version__,
        'status': __status__,
        'phase': 'Phase 3.1 - Stage 1.3 Complete',  # –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å!
        'description': 'Training system for 3D Cubic Core (Module 2)',
        'ready_components': ready_components,
        'in_development': [],
        'planned': ['TrainingLogger', 'CheckpointManager'],
        'completed_stages': ['Stage 1.1 - CubeTrainer', 'Stage 1.2 - AutoencoderDataset', 'Stage 1.3 - DialogueDataset']  # –ù–û–í–û–ï!
    }

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
__all__ = [
    'get_module_info', 
    'CubeTrainer', 'TrainingConfig', 'EmbeddingMetrics',
    'AutoencoderDataset', 'DatasetConfig', 'create_text_dataset', 'create_file_dataset',
    'DialogueDataset', 'DialogueConfig', 'create_dialogue_dataset', 'create_conversation_dataset', 'load_dialogue_dataset_from_files',
    'CUBE_TRAINER_AVAILABLE', 'AUTOENCODER_DATASET_AVAILABLE', 'DIALOGUE_DATASET_AVAILABLE'
] 