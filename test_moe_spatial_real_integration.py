#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º MoE Connection Processor
==================================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º spatial_optimization
–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ MoE Connection Processor.

–¶–ï–õ–ò:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ spatial_optimization –º–æ–¥—É–ª—è
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π MoEConnectionProcessor
- –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ –Ω–∞ GPU
- –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å Mock –≤–µ—Ä—Å–∏–µ–π
"""

import torch
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from new_rebuild.config import get_project_config
from new_rebuild.core.lattice.spatial_optimization import (
    create_moe_spatial_optimizer,
    estimate_moe_memory_requirements,
)
from new_rebuild.core.moe import MoEConnectionProcessor
from new_rebuild.utils.logging import get_logger

logger = get_logger(__name__)


class MoERealIntegrationTest:
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º MoE Connection Processor"""

    def __init__(self):
        self.config = get_project_config()
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        logger.info(f"üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –Ω–∞ {self.device}")

    def test_real_moe_processor_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ MoE Connection Processor"""
        print("\nüèóÔ∏è –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û MoE PROCESSOR")
        print("=" * 70)

        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π MoE processor
            moe_processor = MoEConnectionProcessor(
                state_size=self.config.gnn_state_size,
                lattice_dimensions=self.config.lattice_dimensions,
                neighbor_count=self.config.max_neighbors,  # –ò–∑–º–µ–Ω–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º max_neighbors –≤–º–µ—Å—Ç–æ effective_neighbors
                enable_cnf=self.config.enable_cnf,
            )

            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            moe_processor.to(self.device)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            total_params = sum(p.numel() for p in moe_processor.parameters())
            param_breakdown = moe_processor.get_parameter_breakdown()

            print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–π MoE Processor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
            print(f"   üìä –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {total_params:,}")
            print(
                f"   üîß Local Expert: {param_breakdown['local_expert']['total_params']:,}"
            )
            print(
                f"   üß† Functional Expert: {param_breakdown['functional_expert']['total_params']:,}"
            )
            print(
                f"   üåä Distant Expert: {param_breakdown['distant_expert']['total_params']:,}"
            )
            print(
                f"   üéõÔ∏è Gating Network: {param_breakdown['gating_network']['total_params']:,}"
            )
            print(f"   üéØ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {next(moe_processor.parameters()).device}")

            return moe_processor

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MoE processor: {e}")
            raise

    def test_real_moe_forward_pass(self, moe_processor):
        """–¢–µ—Å—Ç forward pass —Å —Ä–µ–∞–ª—å–Ω—ã–º MoE processor –∏—Å–ø–æ–ª—å–∑—É—è spatial_optimizer"""
        print("\nüöÄ –¢–ï–°–¢ FORWARD PASS –° –†–ï–ê–õ–¨–ù–´–ú MoE")
        print("=" * 70)

        # –°–æ–∑–¥–∞–µ–º –º–∞–ª—É—é —Ä–µ—à–µ—Ç–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_dimensions = (5, 5, 5)  # 125 –∫–ª–µ—Ç–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        total_cells = test_dimensions[0] * test_dimensions[1] * test_dimensions[2]

        print(f"   üìê –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {test_dimensions} ({total_cells} –∫–ª–µ—Ç–æ–∫)")

        try:
            # –°–æ–∑–¥–∞–µ–º spatial optimizer –¥–ª—è MoE
            spatial_optimizer = create_moe_spatial_optimizer(
                dimensions=test_dimensions,
                moe_processor=moe_processor,
                device=self.device,
            )

            # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫
            states = torch.randn(
                total_cells,
                self.config.gnn_state_size,
                device=self.device,
                dtype=torch.float32,
            )

            print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫: {states.shape} –Ω–∞ {states.device}")

            # Forward pass —á–µ—Ä–µ–∑ spatial optimizer
            start_time = time.time()

            with torch.no_grad():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API —Å spatial_optimizer
                output_states = spatial_optimizer.optimize_moe_forward(
                    states, moe_processor
                )

            forward_time = time.time() - start_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert (
                output_states.shape == states.shape
            ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: {output_states.shape} vs {states.shape}"
            assert not torch.isnan(output_states).any(), "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
            assert not torch.isinf(output_states).any(), "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Inf –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            state_changed = not torch.allclose(states, output_states, atol=1e-6)

            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            cells_per_second = total_cells / forward_time

            print(f"‚úÖ Forward pass —É—Å–ø–µ—à–µ–Ω:")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {forward_time*1000:.2f}ms")
            print(f"   üìä Output shape: {output_states.shape}")
            print(f"   üîÑ State changed: {state_changed}")
            print(f"   üöÑ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {cells_per_second:,.0f} –∫–ª–µ—Ç–æ–∫/—Å–µ–∫")

            return {
                "output_states": output_states,
                "processing_time": forward_time,
                "cells_per_second": cells_per_second,
                "state_changed": state_changed,
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ forward pass: {e}")
            raise

    def test_moe_spatial_integration(self, moe_processor):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MoE —Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º spatial optimization"""
        print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò MoE + SPATIAL OPTIMIZATION")
        print("=" * 70)

        # –†–∞–∑–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_dimensions = (15, 15, 15)  # –ú–∞–ª–∞—è —Ä–µ—à–µ—Ç–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        total_cells = test_dimensions[0] * test_dimensions[1] * test_dimensions[2]

        print(f"   üìê –†–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: {test_dimensions} ({total_cells:,} –∫–ª–µ—Ç–æ–∫)")

        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MoE spatial optimizer
            spatial_optimizer = create_moe_spatial_optimizer(
                dimensions=test_dimensions,
                moe_processor=moe_processor,
                device=self.device,
            )

            print(f"   üóÇÔ∏è Spatial optimizer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

            # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫
            states = torch.randn(
                total_cells,
                self.config.gnn_state_size,
                device=self.device,
                dtype=torch.float32,
            )

            print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫: {states.shape} –Ω–∞ {states.device}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π forward pass
            start_time = time.time()

            output_states = spatial_optimizer.optimize_moe_forward(
                states, moe_processor
            )

            processing_time = time.time() - start_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            assert (
                output_states.shape == states.shape
            ), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞: {output_states.shape} vs {states.shape}"
            assert not torch.isnan(
                output_states
            ).any(), "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –≤ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"
            assert not torch.isinf(
                output_states
            ).any(), "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Inf –≤ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"

            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            cells_per_second = total_cells / processing_time
            memory_used_mb = (
                torch.cuda.memory_allocated(self.device) / (1024**2)
                if self.device.type == "cuda"
                else 0
            )

            print(f"‚úÖ Spatial integration —É—Å–ø–µ—à–Ω–∞:")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f}s")
            print(f"   üöÑ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {cells_per_second:,.0f} –∫–ª–µ—Ç–æ–∫/—Å–µ–∫")
            print(f"   üíæ –ü–∞–º—è—Ç—å GPU: {memory_used_mb:.1f} MB")
            print(f"   üìä –í—ã—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {output_states.shape}")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            perf_stats = spatial_optimizer.get_performance_stats()
            print(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π: {perf_stats}")

            return {
                "processing_time": processing_time,
                "cells_per_second": cells_per_second,
                "memory_used_mb": memory_used_mb,
                "performance_stats": perf_stats,
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ spatial integration: {e}")
            raise

    def test_memory_requirements_estimation(self):
        """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏"""
        print("\nüíæ –¢–ï–°–¢ –û–¶–ï–ù–ö–ò –¢–†–ï–ë–û–í–ê–ù–ò–ô –ö –ü–ê–ú–Ø–¢–ò")
        print("=" * 70)

        test_cases = [
            (27, 27, 27),  # –ú–∞–ª–∞—è —Ä–µ—à–µ—Ç–∫–∞ (19k –∫–ª–µ—Ç–æ–∫)
            (50, 50, 50),  # –°—Ä–µ–¥–Ω—è—è —Ä–µ—à–µ—Ç–∫–∞ (125k –∫–ª–µ—Ç–æ–∫)
            (100, 100, 100),  # –ë–æ–ª—å—à–∞—è —Ä–µ—à–µ—Ç–∫–∞ (1M –∫–ª–µ—Ç–æ–∫)
        ]

        for dimensions in test_cases:
            total_cells = dimensions[0] * dimensions[1] * dimensions[2]

            memory_requirements = estimate_moe_memory_requirements(dimensions)

            print(f"\n   üìê –†–µ—à–µ—Ç–∫–∞ {dimensions} ({total_cells:,} –∫–ª–µ—Ç–æ–∫):")
            print(f"      Cell states: {memory_requirements['cell_states_gb']:.3f} GB")
            print(
                f"      Expert states: {memory_requirements['expert_states_gb']:.3f} GB"
            )
            print(
                f"      Spatial index: {memory_requirements['spatial_index_gb']:.3f} GB"
            )
            print(
                f"      –û–±—â–∞—è –ø–∞–º—è—Ç—å: {memory_requirements['total_memory_gb']:.3f} GB"
            )
            print(
                f"      –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è GPU: {memory_requirements['recommended_gpu_memory_gb']:.3f} GB"
            )

        print(f"\n‚úÖ –û—Ü–µ–Ω–∫–∏ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    def test_performance_comparison(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π"""
        print("\n‚ö° –¢–ï–°–¢ –°–†–ê–í–ù–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 70)

        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å Mock –≤–µ—Ä—Å–∏–µ–π
        print("   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ MoE:")
        print("      - –†–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
        print("      - –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è spatial optimization")
        print("      - GPU acceleration")
        print("      - Chunked processing –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫")

        print(f"\n‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ–¥—Ä–µ–Ω—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –†–ï–ê–õ–¨–ù–´–ú MoE CONNECTION PROCESSOR")
    print("=" * 80)

    tester = MoERealIntegrationTest()

    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ MoE processor
        moe_processor = tester.test_real_moe_processor_creation()

        # 2. –¢–µ—Å—Ç forward pass
        result = tester.test_real_moe_forward_pass(moe_processor)

        # 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å spatial optimization
        integration_stats = tester.test_moe_spatial_integration(moe_processor)

        # 4. –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏
        tester.test_memory_requirements_estimation()

        # 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        tester.test_performance_comparison()

        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –†–µ–∞–ª—å–Ω—ã–π MoE Connection Processor –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ spatial_optimization –∑–∞–≤–µ—Ä—à–µ–Ω")
        print("‚úÖ GPU acceleration —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

    except Exception as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
