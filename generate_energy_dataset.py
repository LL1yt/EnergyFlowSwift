#!/usr/bin/env python3
"""
Energy Flow Dataset Generator CLI
=================================

–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤.
–°–æ–∑–¥–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python generate_energy_dataset.py                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    python generate_energy_dataset.py --mode debug       # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º  
    python generate_energy_dataset.py --list             # –°–ø–∏—Å–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    python generate_energy_dataset.py --archive          # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö
"""

import sys
import argparse
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from energy_flow.config import create_debug_config, create_experiment_config, create_optimized_config, set_energy_config
from energy_flow.dataset.generator import (
    DatasetGenerator, GeneratorConfig,
    create_debug_generator_config,
    create_experiment_generator_config, 
    create_production_generator_config,
    create_dataset_generator
)
from energy_flow.utils.logging import get_logger

logger = get_logger(__name__)


def print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üöÄ Energy Flow Dataset Generator")
    print("=" * 50)
    print("")


def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("üìã –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞")
    print("-" * 40)
    
    # 1. –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
    print("\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:")
    print("   [1] DEBUG - –±—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (500 –ø–∞—Ä)")
    print("   [2] EXPERIMENT - –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (5K –ø–∞—Ä)")
    print("   [3] PRODUCTION - –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (50K –ø–∞—Ä)")
    print("   [4] CUSTOM - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    while True:
        choice = input("\n–í—ã–±–æ—Ä (1-4): ").strip()
        if choice in ["1", "2", "3", "4"]:
            break
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if choice == "1":
        mode = "debug"
        generator_config = create_debug_generator_config()
        energy_config = create_debug_config() 
    elif choice == "2":
        mode = "experiment"
        generator_config = create_experiment_generator_config()
        energy_config = create_experiment_config()
    elif choice == "3":
        mode = "production"
        generator_config = create_production_generator_config()
        energy_config = create_optimized_config()
    else:  # custom
        mode = "custom"
        generator_config, energy_config = custom_configuration()
    
    # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if mode != "custom":
        print(f"\n2Ô∏è‚É£ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∂–∏–º–∞ {mode.upper()}:")
        sources_str = ", ".join(generator_config.sources)
        print(f"   –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è: {sources_str}")
        
        modify = input("   –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏? (y/N): ").strip().lower()
        if modify == 'y':
            generator_config.sources = choose_data_sources()
    
    # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è SNLI
    if "snli" in generator_config.sources:
        print(f"\n3Ô∏è‚É£ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SNLI:")
        print(f"   –¢–µ–∫—É—â–∞—è —Ñ—Ä–∞–∫—Ü–∏—è: {generator_config.snli_fraction:.1%}")
        
        modify_snli = input("   –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SNLI? (y/N): ").strip().lower()
        if modify_snli == 'y':
            while True:
                try:
                    fraction = float(input("   –í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é SNLI (0.1-1.0): "))
                    if 0.1 <= fraction <= 1.0:
                        generator_config.snli_fraction = fraction
                        break
                    else:
                        print("   ‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 1.0")
                except ValueError:
                    print("   ‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    # 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    print(f"\n4Ô∏è‚É£ –ò–º—è —Ñ–∞–π–ª–∞:")
    preview_name = generator_config.generate_filename(generator_config.target_pairs)
    print(f"   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ: {preview_name}")
    
    custom_name = input("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è (Enter –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ): ").strip()
    if not custom_name:
        custom_name = None
    
    # 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    print(f"\n5Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
    print(f"   –†–µ–∂–∏–º: {mode.upper()}")
    print(f"   –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {generator_config.target_pairs:,}")
    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(generator_config.sources)}")
    if "snli" in generator_config.sources:
        print(f"   SNLI —Ñ—Ä–∞–∫—Ü–∏—è: {generator_config.snli_fraction:.1%}")
    print(f"   –ò–º—è —Ñ–∞–π–ª–∞: {custom_name or preview_name}")
    
    confirm = input("\n   –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é? (Y/n): ").strip().lower()
    if confirm == 'n':
        print("üõë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
    return generate_dataset(generator_config, energy_config, custom_name)


def custom_configuration():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("\nüîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
    while True:
        try:
            target_pairs = int(input("   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (100-100000): "))
            if 100 <= target_pairs <= 100000:
                break
            else:
                print("   ‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 100 –¥–æ 100000")
        except ValueError:
            print("   ‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    sources = choose_data_sources()
    
    # SNLI –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    snli_fraction = 0.2
    if "snli" in sources:
        while True:
            try:
                snli_fraction = float(input("   –§—Ä–∞–∫—Ü–∏—è SNLI (0.1-1.0): "))
                if 0.1 <= snli_fraction <= 1.0:
                    break
                else:
                    print("   ‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 1.0")
            except ValueError:
                print("   ‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    generator_config = GeneratorConfig(
        mode="custom",
        target_pairs=target_pairs,
        sources=sources,
        snli_fraction=snli_fraction
    )
    
    # Energy config –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    if target_pairs <= 1000:
        energy_config = create_debug_config()
    elif target_pairs <= 10000:
        energy_config = create_experiment_config()
    else:
        energy_config = create_optimized_config()
    
    return generator_config, energy_config


def choose_data_sources():
    """–í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:")
    print("   [1] –¢–æ–ª—å–∫–æ precomputed (–≥–æ—Ç–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏)")
    print("   [2] –¢–æ–ª—å–∫–æ SNLI (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞)")
    print("   [3] Mixed (precomputed + SNLI)")
    
    while True:
        choice = input("   –í—ã–±–æ—Ä (1-3): ").strip()
        if choice == "1":
            return ["precomputed"] 
        elif choice == "2":
            return ["snli"]
        elif choice == "3":
            return ["precomputed", "snli"]
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


def generate_dataset(generator_config: GeneratorConfig, energy_config, custom_name: str = None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print(f"\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    print("-" * 30)
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º energy config
        set_energy_config(energy_config)
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = DatasetGenerator(generator_config, energy_config)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        result = generator.generate_dataset(custom_name)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüéâ –î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"   üìÅ –§–∞–π–ª: {result['filename']}")
        print(f"   üìä –û–±—Ä–∞–∑—Ü–æ–≤: {result['sample_count']:,}")
        print(f"   üíæ –†–∞–∑–º–µ—Ä: {result['file_size_mb']:.1f} MB")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['generation_time']:.1f}s")
        print(f"   üìÇ –ü—É—Ç—å: {result['filepath']}")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        print(f"\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –æ–±—É—á–µ–Ω–∏–∏:")
        print(f"   import torch")
        print(f"   data = torch.load('{result['filename']}')")
        print(f"   input_embeddings = data['input_embeddings']")
        print(f"   target_embeddings = data['target_embeddings']")
        
        return result
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        logger.error(f"Dataset generation failed: {e}")
        return None


def list_datasets():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã:")
    print("-" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        generator = create_dataset_generator("experiment")
        datasets = generator.list_available_datasets(include_archive=True)
        
        if not datasets:
            print("   üì≠ –î–∞—Ç–∞—Å–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        active_datasets = [d for d in datasets if d.get('category') == 'active']
        archive_datasets = [d for d in datasets if d.get('category') == 'archive']
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
        if active_datasets:
            print("üü¢ –ê–ö–¢–ò–í–ù–´–ï –î–ê–¢–ê–°–ï–¢–´:")
            for i, dataset in enumerate(active_datasets, 1):
                creation_date = datetime.fromtimestamp(dataset['creation_time']).strftime('%Y-%m-%d %H:%M')
                print(f"   {i}. {dataset['filename']}")
                print(f"      üìä {dataset.get('sample_count', 'N/A'):,} –æ–±—Ä–∞–∑—Ü–æ–≤")
                print(f"      üíæ {dataset['file_size_mb']:.1f} MB")
                print(f"      üïí {creation_date}")
                print(f"      üè∑Ô∏è {dataset.get('mode', 'unknown')} / {', '.join(dataset.get('sources', []))}")
                print()
        
        # –ê—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
        if archive_datasets:
            print("üì¶ –ê–†–•–ò–í–ù–´–ï –î–ê–¢–ê–°–ï–¢–´:")
            for dataset in archive_datasets[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                creation_date = datetime.fromtimestamp(dataset['creation_time']).strftime('%Y-%m-%d %H:%M')
                print(f"   üìÅ {dataset['filename']} ({dataset['file_size_mb']:.1f} MB, {creation_date})")
            
            if len(archive_datasets) > 5:
                print(f"   ... –∏ –µ—â–µ {len(archive_datasets) - 5} —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ")
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_datasets)}")
        print(f"   –í –∞—Ä—Ö–∏–≤–µ: {len(archive_datasets)}")
        total_size = sum(d['file_size_mb'] for d in datasets)
        print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} MB")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")


def archive_old_datasets():
    """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    print("üóÇÔ∏è –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤:")
    print("-" * 40)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    while True:
        try:
            days = int(input("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç—ã —Å—Ç–∞—Ä—à–µ —Å–∫–æ–ª—å–∫–∏ –¥–Ω–µ–π? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7): ") or "7")
            if days > 0:
                break
            else:
                print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    try:
        generator = create_dataset_generator("experiment")
        result = generator.archive_old_datasets(days_old=days)
        
        if result['archived_count'] > 0:
            print(f"‚úÖ –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {result['archived_count']} —Ñ–∞–π–ª–æ–≤:")
            for file_info in result['archived_files']:
                print(f"   üìÅ {file_info['filename']}")
            print(f"\nüìÇ –ê—Ä—Ö–∏–≤: {result['archive_directory']}")
        else:
            print("üì≠ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if result['errors']:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏ ({len(result['errors'])}):")
            for error in result['errors']:
                print(f"   ‚ùå {error}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def quick_generate(mode: str):
    """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print(f"‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {mode.upper()}")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if mode == "debug":
            generator_config = create_debug_generator_config()
            energy_config = create_debug_config()
        elif mode == "experiment":
            generator_config = create_experiment_generator_config()
            energy_config = create_experiment_config()
        elif mode == "production":
            generator_config = create_production_generator_config()
            energy_config = create_optimized_config()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"   –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {generator_config.target_pairs:,} –ø–∞—Ä")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(generator_config.sources)}")
        print(f"   SNLI —Ñ—Ä–∞–∫—Ü–∏—è: {generator_config.snli_fraction:.1%}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
        return generate_dataset(generator_config, energy_config) 
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="Energy Flow Dataset Generator",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        "--mode", 
        choices=["debug", "experiment", "production"],
        help="–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"
    )
    parser.add_argument(
        "--list", 
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"
    )
    parser.add_argument(
        "--archive", 
        action="store_true",
        help="–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã"
    )
    
    args = parser.parse_args()
    
    print_header()
    
    try:
        if args.list:
            list_datasets()
        elif args.archive:
            archive_old_datasets()
        elif args.mode:
            quick_generate(args.mode)
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            interactive_mode()
            
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Unexpected error in main: {e}")


if __name__ == "__main__":
    main()