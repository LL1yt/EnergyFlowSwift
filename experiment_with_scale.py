#!/usr/bin/env python3
"""
–≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–´ –° –ú–ê–°–®–¢–ê–ë–û–ú –†–ï–®–ï–¢–ö–ò
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å scale factor –∏ –≤–∏–¥–µ—Ç—å –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞:
- –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–π—Ä–æ–Ω–æ–≤
- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
- –ù–∞–∑–≤–∞–Ω–∏–µ checkpoint'–æ–≤
"""

import logging
import torch
from pathlib import Path
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append(str(Path(__file__).parent))

from utils.config_manager.dynamic_config import DynamicConfigManager, ScaleSettings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def experiment_with_scale(custom_scale: float = None):
    """–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å custom scale factor"""
    print(f"üß™ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢ –° –ú–ê–°–®–¢–ê–ë–û–ú –†–ï–®–ï–¢–ö–ò")
    print("=" * 60)

    if custom_scale:
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º custom scale: {custom_scale}")
    else:
        print(f"üìä –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–∂–∏–º—ã")

    try:
        config_manager = DynamicConfigManager()

        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω custom scale, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
        if custom_scale:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º scale settings
            original_dev_scale = config_manager.generator.scale_settings.development
            config_manager.generator.scale_settings.development = custom_scale

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = config_manager.create_config_for_mode("development")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π scale
            config_manager.generator.scale_settings.development = original_dev_scale

            print(f"\nüìê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –° CUSTOM SCALE {custom_scale}:")
            _print_config_info(config, custom_scale)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è checkpoint
            _show_checkpoint_naming(
                custom_scale, len_dataset=1000, epochs=50, similarity=0.234
            )

        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–∂–∏–º—ã
            modes = ["development", "research", "validation", "production"]

            for mode in modes:
                config = config_manager.create_config_for_mode(mode)
                scale = config.get("_metadata", {}).get("scale_factor") or config.get(
                    "lattice", {}
                ).get("scale_factor")

                print(f"\nüìä –†–ï–ñ–ò–ú: {mode.upper()} (scale={scale})")
                _print_config_info(config, scale)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ checkpoint'–∞
                _show_checkpoint_naming(
                    scale, len_dataset=1000, epochs=50, similarity=0.234, mode=mode
                )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {e}")


def _print_config_info(config, scale_factor):
    """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    lattice = config["lattice"]
    embeddings = config["embeddings"]
    training = config["training"]

    print(f"   üìè –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {lattice['xs']} √ó {lattice['ys']} √ó {lattice['zs']}")
    print(f"   üß† –í—Å–µ–≥–æ –Ω–µ–π—Ä–æ–Ω–æ–≤: {lattice['total_neurons']:,}")
    print(f"   üìä Embedding dim: {embeddings['embedding_dim']:,}")
    print(f"   üéØ Batch size: {training['batch_size']}")

    # –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏
    lattice_memory_gb = (lattice["total_neurons"] * embeddings["embedding_dim"] * 4) / (
        1024**3
    )
    batch_memory_mb = (training["batch_size"] * embeddings["embedding_dim"] * 4) / (
        1024**2
    )

    print(f"   üíæ –ü–∞–º—è—Ç—å —Ä–µ—à–µ—Ç–∫–∏: ~{lattice_memory_gb:.3f} GB")
    print(f"   üíæ –ü–∞–º—è—Ç—å –±–∞—Ç—á–∞: ~{batch_memory_mb:.1f} MB")

    # –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
    operations_per_epoch = (
        lattice["total_neurons"] * embeddings["embedding_dim"] * training["batch_size"]
    )
    relative_time = operations_per_epoch / 1e9  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"   ‚è±Ô∏è –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —ç–ø–æ—Ö–∏: ~{relative_time:.2f}")


def _show_checkpoint_naming(
    scale_factor, len_dataset, epochs, similarity, mode="development"
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è checkpoint"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ
    result_name = f"dynamic_{mode}_scale{scale_factor}_{len_dataset}pairs_{epochs}epochs_{similarity:.3f}sim_{timestamp}"

    print(f"   üè∑Ô∏è Checkpoint: {result_name}")


def suggest_optimal_scales():
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ scale factor'—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û SCALE FACTOR:")
    print("=" * 60)

    suggestions = [
        (0.005, "–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "~900 –Ω–µ–π—Ä–æ–Ω–æ–≤, –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"),
        (0.01, "–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)", "~3,600 –Ω–µ–π—Ä–æ–Ω–æ–≤, –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã"),
        (0.02, "–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "~14,400 –Ω–µ–π—Ä–æ–Ω–æ–≤, –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        (0.05, "–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "~90,000 –Ω–µ–π—Ä–æ–Ω–æ–≤, –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã"),
        (0.1, "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)", "~360,000 –Ω–µ–π—Ä–æ–Ω–æ–≤, —Å–µ—Ä—å–µ–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏"),
        (0.2, "–ë–æ–ª—å—à–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "~1.4M –Ω–µ–π—Ä–æ–Ω–æ–≤, —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏"),
        (0.3, "–í–∞–ª–∏–¥–∞—Ü–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)", "~3.2M –Ω–µ–π—Ä–æ–Ω–æ–≤, –ø–æ—á—Ç–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω"),
    ]

    for scale, purpose, description in suggestions:
        print(f"   {scale:5.3f} - {purpose:25s} ({description})")

    print(f"\n‚ö†Ô∏è –í–ê–ñ–ù–û:")
    print(f"   ‚Ä¢ –î–ª—è RTX 5090 (32GB): –º–æ–∂–Ω–æ –¥–æ 0.3-0.5")
    print(f"   ‚Ä¢ –î–ª—è RTX 4070 Ti (12GB): —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 0.1-0.2")
    print(f"   ‚Ä¢ –î–ª—è –º–µ–Ω—å—à–∏—Ö GPU: –Ω–µ –±–æ–ª—å—à–µ 0.05-0.1")


def create_custom_scale_test(scale_factor: float):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç —Å custom scale factor"""
    print(f"\nüîß –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–ê –° SCALE {scale_factor}")
    print("=" * 60)

    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π run_dynamic_training –¥–ª—è —ç—Ç–æ–≥–æ scale
        script_content = f'''#!/usr/bin/env python3
"""
–¢–ï–°–¢ –û–ë–£–ß–ï–ù–ò–Ø —Å custom scale factor = {scale_factor}
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

from run_dynamic_training import DynamicTrainingManager
from utils.config_manager.dynamic_config import DynamicConfigManager

def main():
    """–ó–∞–ø—É—Å–∫ —Å custom scale {scale_factor}"""
    print(f"üß™ –¢–ï–°–¢ –û–ë–£–ß–ï–ù–ò–Ø –° SCALE {scale_factor}")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º manager –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º scale
    manager = DynamicTrainingManager("development")
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º scale factor
    manager.config_manager.generator.scale_settings.development = {scale_factor}
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º scale
    manager.dynamic_config = manager.config_manager.create_config_for_mode("development")
    manager.config_manager.merge_dynamic_config(manager.dynamic_config)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è scale {scale_factor}")
    print(f"üìè –†–∞–∑–º–µ—Ä —Ä–µ—à–µ—Ç–∫–∏: {{manager.dynamic_config['lattice']['xs']}}√ó{{manager.dynamic_config['lattice']['ys']}}√ó{{manager.dynamic_config['lattice']['zs']}}")
    print(f"üß† –ù–µ–π—Ä–æ–Ω–æ–≤: {{manager.dynamic_config['lattice']['total_neurons']:,}}")
    
    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    try:
        results = manager.run_training(
            dataset_limit=1000,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
            epochs=20,  # –ú–µ–Ω—å—à–µ —ç–ø–æ—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
            batch_size=None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        )
        
        print(f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –õ—É—á—à–∞—è similarity: {{results['best_similarity']:.4f}}")
        print(f"   –í—Ä–µ–º—è: {{results['total_time']/60:.1f}} –º–∏–Ω—É—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {{e}}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
'''

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
        script_path = f"test_scale_{scale_factor:.3f}.py"
        with open(script_path, "w", encoding="utf-8") as f:
            f.write(script_content)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç: {script_path}")
        print(f"   –ó–∞–ø—É—Å–∫: python {script_path}")

        return script_path

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø –ú–ê–°–®–¢–ê–ë–û–í")
    print("–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Ä–µ—à–µ—Ç–∫–∏")
    print()

    while True:
        print("\nüéØ –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–∂–∏–º—ã")
        print("2. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å custom scale")
        print("3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ scale factor")
        print("4. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç")
        print("5. –í—ã—Ö–æ–¥")

        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()

        if choice == "1":
            experiment_with_scale()

        elif choice == "2":
            try:
                scale = float(input("–í–≤–µ–¥–∏—Ç–µ scale factor (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.02): "))
                if 0.001 <= scale <= 1.0:
                    experiment_with_scale(scale)
                else:
                    print("‚ö†Ô∏è Scale –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.001 –¥–æ 1.0")
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")

        elif choice == "3":
            suggest_optimal_scales()

        elif choice == "4":
            try:
                scale = float(
                    input("–í–≤–µ–¥–∏—Ç–µ scale factor –¥–ª—è —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.02): ")
                )
                if 0.001 <= scale <= 1.0:
                    script_path = create_custom_scale_test(scale)
                    if script_path:
                        print(f"\nüí° –ú–æ–∂–µ—Ç–µ —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: python {script_path}")
                else:
                    print("‚ö†Ô∏è Scale –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.001 –¥–æ 1.0")
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")

        elif choice == "5":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


if __name__ == "__main__":
    main()
