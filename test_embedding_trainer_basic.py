"""
–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è Embedding Trainer

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
1. –ò–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
2. –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
3. –ë–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)

–ê–≤—Ç–æ—Ä: 3D Cellular Neural Network Project  
–í–µ—Ä—Å–∏—è: Phase 3.1
–î–∞—Ç–∞: 6 –∏—é–Ω—è 2025
"""

import sys
import traceback
from pathlib import Path

def test_embedding_trainer_import():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è"""
    print("üß™ –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è embedding_trainer")
    
    try:
        from training.embedding_trainer import get_module_info
        print("‚úÖ –ú–æ–¥—É–ª—å embedding_trainer —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ
        info = get_module_info()
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
        print(f"   –í–µ—Ä—Å–∏—è: {info['version']}")
        print(f"   –°—Ç–∞—Ç—É—Å: {info['status']}")
        print(f"   –§–∞–∑–∞: {info['phase']}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_placeholder_classes():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–ª—É—à–µ–∫ –∫–ª–∞—Å—Å–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–ª—É—à–µ–∫ –∫–ª–∞—Å—Å–æ–≤")
    
    try:
        from training.embedding_trainer import CubeTrainer, AutoencoderDataset, DialogueDataset
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–æ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        test_cases = [
            ("CubeTrainer", CubeTrainer),
            ("AutoencoderDataset", AutoencoderDataset),
            ("DialogueDataset", DialogueDataset)
        ]
        
        for class_name, class_obj in test_cases:
            try:
                instance = class_obj()
                print(f"‚ùå {class_name}: –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å NotImplementedError")
                return False
            except NotImplementedError:
                print(f"‚úÖ {class_name}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç NotImplementedError")
            except Exception as e:
                print(f"‚ùå {class_name}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞—Å—Å–æ–≤: {e}")
        return False

def test_dependency_check():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    try:
        # –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        # –ú—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        
        critical_imports = [
            ("torch", "PyTorch"),
            ("numpy", "NumPy"),
            ("pathlib", "pathlib")
        ]
        
        for module_name, display_name in critical_imports:
            try:
                __import__(module_name)
                print(f"‚úÖ {display_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
            except ImportError:
                print(f"‚ùå {display_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def test_module_structure():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª—è"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª—è")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        module_path = Path("training/embedding_trainer")
        
        required_files = [
            "__init__.py",
            "README.md",
            "plan.md", 
            "meta.md",
            "errors.md",
            "diagram.mmd",
            "examples.md"
        ]
        
        missing_files = []
        for file_name in required_files:
            file_path = module_path / file_name
            if file_path.exists():
                print(f"‚úÖ {file_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå {file_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                missing_files.append(file_name)
        
        if missing_files:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {missing_files}")
            return False
        
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def test_config_integration():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å config_manager
        from utils.config_manager import ConfigManager, ConfigManagerSettings
        print("‚úÖ ConfigManager –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = Path("config/main_config.yaml")
        if config_path.exists():
            print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConfigManager
            settings = ConfigManagerSettings(
                base_config_path=str(config_path),
                enable_hot_reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                enable_validation=False   # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            )
            config = ConfigManager(settings)
            main_config = config.get_config()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–π, –Ω—É–∂–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            required_sections = [
                "modular_architecture",
                "embedding_processing" 
            ]
            
            for section in required_sections:
                if section in main_config:
                    print(f"‚úÖ –°–µ–∫—Ü–∏—è '{section}' –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                else:
                    print(f"‚ö†Ô∏è  –°–µ–∫—Ü–∏—è '{section}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)")
            
            return True
        else:
            print("‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            
    except ImportError as e:
        print(f"‚ùå ConfigManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

def test_ready_components_integration():
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    ready_components = [
        ("core.embedding_processor", "EmbeddingProcessor"),
        ("data.embedding_reshaper", "EmbeddingReshaper"),
        ("data.embedding_loader", "EmbeddingLoader")
    ]
    
    available_components = []
    
    for module_name, component_name in ready_components:
        try:
            __import__(module_name)
            print(f"‚úÖ {component_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
            available_components.append(component_name)
        except ImportError:
            print(f"‚ö†Ô∏è  {component_name} –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    if len(available_components) >= 2:
        print(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {available_components}")
        return True
    else:
        print(f"‚ö†Ô∏è  –ú–∞–ª–æ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∞ —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 60)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø EMBEDDING TRAINER")
    print("   Phase 3.1 - Basic Infrastructure Tests")
    print("=" * 60)
    
    tests = [
        test_embedding_trainer_import,
        test_placeholder_classes,
        test_dependency_check,
        test_module_structure,
        test_config_integration,
        test_ready_components_integration
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_func.__name__}: {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/(passed+failed)*100):.1f}%")
    
    if failed == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ Stage 1.1")
    elif passed >= 4:
        print("üéØ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É")
    else:
        print("‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    print("=" * 60)
    
    return failed == 0

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1) 