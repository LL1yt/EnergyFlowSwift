#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è trainer
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append(str(Path(__file__).parent))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üß™ Testing imports...")
    
    try:
        from training.embedding_trainer.emergent_training_stage_3_1_4_1 import EmergentCubeTrainer
        print("‚úÖ EmergentCubeTrainer imported successfully")
    except Exception as e:
        print(f"‚ùå EmergentCubeTrainer import failed: {e}")
        return False
    
    try:
        from utils.config_manager.config_manager import ConfigManager
        print("‚úÖ ConfigManager imported successfully")
    except Exception as e:
        print(f"‚ùå ConfigManager import failed: {e}")
        return False
    
    try:
        from simple_embedding_fallback import create_dialogue_dataset_simple_fallback
        print("‚úÖ SimpleFallbackEmbeddingLoader imported successfully")
    except Exception as e:
        print(f"‚ùå SimpleFallbackEmbeddingLoader import failed: {e}")
        return False
    
    try:
        from model_weights_manager import ModelWeightsManager
        print("‚úÖ ModelWeightsManager imported successfully")
    except Exception as e:
        print(f"‚ùå ModelWeightsManager import failed: {e}")
        return False
    
    try:
        from config_converter import convert_config_dict_to_object
        print("‚úÖ ConfigConverter imported successfully")
    except Exception as e:
        print(f"‚ùå ConfigConverter import failed: {e}")
        return False
    
    return True

def test_trainer_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è trainer"""
    print("\nüîß Testing trainer creation...")
    
    try:
        import torch  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç torch
        from training.embedding_trainer.emergent_training_stage_3_1_4_1 import EmergentCubeTrainer
        from utils.config_manager.config_manager import ConfigManager
        
        config_manager = ConfigManager()
        config_dict = config_manager.get_config()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dict –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è EmergentCubeTrainer
        from config_converter import convert_config_dict_to_object
        config = convert_config_dict_to_object(config_dict)
        
        trainer = EmergentCubeTrainer(config)
        print(f"‚úÖ Trainer created successfully")
        print(f"   Parameters: {sum(p.numel() for p in trainer.parameters()):,}")
        print(f"   Device: cuda available = {torch.cuda.is_available()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Trainer creation failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ TESTING TRAINER IMPORTS AND CREATION")
    print("="*50)
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    if not test_imports():
        print("\n‚ùå Import tests failed")
        return 1
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è
    import torch  # –î–æ–±–∞–≤–ª—è–µ–º torch import –∑–¥–µ—Å—å
    if not test_trainer_creation():
        print("\n‚ùå Trainer creation tests failed")
        return 1
    
    print("\n‚úÖ All tests passed!")
    print("Ready to run overnight training")
    return 0

if __name__ == "__main__":
    exit(main()) 