#!/usr/bin/env python3
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
====================================

–ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã.
–í—Å–µ –º–æ–¥—É–ª–∏ –¥–æ–ª–∂–Ω—ã –±—Ä–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Å—é–¥–∞, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö–∞—Ä–¥–∫–æ–¥—ã.
"""

from typing import Dict, Any, Optional
import logging
from pathlib import Path
import yaml

logger = logging.getLogger(__name__)


class CentralizedConfig:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
    –í—Å–µ –º–æ–¥—É–ª–∏ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–æ–≤.
    """

    def __init__(self, config_path: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (optional)
        """
        self.config_path = config_path or "config/main_config.yaml"
        self._config: Dict[str, Any] = {}
        self._load_config()

    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            config_file = Path(self.config_path)
            if config_file.exists():
                with open(config_file, "r", encoding="utf-8") as f:
                    self._config = yaml.safe_load(f)
                logger.info(f"[OK] Loaded config from {self.config_path}")
            else:
                logger.warning(
                    f"[WARN] Config file not found: {self.config_path}, using defaults"
                )
                self._config = self._get_default_config()
        except Exception as e:
            logger.error(f"[ERROR] Failed to load config: {e}")
            self._config = self._get_default_config()

    def _get_default_config(self) -> Dict[str, Any]:
        """–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)"""
        return {
            "nca": {
                "state_size": 4,
                "hidden_dim": 3,
                "external_input_size": 1,
                "neighbor_count": 26,
                "target_params": 69,
                "activation": "tanh",
            },
            "gmlp": {
                "state_size": 8,
                "hidden_dim": 32,
                "external_input_size": 12,
                "neighbor_count": 26,
                "target_params": 23805,
                "activation": "gelu",
            },
            "lattice": {"xs": 16, "ys": 16, "zs": 16, "neighbor_count": 26},
        }

    # === NCA PARAMETERS ===
    @property
    def nca_state_size(self) -> int:
        """NCA state size - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return self._config.get("nca", {}).get("state_size", 4)

    @property
    def nca_hidden_dim(self) -> int:
        """NCA hidden dimension - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return self._config.get("nca", {}).get("hidden_dim", 3)

    @property
    def nca_external_input_size(self) -> int:
        """NCA external input size - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return self._config.get("nca", {}).get("external_input_size", 1)

    @property
    def nca_neighbor_count(self) -> int:
        """NCA neighbor count - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return self._config.get("nca", {}).get("neighbor_count", 26)

    @property
    def nca_target_params(self) -> Optional[int]:
        """NCA target parameters - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return self._config.get("nca", {}).get("target_params", 69)

    @property
    def nca_activation(self) -> str:
        """NCA activation function - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return self._config.get("nca", {}).get("activation", "tanh")

    # === GMLP PARAMETERS ===
    @property
    def gmlp_state_size(self) -> int:
        """gMLP state size - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return self._config.get("gmlp", {}).get("state_size", 8)

    @property
    def gmlp_neighbor_count(self) -> int:
        """gMLP neighbor count - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return self._config.get("gmlp", {}).get("neighbor_count", 26)

    # === –û–ë–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===
    @property
    def default_neighbor_count(self) -> int:
        """–î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return 26  # 3D Moore neighborhood

    @property
    def default_state_size_nca(self) -> int:
        """–î–µ—Ñ–æ–ª—Ç–Ω—ã–π state_size –¥–ª—è NCA - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return 4

    @property
    def default_hidden_dim_nca(self) -> int:
        """–î–µ—Ñ–æ–ª—Ç–Ω—ã–π hidden_dim –¥–ª—è NCA - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return 3

    @property
    def default_external_input_size_nca(self) -> int:
        """–î–µ—Ñ–æ–ª—Ç–Ω—ã–π external_input_size –¥–ª—è NCA - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"""
        return 1

    # === –ú–ï–¢–û–î–´ –î–û–°–¢–£–ü–ê ===
    def get_nca_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é NCA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        return {
            "state_size": self.nca_state_size,
            "hidden_dim": self.nca_hidden_dim,
            "external_input_size": self.nca_external_input_size,
            "neighbor_count": self.nca_neighbor_count,
            "target_params": self.nca_target_params,
            "activation": self.nca_activation,
            "dropout": 0.0,
            "use_memory": False,
            "enable_lattice_scaling": False,
        }

    def get_gmlp_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é gMLP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        gmlp_section = self._config.get("gmlp", {})
        return {
            "state_size": self.gmlp_state_size,
            "neighbor_count": self.gmlp_neighbor_count,
            "hidden_dim": gmlp_section.get("hidden_dim", 32),
            "external_input_size": gmlp_section.get("external_input_size", 12),
            "target_params": gmlp_section.get("target_params", 23805),
            "activation": gmlp_section.get("activation", "gelu"),
            "dropout": gmlp_section.get("dropout", 0.1),
            "use_memory": gmlp_section.get("use_memory", False),
        }

    def get_emergent_training_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è emergent training"""
        return {
            "gmlp_config": {
                "state_size": self.gmlp_state_size,
                "neighbor_count": self.gmlp_neighbor_count,
                "activation": "gelu",
                "dropout": 0.1,
                "use_memory": True,
                "spatial_connections": True,
            },
            "nca_config": self.get_nca_config(),
            "enable_nca": True,
        }

    def get_minimal_nca_cell_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è minimal_nca_cell (–¥–ª—è lattice –∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)"""
        return {
            "state_size": self.nca_state_size,
            "neighbor_count": self.nca_neighbor_count,
            "hidden_dim": self.nca_hidden_dim,
            "external_input_size": self.nca_external_input_size,
            "activation": self.nca_activation,
            "dropout": 0.0,
            "use_memory": False,
            "enable_lattice_scaling": False,
            "target_params": self.nca_target_params,
        }

    def get_full_config_dict(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥—É–ª—è–º–∏"""
        return {
            "nca": self.get_nca_config(),
            "gmlp": self.get_gmlp_config(),
            "minimal_nca_cell": self.get_minimal_nca_cell_config(),
            "gmlp_config": self.get_gmlp_config(),  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            "lattice": self._config.get("lattice", {}),
            "embeddings": self._config.get("embeddings", {}),
            "training": self._config.get("training", {}),
        }

    def update_config(self, section: str, key: str, value: Any):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if section not in self._config:
            self._config[section] = {}
        self._config[section][key] = value
        logger.info(f"[TOOL] Updated config: {section}.{key} = {value}")

    def log_config_summary(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üìã CENTRALIZED CONFIG SUMMARY:")
        logger.info(
            f"   NCA: state={self.nca_state_size}, hidden={self.nca_hidden_dim}, "
            f"input={self.nca_external_input_size}, neighbors={self.nca_neighbor_count}"
        )
        logger.info(
            f"   gMLP: state={self.gmlp_state_size}, neighbors={self.gmlp_neighbor_count}"
        )
        logger.info(f"   Default neighbors: {self.default_neighbor_count}")


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ===
_global_config: Optional[CentralizedConfig] = None


def get_centralized_config(config_path: Optional[str] = None) -> CentralizedConfig:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    Args:
        config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (optional)

    Returns:
        CentralizedConfig: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    global _global_config

    if _global_config is None or config_path is not None:
        _global_config = CentralizedConfig(config_path)
        _global_config.log_config_summary()

    return _global_config


# === CONVENIENCE FUNCTIONS ===
def get_nca_defaults() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å NCA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config = get_centralized_config()
    return config.get_nca_config()


def get_gmlp_defaults() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å gMLP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config = get_centralized_config()
    return config.get_gmlp_config()


def get_default_neighbor_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π"""
    config = get_centralized_config()
    return config.default_neighbor_count


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    config = get_centralized_config()
    print("[TEST] Testing Centralized Config:")
    print(f"   NCA config: {config.get_nca_config()}")
    print(f"   gMLP config: {config.get_gmlp_config()}")
