"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π Configuration Manager –¥–ª—è 3D Cellular Neural Network

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –ú–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É (–∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –∏–º–µ–µ—Ç —Å–≤–æ—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
- Environment-specific –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (dev/test/prod)
- –í–∞–ª–∏–¥–∞—Ü–∏—é –∏ hot reloading
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import yaml
import json
from pathlib import Path
from typing import Dict, Any, Optional, List, Union, Callable
import logging
import time
import threading
from dataclasses import dataclass, field
from copy import deepcopy
import hashlib

try:
    from .config_section import ConfigSection
    from .config_validator import ConfigValidator
    from .config_schema import ConfigSchema
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    ConfigSection = None
    ConfigValidator = None
    ConfigSchema = None


@dataclass 
class ConfigManagerSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ConfigManager"""
    base_config_path: str = "config/main_config.yaml"
    module_configs_pattern: str = "*/config/*.yaml"
    environment: str = "development"  # development, testing, production
    enable_hot_reload: bool = True
    hot_reload_interval: float = 1.0  # —Å–µ–∫—É–Ω–¥—ã
    enable_validation: bool = True
    enable_caching: bool = True
    cache_ttl: float = 300.0  # 5 –º–∏–Ω—É—Ç
    enable_environment_overrides: bool = True
    config_search_paths: List[str] = field(default_factory=lambda: [
        "config/",
        "core/*/config/", 
        "data/*/config/",
        "inference/*/config/",
        "training/*/config/",
    ])


class ConfigManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    - –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    - Environment-specific overrides
    - Hot reloading —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ schemas
    - Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    
    def __init__(self, settings: Optional[ConfigManagerSettings] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConfigManager.
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.settings = settings or ConfigManagerSettings()
        self.logger = logging.getLogger(__name__)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._config_cache: Dict[str, Dict[str, Any]] = {}
        self._file_mtimes: Dict[str, float] = {}
        self._validators: Dict[str, Any] = {}  # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self._schemas: Dict[str, Any] = {}     # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        # Thread safety
        self._lock = threading.RLock()
        self._hot_reload_thread: Optional[threading.Thread] = None
        self._should_stop_hot_reload = threading.Event()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._stats = {
            'config_loads': 0,
            'cache_hits': 0,
            'cache_misses': 0,
            'validation_errors': 0,
            'hot_reloads': 0,
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize()
        
    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            self.logger.info("üöÄ Initializing ConfigManager...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self._load_base_config()
            
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self._discover_module_configs()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º schema –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            self._load_config_schemas()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º environment-specific overrides
            if self.settings.enable_environment_overrides:
                self._apply_environment_overrides()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º hot reloading –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if self.settings.enable_hot_reload:
                self._start_hot_reload_monitor()
                
            self.logger.info("‚úÖ ConfigManager initialized successfully")
            self.logger.info(f"   üìä Loaded {len(self._config_cache)} config sections")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to initialize ConfigManager: {e}")
            raise
    
    def get_config(self, section: str = None, key: str = None, default: Any = None) -> Any:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π dot-notation.
        
        Args:
            section: –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'lattice_3d')
            key: –ö–ª—é—á –≤ —Å–µ–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'dimensions.depth') 
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ default
            
        Examples:
            config.get_config()  # –í—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            config.get_config('lattice_3d')  # –°–µ–∫—Ü–∏—è lattice_3d
            config.get_config('lattice_3d', 'dimensions.depth')  # –í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–ª—é—á
        """
        with self._lock:
            try:
                # –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                if section is None:
                    return deepcopy(self._merge_all_configs())
                
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è
                if section not in self._config_cache:
                    self.logger.warning(f"Configuration section '{section}' not found")
                    return default
                
                config_section = self._config_cache[section]
                
                # –í—Å—è —Å–µ–∫—Ü–∏—è
                if key is None:
                    self._stats['cache_hits'] += 1
                    return deepcopy(config_section)
                
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π dot-notation)
                value = self._get_nested_value(config_section, key)
                if value is not None:
                    self._stats['cache_hits'] += 1
                    return deepcopy(value)
                else:
                    self._stats['cache_misses'] += 1
                    return default
                    
            except Exception as e:
                self.logger.error(f"Error getting config {section}.{key}: {e}")
                return default
    
    def set_config(self, section: str, key: str = None, value: Any = None, **kwargs):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ runtime.
        
        Args:
            section: –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            key: –ö–ª—é—á (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dot-notation)
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
            **kwargs: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ
            
        Examples:
            config.set_config('lattice_3d', 'dimensions.depth', 10)
            config.set_config('training', batch_size=32, learning_rate=0.001)
        """
        with self._lock:
            try:
                if section not in self._config_cache:
                    self._config_cache[section] = {}
                
                config_section = self._config_cache[section]
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ kwargs
                if kwargs:
                    for k, v in kwargs.items():
                        self._set_nested_value(config_section, k, v)
                        self.logger.debug(f"Set config {section}.{k} = {v}")
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ key/value
                if key is not None and value is not None:
                    self._set_nested_value(config_section, key, value)
                    self.logger.debug(f"Set config {section}.{key} = {value}")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if self.settings.enable_validation and section in self._validators:
                    self._validate_section(section, config_section)
                    
            except Exception as e:
                self.logger.error(f"Error setting config {section}.{key}: {e}")
                raise
    
    def reload_config(self, section: str = None):
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            section: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ (None = –≤—Å–µ)
        """
        with self._lock:
            try:
                if section is None:
                    self.logger.info("üîÑ Reloading all configurations...")
                    self._config_cache.clear()
                    self._file_mtimes.clear()
                    self._load_base_config()
                    self._discover_module_configs()
                    if self.settings.enable_environment_overrides:
                        self._apply_environment_overrides()
                else:
                    self.logger.info(f"üîÑ Reloading configuration section: {section}")
                    
                self._stats['hot_reloads'] += 1
                self.logger.info("‚úÖ Configuration reloaded successfully")
                
            except Exception as e:
                self.logger.error(f"‚ùå Error reloading configuration: {e}")
                raise
    
    def get_section(self, section_name: str):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç–∞ ConfigSection.
        
        Args:
            section_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
            
        Returns:
            ConfigSection –∏–ª–∏ dict: –û–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∫—Ü–∏–µ–π
        """
        config_data = self.get_config(section_name, default={})
        
        # –ï—Å–ª–∏ ConfigSection –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if ConfigSection is not None:
            return ConfigSection(section_name, config_data, self)
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π dict
            return config_data
    
    def validate_all(self) -> Dict[str, List[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.
        
        Returns:
            Dict[str, List[str]]: –°–ª–æ–≤–∞—Ä—å –æ—à–∏–±–æ–∫ –ø–æ —Å–µ–∫—Ü–∏—è–º
        """
        errors = {}
        
        with self._lock:
            for section, config_data in self._config_cache.items():
                try:
                    section_errors = self._validate_section(section, config_data)
                    if section_errors:
                        errors[section] = section_errors
                except Exception as e:
                    errors[section] = [f"Validation failed: {str(e)}"]
        
        return errors
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã ConfigManager.
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        with self._lock:
            return {
                **self._stats.copy(),
                'cached_sections': len(self._config_cache),
                'tracked_files': len(self._file_mtimes),
                'validators': len(self._validators),
                'cache_hit_rate': (
                    self._stats['cache_hits'] / 
                    max(1, self._stats['cache_hits'] + self._stats['cache_misses'])
                ),
            }
    
    def export_config(self, output_path: str, format: str = 'yaml', section: str = None):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª.
        
        Args:
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            format: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ('yaml', 'json')
            section: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è (None = –≤—Å–µ)
        """
        try:
            config_data = self.get_config(section) if section else self.get_config()
            
            Path(output_path).parent.mkdir(parents=True, exist_ok=True)
            
            if format.lower() == 'yaml':
                with open(output_path, 'w', encoding='utf-8') as f:
                    yaml.dump(config_data, f, default_flow_style=False, 
                             allow_unicode=True, sort_keys=False)
            elif format.lower() == 'json':
                with open(output_path, 'w', encoding='utf-8') as f:
                    json.dump(config_data, f, indent=2, ensure_ascii=False)
            else:
                raise ValueError(f"Unsupported format: {format}")
                
            self.logger.info(f"‚úÖ Configuration exported to {output_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error exporting configuration: {e}")
            raise
    
    def __enter__(self):
        """Context manager entry"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        self.shutdown()
    
    def shutdown(self):
        """Graceful shutdown"""
        self.logger.info("üõë Shutting down ConfigManager...")
        
        if self._hot_reload_thread and self._hot_reload_thread.is_alive():
            self._should_stop_hot_reload.set()
            self._hot_reload_thread.join(timeout=2.0)
        
        self.logger.info("‚úÖ ConfigManager shutdown complete")
    
    # ========================================
    # PRIVATE METHODS
    # ========================================
    
    def _load_base_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        base_path = Path(self.settings.base_config_path)
        
        if not base_path.exists():
            self.logger.warning(f"Base config file not found: {base_path}")
            return
        
        try:
            with open(base_path, 'r', encoding='utf-8') as f:
                base_config = yaml.safe_load(f) or {}
            
            # –ö—ç—à–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
            for section_name, section_data in base_config.items():
                self._config_cache[section_name] = section_data
                
            self._file_mtimes[str(base_path)] = base_path.stat().st_mtime
            self._stats['config_loads'] += 1
            
            self.logger.info(f"üìù Loaded base config: {base_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error loading base config {base_path}: {e}")
            raise
    
    def _discover_module_configs(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        discovered_configs = []
        
        for search_path in self.settings.config_search_paths:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º glob –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                pattern = Path(search_path) / "*.yaml"
                config_files = list(Path(".").glob(str(pattern)))
                
                for config_file in config_files:
                    if config_file.exists() and config_file != Path(self.settings.base_config_path):
                        self._load_module_config(config_file)
                        discovered_configs.append(str(config_file))
                        
            except Exception as e:
                self.logger.warning(f"Error discovering configs in {search_path}: {e}")
        
        if discovered_configs:
            self.logger.info(f"üîç Discovered {len(discovered_configs)} module configs")
    
    def _load_module_config(self, config_path: Path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                module_config = yaml.safe_load(f) or {}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –º–æ–¥—É–ª—è –∏–∑ –ø—É—Ç–∏
            module_name = self._extract_module_name(config_path)
            
            # –ú–µ—Ä–∂–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            for section_name, section_data in module_config.items():
                full_section_name = f"{module_name}_{section_name}" if module_name else section_name
                
                if full_section_name in self._config_cache:
                    # –ú–µ—Ä–∂–∏–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                    self._deep_merge(self._config_cache[full_section_name], section_data)
                else:
                    self._config_cache[full_section_name] = section_data
            
            self._file_mtimes[str(config_path)] = config_path.stat().st_mtime
            self._stats['config_loads'] += 1
            
        except Exception as e:
            self.logger.error(f"‚ùå Error loading module config {config_path}: {e}")
    
    def _extract_module_name(self, config_path: Path) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è –∏–∑ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        parts = config_path.parts
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: module_name/config/file.yaml
        for i, part in enumerate(parts):
            if part == 'config' and i > 0:
                return parts[i-1]
        
        return ""
    
    def _load_config_schemas(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        pass
    
    def _apply_environment_overrides(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ environment-specific –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        env = self.settings.environment.lower()
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ —Å environment overrides
        for section_name, section_data in self._config_cache.items():
            if isinstance(section_data, dict) and env in section_data:
                env_overrides = section_data[env]
                if isinstance(env_overrides, dict):
                    self._deep_merge(section_data, env_overrides)
                    self.logger.debug(f"Applied {env} overrides to {section_name}")
    
    def _start_hot_reload_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ hot reload"""
        def monitor_files():
            while not self._should_stop_hot_reload.is_set():
                try:
                    self._check_file_changes()
                    self._should_stop_hot_reload.wait(self.settings.hot_reload_interval)
                except Exception as e:
                    self.logger.error(f"Error in hot reload monitor: {e}")
        
        self._hot_reload_thread = threading.Thread(target=monitor_files, daemon=True)
        self._hot_reload_thread.start()
        self.logger.info("üîÑ Hot reload monitor started")
    
    def _check_file_changes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
        changed_files = []
        
        for file_path, cached_mtime in self._file_mtimes.items():
            try:
                current_mtime = Path(file_path).stat().st_mtime
                if current_mtime > cached_mtime:
                    changed_files.append(file_path)
            except FileNotFoundError:
                # –§–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω
                changed_files.append(file_path)
        
        if changed_files:
            self.logger.info(f"üîÑ Detected changes in {len(changed_files)} config files")
            self.reload_config()
    
    def _validate_section(self, section: str, config_data: Dict[str, Any]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if section not in self._validators:
            return []
        
        try:
            validator = self._validators[section]
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            return []
        except Exception as e:
            self._stats['validation_errors'] += 1
            return [f"Validation error: {str(e)}"]
    
    def _merge_all_configs(self) -> Dict[str, Any]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å"""
        merged = {}
        for section_name, section_data in self._config_cache.items():
            merged[section_name] = section_data
        return merged
    
    def _get_nested_value(self, data: Dict[str, Any], key: str) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ dot-notation"""
        keys = key.split('.')
        current = data
        
        for k in keys:
            if isinstance(current, dict) and k in current:
                current = current[k]
            else:
                return None
        
        return current
    
    def _set_nested_value(self, data: Dict[str, Any], key: str, value: Any):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ dot-notation"""
        keys = key.split('.')
        current = data
        
        for k in keys[:-1]:
            if k not in current or not isinstance(current[k], dict):
                current[k] = {}
            current = current[k]
        
        current[keys[-1]] = value
    
    def _deep_merge(self, base: Dict[str, Any], update: Dict[str, Any]):
        """–ì–ª—É–±–æ–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π"""
        for key, value in update.items():
            if key in base and isinstance(base[key], dict) and isinstance(value, dict):
                self._deep_merge(base[key], value)
            else:
                base[key] = value


# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

def create_config_manager(
    base_config: str = "config/main_config.yaml",
    environment: str = "development",
    enable_hot_reload: bool = True
) -> ConfigManager:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ConfigManager.
    
    Args:
        base_config: –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        environment: –û–∫—Ä—É–∂–µ–Ω–∏–µ (development/testing/production)
        enable_hot_reload: –í–∫–ª—é—á–∏—Ç—å hot reloading
        
    Returns:
        ConfigManager: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    settings = ConfigManagerSettings(
        base_config_path=base_config,
        environment=environment,
        enable_hot_reload=enable_hot_reload
    )
    
    return ConfigManager(settings)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (singleton pattern)
_global_config_manager: Optional[ConfigManager] = None


def get_global_config_manager() -> ConfigManager:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ConfigManager.
    
    Returns:
        ConfigManager: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    global _global_config_manager
    
    if _global_config_manager is None:
        _global_config_manager = create_config_manager()
    
    return _global_config_manager


def set_global_config_manager(config_manager: ConfigManager):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ConfigManager.
    
    Args:
        config_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    global _global_config_manager
    _global_config_manager = config_manager 