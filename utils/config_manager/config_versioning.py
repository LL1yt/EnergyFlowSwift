"""
Config Versioning - —Å–∏—Å—Ç–µ–º–∞ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ú–∏–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
- –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
- Rollback –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–µ—Ä—Å–∏—è–º
"""

import os
import json
import yaml
import hashlib
import time
from datetime import datetime
from typing import Dict, Any, List, Optional, Tuple, Callable
from pathlib import Path
from dataclasses import dataclass, field, asdict
from enum import Enum
import logging


class ChangeType(Enum):
    """–¢–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    ADDED = "added"
    MODIFIED = "modified"
    DELETED = "deleted"
    RENAMED = "renamed"


@dataclass
class ConfigChange:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    path: str                           # –ü—É—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é (dot notation)
    change_type: ChangeType            # –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è
    old_value: Any = None              # –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    new_value: Any = None              # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    timestamp: datetime = field(default_factory=datetime.now)
    user: Optional[str] = None         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–¥–µ–ª–∞–≤—à–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    description: Optional[str] = None  # –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è


@dataclass
class ConfigVersion:
    """–í–µ—Ä—Å–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    version: str                       # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è (e.g., "1.2.3")
    config_hash: str                   # Hash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    timestamp: datetime = field(default_factory=datetime.now)
    changes: List[ConfigChange] = field(default_factory=list)
    description: Optional[str] = None  # –û–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    is_stable: bool = True            # –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–ª–∏ dev
    migration_required: bool = False   # –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            'version': self.version,
            'config_hash': self.config_hash,
            'timestamp': self.timestamp.isoformat(),
            'changes': [
                {
                    'path': change.path,
                    'change_type': change.change_type.value,
                    'old_value': change.old_value,
                    'new_value': change.new_value,
                    'timestamp': change.timestamp.isoformat(),
                    'user': change.user,
                    'description': change.description
                }
                for change in self.changes
            ],
            'description': self.description,
            'is_stable': self.is_stable,
            'migration_required': self.migration_required
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'ConfigVersion':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        changes = [
            ConfigChange(
                path=change_data['path'],
                change_type=ChangeType(change_data['change_type']),
                old_value=change_data.get('old_value'),
                new_value=change_data.get('new_value'),
                timestamp=datetime.fromisoformat(change_data['timestamp']),
                user=change_data.get('user'),
                description=change_data.get('description')
            )
            for change_data in data.get('changes', [])
        ]
        
        return cls(
            version=data['version'],
            config_hash=data['config_hash'],
            timestamp=datetime.fromisoformat(data['timestamp']),
            changes=changes,
            description=data.get('description'),
            is_stable=data.get('is_stable', True),
            migration_required=data.get('migration_required', False)
        )


class ConfigMigration:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, from_version: str, to_version: str, description: str = ""):
        self.from_version = from_version
        self.to_version = to_version
        self.description = description
    
    def can_migrate(self, from_version: str, to_version: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        return (self.from_version == from_version and 
                self.to_version == to_version)
    
    def migrate(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        raise NotImplementedError
    
    def get_description(self) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        return f"Migration from {self.from_version} to {self.to_version}: {self.description}"


class ConfigVersionManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ä—Å–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
    - –ú–∏–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
    - –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    - Rollback –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–µ—Ä—Å–∏—è–º
    """
    
    def __init__(self, 
                 versions_dir: str = "config/versions",
                 current_version: str = "1.0.0",
                 auto_save: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–µ—Ä—Å–∏–π.
        
        Args:
            versions_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
            current_version: –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è
            auto_save: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        self.versions_dir = Path(versions_dir)
        self.current_version = current_version
        self.auto_save = auto_save
        self.logger = logging.getLogger(__name__)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.versions_dir.mkdir(parents=True, exist_ok=True)
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        self._versions: Dict[str, ConfigVersion] = {}
        self._current_config: Optional[Dict[str, Any]] = None
        self._migrations: List[ConfigMigration] = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–µ—Ä—Å–∏–∏
        self._load_versions()
        
        self.logger.info(f"üìö ConfigVersionManager initialized with {len(self._versions)} versions")
    
    def track_changes(self, 
                     old_config: Dict[str, Any], 
                     new_config: Dict[str, Any],
                     user: Optional[str] = None,
                     description: Optional[str] = None) -> List[ConfigChange]:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.
        
        Args:
            old_config: –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            new_config: –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–Ω–µ—Å—à–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        changes = []
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        all_paths = set()
        self._collect_paths(old_config, "", all_paths)
        self._collect_paths(new_config, "", all_paths)
        
        for path in all_paths:
            old_value = self._get_nested_value(old_config, path)
            new_value = self._get_nested_value(new_config, path)
            
            if old_value is None and new_value is not None:
                # –î–æ–±–∞–≤–ª–µ–Ω–æ
                changes.append(ConfigChange(
                    path=path,
                    change_type=ChangeType.ADDED,
                    new_value=new_value,
                    user=user,
                    description=description
                ))
            elif old_value is not None and new_value is None:
                # –£–¥–∞–ª–µ–Ω–æ
                changes.append(ConfigChange(
                    path=path,
                    change_type=ChangeType.DELETED,
                    old_value=old_value,
                    user=user,
                    description=description
                ))
            elif old_value != new_value:
                # –ò–∑–º–µ–Ω–µ–Ω–æ
                changes.append(ConfigChange(
                    path=path,
                    change_type=ChangeType.MODIFIED,
                    old_value=old_value,
                    new_value=new_value,
                    user=user,
                    description=description
                ))
        
        return changes
    
    def create_version(self, 
                      config_data: Dict[str, Any],
                      version: Optional[str] = None,
                      description: Optional[str] = None,
                      is_stable: bool = True,
                      user: Optional[str] = None) -> ConfigVersion:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Args:
            config_data: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            version: –í–µ—Ä—Å–∏—è (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
            is_stable: –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if version is None:
            version = self._generate_next_version()
        
        # –í—ã—á–∏—Å–ª—è–µ–º hash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_hash = self._calculate_config_hash(config_data)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
        changes = []
        if self._current_config is not None:
            changes = self.track_changes(
                self._current_config, 
                config_data, 
                user=user, 
                description=description
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è, –≤—Å–µ –ø–æ–ª—è —Å—á–∏—Ç–∞—é—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏
            self._collect_paths(config_data, "", set())
            all_paths = set()
            self._collect_paths(config_data, "", all_paths)
            
            for path in all_paths:
                value = self._get_nested_value(config_data, path)
                if value is not None:
                    changes.append(ConfigChange(
                        path=path,
                        change_type=ChangeType.ADDED,
                        new_value=value,
                        user=user,
                        description=description or "Initial version"
                    ))
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é
        config_version = ConfigVersion(
            version=version,
            config_hash=config_hash,
            changes=changes,
            description=description,
            is_stable=is_stable
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é
        self._versions[version] = config_version
        self._current_config = config_data.copy()
        self.current_version = version
        
        if self.auto_save:
            self._save_version(config_version, config_data)
        
        self.logger.info(f"üìå Created config version {version} with {len(changes)} changes")
        return config_version
    
    def get_version(self, version: str) -> Optional[ConfigVersion]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏"""
        return self._versions.get(version)
    
    def list_versions(self, stable_only: bool = False) -> List[ConfigVersion]:
        """
        –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π.
        
        Args:
            stable_only: –¢–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        """
        versions = list(self._versions.values())
        
        if stable_only:
            versions = [v for v in versions if v.is_stable]
        
        return sorted(versions, key=lambda v: v.timestamp, reverse=True)
    
    def get_config_for_version(self, version: str) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.
        
        Args:
            version: –í–µ—Ä—Å–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        version_file = self.versions_dir / f"{version}.yaml"
        
        if not version_file.exists():
            self.logger.warning(f"Configuration file for version {version} not found")
            return None
        
        try:
            with open(version_file, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except Exception as e:
            self.logger.error(f"Error loading config for version {version}: {e}")
            return None
    
    def rollback_to_version(self, target_version: str) -> Optional[Dict[str, Any]]:
        """
        –û—Ç–∫–∞—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.
        
        Args:
            target_version: –¶–µ–ª–µ–≤–∞—è –≤–µ—Ä—Å–∏—è
            
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∏–ª–∏ None
        """
        if target_version not in self._versions:
            self.logger.error(f"Version {target_version} not found")
            return None
        
        config_data = self.get_config_for_version(target_version)
        if config_data is None:
            return None
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ rollback
        rollback_version = self._generate_next_version()
        self.create_version(
            config_data=config_data,
            version=rollback_version,
            description=f"Rollback to version {target_version}",
            is_stable=True
        )
        
        self.logger.info(f"üîÑ Rolled back to version {target_version} as {rollback_version}")
        return config_data
    
    def add_migration(self, migration: ConfigMigration):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        self._migrations.append(migration)
        self.logger.info(f"üìã Added migration: {migration.get_description()}")
    
    def migrate_to_version(self, 
                          from_version: str, 
                          to_version: str, 
                          config_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏.
        
        Args:
            from_version: –ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è
            to_version: –¶–µ–ª–µ–≤–∞—è –≤–µ—Ä—Å–∏—è
            config_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            
        Returns:
            –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
        """
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–∏–≥—Ä–∞—Ü–∏—é
        migration = None
        for m in self._migrations:
            if m.can_migrate(from_version, to_version):
                migration = m
                break
        
        if migration is None:
            self.logger.error(f"No migration found from {from_version} to {to_version}")
            return None
        
        try:
            migrated_data = migration.migrate(config_data)
            self.logger.info(f"üîÑ Migrated config from {from_version} to {to_version}")
            return migrated_data
        except Exception as e:
            self.logger.error(f"Migration failed: {e}")
            return None
    
    def get_changes_since_version(self, since_version: str) -> List[ConfigChange]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.
        
        Args:
            since_version: –í–µ—Ä—Å–∏—è —Å –∫–æ—Ç–æ—Ä–æ–π —Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        all_changes = []
        
        for version in sorted(self._versions.keys()):
            if version > since_version:
                version_obj = self._versions[version]
                all_changes.extend(version_obj.changes)
        
        return all_changes
    
    def export_version_history(self, output_file: str, format: str = "json"):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Ä—Å–∏–π.
        
        Args:
            output_file: –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            format: –§–æ—Ä–º–∞—Ç (json/yaml)
        """
        history = {
            'current_version': self.current_version,
            'versions': [version.to_dict() for version in self._versions.values()],
            'exported_at': datetime.now().isoformat()
        }
        
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        if format.lower() == 'json':
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(history, f, indent=2, ensure_ascii=False)
        elif format.lower() == 'yaml':
            with open(output_path, 'w', encoding='utf-8') as f:
                yaml.dump(history, f, default_flow_style=False, allow_unicode=True)
        
        self.logger.info(f"üìä Exported version history to {output_file}")
    
    # ========================================
    # PRIVATE METHODS
    # ========================================
    
    def _load_versions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–µ—Ä—Å–∏–π"""
        metadata_file = self.versions_dir / "versions.json"
        
        if not metadata_file.exists():
            return
        
        try:
            with open(metadata_file, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
            
            for version_data in metadata.get('versions', []):
                version = ConfigVersion.from_dict(version_data)
                self._versions[version.version] = version
            
            self.current_version = metadata.get('current_version', '1.0.0')
            
        except Exception as e:
            self.logger.error(f"Error loading versions metadata: {e}")
    
    def _save_version(self, version: ConfigVersion, config_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –Ω–∞ –¥–∏—Å–∫"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_file = self.versions_dir / f"{version.version}.yaml"
        with open(config_file, 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, default_flow_style=False, allow_unicode=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self._save_metadata()
    
    def _save_metadata(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
        metadata = {
            'current_version': self.current_version,
            'versions': [version.to_dict() for version in self._versions.values()],
            'updated_at': datetime.now().isoformat()
        }
        
        metadata_file = self.versions_dir / "versions.json"
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    def _generate_next_version(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏"""
        if not self._versions:
            return "1.0.0"
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
        max_version = max(self._versions.keys(), key=lambda v: tuple(map(int, v.split('.'))))
        major, minor, patch = map(int, max_version.split('.'))
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –≤–µ—Ä—Å–∏—é
        return f"{major}.{minor}.{patch + 1}"
    
    def _calculate_config_hash(self, config_data: Dict[str, Any]) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ hash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_str = json.dumps(config_data, sort_keys=True, ensure_ascii=False)
        return hashlib.sha256(config_str.encode('utf-8')).hexdigest()
    
    def _collect_paths(self, data: Dict[str, Any], prefix: str, paths: set):
        """–°–±–æ—Ä –≤—Å–µ—Ö –ø—É—Ç–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        for key, value in data.items():
            path = f"{prefix}.{key}" if prefix else key
            paths.add(path)
            
            if isinstance(value, dict):
                self._collect_paths(value, path, paths)
    
    def _get_nested_value(self, data: Dict[str, Any], path: str) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏"""
        if not path:
            return data
        
        keys = path.split('.')
        current = data
        
        for key in keys:
            if isinstance(current, dict) and key in current:
                current = current[key]
            else:
                return None
        
        return current


# =============================================================================
# –ü–†–ï–î–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ú–ò–ì–†–ê–¶–ò–ò
# =============================================================================

class LatticeV1ToV2Migration(ConfigMigration):
    """–ú–∏–≥—Ä–∞—Ü–∏—è lattice –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å v1.0 –Ω–∞ v2.0"""
    
    def __init__(self):
        super().__init__(
            from_version="1.0.0",
            to_version="2.0.0",
            description="Add new connectivity options and boundary conditions"
        )
    
    def migrate(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        migrated = config_data.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'lattice_3d' in migrated:
            lattice_config = migrated['lattice_3d']
            
            # –î–æ–±–∞–≤–ª—è–µ–º connectivity –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'connectivity' not in lattice_config:
                lattice_config['connectivity'] = {
                    'type': '6-neighbors',
                    'weight_sharing': True
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º boundary_conditions –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'boundary_conditions' not in lattice_config:
                lattice_config['boundary_conditions'] = 'walls'
        
        return migrated


# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
DEFAULT_MIGRATIONS = [
    LatticeV1ToV2Migration(),
]