#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ—Å–µ–¥–µ–π
–∏ –Ω–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import torch
import numpy as np
import time
from new_rebuild.config import (
    create_experiment_config,
    create_debug_config,
    set_project_config,
    get_project_config,
)
from new_rebuild.core.moe import ConnectionCacheManager, UnifiedConnectionClassifier
from new_rebuild.core.lattice.spatial_optimization import UnifiedSpatialOptimizer
from new_rebuild.core.moe.distance_calculator import DistanceCalculator
from new_rebuild.core.lattice import create_lattice
from new_rebuild.utils.logging import get_logger

logger = get_logger(__name__)


def test_spatial_hash_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è spatial hash –¥–ª—è —Ç–æ—á–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é"""
    print("=== –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è spatial hash ===\n")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = create_experiment_config()
    set_project_config(config)

    # –°–æ–∑–¥–∞–µ–º spatial optimizer
    from new_rebuild.core.lattice.spatial_optimization.unified_spatial_optimizer import (
        OptimizationConfig,
    )

    opt_config = OptimizationConfig(
        enable_morton_encoding=config.lattice.enable_morton_encoding,
        enable_adaptive_chunking=config.adaptive_chunker is not None,
        max_memory_gb=8.0,
        target_performance_ms=config.lattice.target_performance_ms,
    )

    spatial_optimizer = UnifiedSpatialOptimizer(
        dimensions=config.lattice.dimensions, config=opt_config
    )

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–µ—Ç–∫—É 677
    test_cell = 677
    adaptive_radius = config.calculate_adaptive_radius()

    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–µ—Ç–∫—É {test_cell} —Å adaptive_radius={adaptive_radius}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–µ–π —á–µ—Ä–µ–∑ spatial optimizer
    neighbors = spatial_optimizer.find_neighbors_by_radius_safe(test_cell)
    print(f"Spatial optimizer –Ω–∞—à–µ–ª {len(neighbors)} —Å–æ—Å–µ–¥–µ–π")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    dist_calc = DistanceCalculator(config.lattice.dimensions)
    distances = []
    for neighbor_idx in neighbors:
        dist = dist_calc.euclidean_distance(test_cell, neighbor_idx)
        distances.append((neighbor_idx, dist))

    distances.sort(key=lambda x: x[1])

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    local_threshold = adaptive_radius * config.lattice.local_distance_ratio
    functional_threshold = adaptive_radius * config.lattice.functional_distance_ratio
    distant_threshold = adaptive_radius * config.lattice.distant_distance_ratio

    within_local = sum(1 for _, d in distances if d < local_threshold)
    within_functional = sum(
        1 for _, d in distances if local_threshold <= d <= functional_threshold
    )
    within_distant = sum(
        1 for _, d in distances if functional_threshold < d <= distant_threshold
    )
    beyond_distant = sum(1 for _, d in distances if d > distant_threshold)

    print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–ª—è {len(neighbors)} —Å–æ—Å–µ–¥–µ–π:")
    print(f"  LOCAL (d < {local_threshold:.2f}): {within_local}")
    print(
        f"  FUNCTIONAL ({local_threshold:.2f} <= d <= {functional_threshold:.2f}): {within_functional}"
    )
    print(
        f"  DISTANT ({functional_threshold:.2f} < d <= {distant_threshold:.2f}): {within_distant}"
    )
    print(f"  BEYOND threshold (d > {distant_threshold:.2f}): {beyond_distant}")

    if beyond_distant == 0:
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ —Å–æ—Å–µ–¥–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö distant_threshold!")
    else:
        print(
            f"‚ùå –ü–†–û–ë–õ–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø: {beyond_distant} —Å–æ—Å–µ–¥–µ–π –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ distant_threshold"
        )
        for idx, (neighbor, dist) in enumerate(distances):
            if dist > distant_threshold:
                print(
                    f"    Neighbor {neighbor}: distance = {dist:.3f} (–ø—Ä–µ–≤—ã—à–∞–µ—Ç {distant_threshold:.3f})"
                )
                if idx >= 5:
                    break

    return beyond_distant == 0


def test_cache_consistency():
    """–¢–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ –∏ spatial optimizer"""
    print("\n=== –¢–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ ===\n")

    config = get_project_config()

    # –°–æ–∑–¥–∞–µ–º –∫—ç—à –º–µ–Ω–µ–¥–∂–µ—Ä
    cache_manager = ConnectionCacheManager(config.lattice.dimensions)

    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫—ç—à
    print("–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫—ç—à...")
    cache_manager.precompute_all_connections(force_rebuild=True)

    # –°–æ–∑–¥–∞–µ–º spatial optimizer
    from new_rebuild.core.lattice.spatial_optimization.unified_spatial_optimizer import (
        OptimizationConfig,
    )

    opt_config = OptimizationConfig(
        enable_morton_encoding=config.lattice.enable_morton_encoding,
        enable_adaptive_chunking=config.adaptive_chunker is not None,
        max_memory_gb=8.0,
        target_performance_ms=config.lattice.target_performance_ms,
    )

    spatial_optimizer = UnifiedSpatialOptimizer(
        dimensions=config.lattice.dimensions, config=opt_config
    )

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–µ—Ç–æ–∫
    test_cells = [677, 1000, 2000]
    all_consistent = True

    for test_cell in test_cells:
        print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–µ—Ç–∫—É {test_cell}:")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–µ–π –æ—Ç spatial optimizer
        spatial_neighbors = set(
            spatial_optimizer.find_neighbors_by_radius_safe(test_cell)
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–µ–π –∏–∑ –∫—ç—à–∞
        cached_data = cache_manager.cache.get(test_cell, {})
        cache_neighbors = set()

        if cached_data:
            for conn_list in cached_data.values():
                for conn in conn_list:
                    if hasattr(conn, "target_idx"):
                        cache_neighbors.add(conn.target_idx)
                    else:
                        cache_neighbors.add(conn["target_idx"])

        print(f"  Spatial optimizer: {len(spatial_neighbors)} —Å–æ—Å–µ–¥–µ–π")
        print(f"  –ö—ç—à: {len(cache_neighbors)} —Å–æ—Å–µ–¥–µ–π")

        if spatial_neighbors == cache_neighbors:
            print("  ‚úÖ –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–¨: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        else:
            print("  ‚ùå –ù–ï–°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–¨: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            difference = len(spatial_neighbors.symmetric_difference(cache_neighbors))
            print(f"     –†–∞–∑–Ω–∏—Ü–∞: {difference} —Å–æ—Å–µ–¥–µ–π")
            all_consistent = False

    return all_consistent


def test_optimized_architecture():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã ===\n")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = create_debug_config()
    config.cache.enabled = True  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –∫—ç—à
    config.model.neighbor_count = -1  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å–µ–¥–µ–π
    config.lattice.dimensions = (8, 8, 8)  # –ù–µ–±–æ–ª—å—à–∞—è —Ä–µ—à–µ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    set_project_config(config)
    
    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  - –†–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: {config.lattice.dimensions}")
    print(f"  - –ö—ç—à –≤–∫–ª—é—á–µ–Ω: {config.cache.enabled}")
    print(f"  - State size: {config.model.state_size}")
    print(f"  - Adaptive radius: {config.calculate_adaptive_radius():.3f}")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ—Ç–∫–∏...")
    start_time = time.time()
    lattice = create_lattice()
    creation_time = time.time() - start_time
    print(f"‚úÖ –†–µ—à–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ {creation_time:.2f}—Å")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    moe_processor = lattice.moe_processor
    connection_classifier = moe_processor.connection_classifier
    
    if hasattr(connection_classifier, 'cache_manager'):
        cache_stats = connection_classifier.cache_manager.get_cache_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
        print(f"  - –°—Ç–∞—Ç—É—Å: {cache_stats['status']}")
        print(f"  - –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ –∫–ª–µ—Ç–æ–∫: {cache_stats['cached_cells']}")
        print(f"  - –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {cache_stats['total_connections']}")
        print(f"  - –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {cache_stats['cache_size_mb']:.1f}MB")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ get_cached_neighbors_and_classification
    print("\nüîç –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ get_cached_neighbors_and_classification:")
    test_cell_idx = 100  # –¢–µ—Å—Ç–æ–≤–∞—è –∫–ª–µ—Ç–∫–∞
    
    neighbors_data = connection_classifier.get_cached_neighbors_and_classification(
        cell_idx=test_cell_idx,
        states=lattice.states
    )
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–ª–µ—Ç–∫–∏ {test_cell_idx}:")
    for category in ["local", "functional", "distant"]:
        data = neighbors_data[category]
        print(f"  - {category.upper()}:")
        print(f"    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(data['indices'])}")
        print(f"    - –ò–Ω–¥–µ–∫—Å—ã: {data['indices'][:5]}{'...' if len(data['indices']) > 5 else ''}")
        print(f"    - States shape: {data['states'].shape}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ forward pass...")
    external_input = torch.randn(len(lattice.input_indices), config.model.state_size)
    lattice.set_input_states(external_input)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
    num_iterations = 3
    for i in range(num_iterations):
        print(f"\n–ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{num_iterations}:")
        start_time = time.time()
        
        # Forward pass
        output_states = lattice.forward()
        
        iteration_time = time.time() - start_time
        print(f"  - –í—Ä–µ–º—è: {iteration_time*1000:.1f}ms")
        print(f"  - Output shape: {output_states.shape}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É MoE
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MoE Processor:")
    stats = moe_processor.get_stats()
    print(f"  - –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª–µ—Ç–æ–∫: {stats['total_cells_processed']}")
    print(f"  - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Å–æ—Å–µ–¥–µ–π: {stats['avg_neighbors_per_cell']:.1f}")
    print(f"  - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º:")
    for expert, ratio in stats['expert_usage_ratios'].items():
        print(f"    - {expert}: {ratio*100:.1f}%")
    
    print("\n‚úÖ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å–µ–¥–µ–π\n")

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è spatial hash
    spatial_hash_fixed = test_spatial_hash_fix()

    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
    cache_consistent = test_cache_consistency()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    architecture_optimized = test_optimized_architecture()

    print(f"\n{'='*50}")
    print("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"{'='*50}")
    print(f"Spatial hash –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {'‚úÖ' if spatial_hash_fixed else '‚ùå'}")
    print(f"–ö—ç—à —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω: {'‚úÖ' if cache_consistent else '‚ùå'}")
    print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ' if architecture_optimized else '‚ùå'}")

    if spatial_hash_fixed and cache_consistent and architecture_optimized:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        print("\nüéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        print("  - ‚úÖ –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π")
        print("  - ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ–¥–∏–Ω—ã–π –∫—ç—à –¥–ª—è —Å–æ—Å–µ–¥–µ–π –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("  - ‚úÖ MoE Processor —É–ø—Ä–æ—â–µ–Ω")
        print("  - ‚úÖ –ü–æ–≤—ã—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")


if __name__ == "__main__":
    main()
