#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MoE + Spatial Optimization
==========================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é MoESpatialOptimizer —Å MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
–¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–∫–∞—Ö.

–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- MoESpatialOptimizer: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è spatial optimization —Å MoE
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ create_moe_spatial_optimizer
- –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è MoE + Spatial –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- Chunked MoE processing —Å classification —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ performance optimization

–¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- 27√ó27√ó27 (19,683 –∫–ª–µ—Ç–æ–∫): < 100ms forward pass
- 100√ó100√ó100 (1M –∫–ª–µ—Ç–æ–∫): < 500ms forward pass
- Memory usage: —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å RTX 5090 (32GB)
"""

import torch
import time
import numpy as np
from typing import Dict, List, Tuple
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from new_rebuild.core.lattice.spatial_optimization import (
    MoESpatialOptimizer,
    create_moe_spatial_optimizer,
    estimate_moe_memory_requirements,
    SpatialOptimConfig,
)
from new_rebuild.core.lattice import create_lattice
from new_rebuild.config import get_project_config
from new_rebuild.utils.logging import get_logger

logger = get_logger(__name__)


class MoEConnectionProcessorMock:
    """Mock –¥–ª—è MoE Connection Processor –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, state_size=32):
        self.state_size = state_size
        self.device = torch.device("cpu")
        self.processing_stats = {
            "calls": 0,
            "total_cells": 0,
            "expert_usage": {"local": 0, "functional": 0, "distant": 0},
        }

    def to(self, device):
        """–ü–µ—Ä–µ–Ω–æ—Å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        self.device = device
        return self

    def __call__(self, states, neighbors_dict, chunk_info=None):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ MoE —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""

        self.processing_stats["calls"] += 1
        self.processing_stats["total_cells"] += states.shape[0]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        for expert_type, neighbor_indices in neighbors_dict.items():
            if len(neighbor_indices) > 0:
                self.processing_stats["expert_usage"][expert_type] += len(
                    neighbor_indices
                )

        # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —à—É–º —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ–º –∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        noise = torch.randn_like(states, device=states.device) * 0.01
        return states + noise


class MoESpatialOptimizationTest:
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MoE + Spatial Optimization"""

    def __init__(self):
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.results = {}

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if torch.cuda.is_available():
            self.device = torch.device("cuda")
            torch.cuda.empty_cache()  # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            logger.info(
                f"üöÄ MoE Spatial Optimization Test (CUDA available, device: {self.device})"
            )
            logger.info(
                f"üíæ GPU Memory: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f}GB"
            )
        else:
            logger.warning(f"‚ö†Ô∏è CUDA –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU: {self.device}")
            logger.info("üíª CPU Mode")

    def test_moe_memory_estimation(self):
        """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è MoE + Spatial Optimization"""
        print("\nüíæ –¢–ï–°–¢ –û–¶–ï–ù–ö–ò –ü–ê–ú–Ø–¢–ò MoE + SPATIAL")
        print("=" * 70)

        test_sizes = [
            (27, 27, 27),  # –¢–µ–∫—É—â–∏–π MoE —Ä–∞–∑–º–µ—Ä (19k –∫–ª–µ—Ç–æ–∫)
            (50, 50, 50),  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä (125k –∫–ª–µ—Ç–æ–∫)
            (100, 100, 100),  # –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä (1M –∫–ª–µ—Ç–æ–∫)
            (150, 150, 150),  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π (3.4M –∫–ª–µ—Ç–æ–∫)
        ]

        for dimensions in test_sizes:
            memory_req = estimate_moe_memory_requirements(dimensions)
            total_cells = dimensions[0] * dimensions[1] * dimensions[2]

            print(f"\nüìä –†–µ—à–µ—Ç–∫–∞ {dimensions} ({total_cells:,} –∫–ª–µ—Ç–æ–∫):")
            print(f"   üîß –ë–∞–∑–æ–≤–∞—è –ø–∞–º—è—Ç—å: {memory_req['base_memory_gb']:.3f} GB")
            print(f"   ü§ñ MoE —ç–∫—Å–ø–µ—Ä—Ç—ã: {memory_req['moe_experts_gb']:.3f} GB")
            print(f"   üéØ Gating Network: {memory_req['gating_network_gb']:.3f} GB")
            print(
                f"   üóÇÔ∏è Spatial optimization: {memory_req['spatial_optimization_gb']:.3f} GB"
            )
            print(f"   üîó –°–æ—Å–µ–¥–∏: {memory_req['neighbor_memory_gb']:.3f} GB")
            print(f"   üìà –ë—É—Ñ–µ—Ä—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {memory_req['expert_buffers_gb']:.3f} GB")
            print(f"   üìä –ò–¢–û–ì–û: {memory_req['total_memory_gb']:.3f} GB")
            print(
                f"   üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π GPU: {memory_req['recommended_gpu_memory_gb']:.3f} GB"
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ GPU
            if memory_req["recommended_gpu_memory_gb"] <= 16:
                gpu_class = "RTX 4080/5070 (16GB)"
            elif memory_req["recommended_gpu_memory_gb"] <= 24:
                gpu_class = "RTX 4090/5080 (24GB)"
            elif memory_req["recommended_gpu_memory_gb"] <= 32:
                gpu_class = "RTX 5090 (32GB) ‚≠ê TARGET"
            elif memory_req["recommended_gpu_memory_gb"] <= 48:
                gpu_class = "RTX 6000 Ada (48GB)"
            else:
                gpu_class = "–¢—Ä–µ–±—É–µ—Ç data center GPU (>48GB)"

            print(f"   üñ•Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–π GPU: {gpu_class}")

            self.results[f"moe_memory_{total_cells}"] = memory_req

        print(f"\n‚úÖ –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏ MoE –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(test_sizes)} —Ä–∞–∑–º–µ—Ä–æ–≤")

    def test_moe_spatial_optimizer_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è MoE Spatial Optimizer"""
        print("\nüèóÔ∏è –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø MoE SPATIAL OPTIMIZER")
        print("=" * 70)

        test_sizes = [
            (27, 27, 27),  # –ú–∞–ª—ã–π (19k –∫–ª–µ—Ç–æ–∫)
            (50, 50, 50),  # –°—Ä–µ–¥–Ω–∏–π (125k –∫–ª–µ—Ç–æ–∫)
            (70, 70, 70),  # –ë–æ–ª—å—à–æ–π (343k –∫–ª–µ—Ç–æ–∫)
        ]

        for dimensions in test_sizes:
            total_cells = dimensions[0] * dimensions[1] * dimensions[2]

            print(
                f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è {dimensions} ({total_cells:,} –∫–ª–µ—Ç–æ–∫):"
            )

            start_time = time.time()

            # –°–æ–∑–¥–∞–µ–º MoE spatial optimizer
            moe_processor = MoEConnectionProcessorMock()
            optimizer = create_moe_spatial_optimizer(
                dimensions, moe_processor, self.device
            )

            creation_time = time.time() - start_time

            print(f"   üïê –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {creation_time:.3f}s")
            print(f"   üìä Chunks: {len(optimizer.chunker.chunks)}")
            print(
                f"   üìã Batch —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {len(optimizer.chunker.get_processing_schedule())} batches"
            )
            print(f"   ‚ö° Worker threads: {optimizer.config.num_worker_threads}")
            print(f"   üíæ Memory pool: {optimizer.config.memory_pool_size_gb:.1f}GB")
            print(f"   üìè Chunk size: {optimizer.config.chunk_size}¬≥")
            print(f"   üîó –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π: {optimizer.connection_distributions}")

            # Cleanup
            optimizer.cleanup()

            self.results[f"moe_creation_{total_cells}"] = {
                "creation_time": creation_time,
                "num_chunks": len(optimizer.chunker.chunks),
                "config": optimizer.config,
            }

        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ MoE Spatial Optimizer –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    def test_moe_neighbor_classification(self):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Å–µ–¥–µ–π –¥–ª—è MoE —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
        print("\nüîç –¢–ï–°–¢ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –°–û–°–ï–î–ï–ô –î–õ–Ø MoE")
        print("=" * 70)

        dimensions = (27, 27, 27)  # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        total_cells = dimensions[0] * dimensions[1] * dimensions[2]

        print(
            f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ —Ä–µ—à–µ—Ç–∫–µ {dimensions} ({total_cells:,} –∫–ª–µ—Ç–æ–∫)"
        )

        # –°–æ–∑–¥–∞–µ–º optimizer
        moe_processor = MoEConnectionProcessorMock()
        moe_processor.to(self.device)
        optimizer = create_moe_spatial_optimizer(dimensions, moe_processor, self.device)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
        test_cells = [0, total_cells // 4, total_cells // 2, total_cells - 1]

        classification_stats = {"local": [], "functional": [], "distant": []}

        for cell_idx in test_cells:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º
            cell_coords = optimizer.pos_helper.to_3d_coordinates(cell_idx)

            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            from new_rebuild.config.project_config import get_project_config

            config = get_project_config()
            adaptive_radius = config.calculate_adaptive_radius()

            all_neighbors = optimizer.find_neighbors_optimized(
                cell_coords, radius=adaptive_radius
            )

            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
            classified = optimizer._classify_neighbors_for_moe(cell_idx, all_neighbors)

            print(f"\n   üìç –ö–ª–µ—Ç–∫–∞ {cell_idx} (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {cell_coords}):")
            print(f"      üîó –í—Å–µ–≥–æ —Å–æ—Å–µ–¥–µ–π: {len(all_neighbors)}")
            print(
                f"      üìç Local: {len(classified['local'])} ({len(classified['local'])/len(all_neighbors)*100:.1f}%)"
            )
            print(
                f"      üîß Functional: {len(classified['functional'])} ({len(classified['functional'])/len(all_neighbors)*100:.1f}%)"
            )
            print(
                f"      üåê Distant: {len(classified['distant'])} ({len(classified['distant'])/len(all_neighbors)*100:.1f}%)"
            )

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if all_neighbors:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å–µ–¥–∏
                classification_stats["local"].append(
                    len(classified["local"]) / len(all_neighbors)
                )
                classification_stats["functional"].append(
                    len(classified["functional"]) / len(all_neighbors)
                )
                classification_stats["distant"].append(
                    len(classified["distant"]) / len(all_neighbors)
                )

        # –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if classification_stats["local"]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            avg_local = np.mean(classification_stats["local"]) * 100
            avg_functional = np.mean(classification_stats["functional"]) * 100
            avg_distant = np.mean(classification_stats["distant"]) * 100

            print(f"\nüìà –°–†–ï–î–ù–Ø–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø:")
            print(f"   üìç Local: {avg_local:.1f}% (—Ü–µ–ª—å: 10%)")
            print(f"   üîß Functional: {avg_functional:.1f}% (—Ü–µ–ª—å: 55%)")
            print(f"   üåê Distant: {avg_distant:.1f}% (—Ü–µ–ª—å: 35%)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª—è–º
            local_ok = abs(avg_local - 10) < 5  # ¬±5% tolerance
            functional_ok = abs(avg_functional - 55) < 10  # ¬±10% tolerance
            distant_ok = abs(avg_distant - 35) < 10

            if local_ok and functional_ok and distant_ok:
                print("   ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–µ–≤—ã–º –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º!")
            else:
                print("   ‚ö†Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π")

        optimizer.cleanup()
        print(f"\n‚úÖ –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Å–µ–¥–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω")

    def test_moe_chunked_processing(self):
        """–¢–µ—Å—Ç chunked processing —Å MoE —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏"""
        print("\n‚ö° –¢–ï–°–¢ CHUNKED MoE PROCESSING")
        print("=" * 70)

        test_cases = [
            (27, 27, 27),  # –ú–∞–ª–∞—è —Ä–µ—à–µ—Ç–∫–∞ (19k –∫–ª–µ—Ç–æ–∫) - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
            # (40, 40, 40),  # –°—Ä–µ–¥–Ω—è—è —Ä–µ—à–µ—Ç–∫–∞ (64k –∫–ª–µ—Ç–æ–∫) - –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        ]

        for dimensions in test_cases:
            total_cells = dimensions[0] * dimensions[1] * dimensions[2]

            print(
                f"\nüß© Chunked MoE processing –¥–ª—è {dimensions} ({total_cells:,} –∫–ª–µ—Ç–æ–∫):"
            )

            # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ä–µ—à–µ—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è spatial optimization —Ç–µ—Å—Ç–æ–≤)
            print(f"   üìä –°–æ–∑–¥–∞–Ω–∏–µ {total_cells:,} —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ {self.device}...")
            states = torch.randn(
                total_cells, 32, device=self.device, dtype=torch.float32
            )  # –ò—Å—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ GPU

            # –°–æ–∑–¥–∞–µ–º MoE processor –∏ optimizer
            print(f"   üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ MoE processor...")
            moe_processor = MoEConnectionProcessorMock()
            moe_processor.to(self.device)  # –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞ GPU

            print(f"   üóÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ MoE spatial optimizer...")
            optimizer = create_moe_spatial_optimizer(
                dimensions, moe_processor, self.device
            )

            print(f"   ‚ö° –ó–∞–ø—É—Å–∫ MoE forward pass –Ω–∞ {self.device}...")
            # –ü—Ä–æ–≥—Ä–µ–≤ CUDA kernel'–æ–≤ (–µ—Å–ª–∏ –Ω–∞ GPU)
            if self.device.type == "cuda":
                torch.cuda.synchronize()

            start_time = time.time()
            output_states = optimizer.optimize_moe_forward(states, moe_processor)

            processing_time = time.time() - start_time

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            throughput = total_cells / processing_time
            memory_used = (
                torch.cuda.memory_allocated() / (1024**2)
                if torch.cuda.is_available()
                else 0
            )

            print(f"   üïê –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f}s")
            print(f"   üìä –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {throughput:,.0f} –∫–ª–µ—Ç–æ–∫/—Å–µ–∫")
            print(f"   üíæ –ü–∞–º—è—Ç—å GPU: {memory_used:.1f} MB")
            print(f"   üìà –§–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–∞: {output_states.shape}")
            print(
                f"   üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {torch.mean(torch.abs(output_states - states)):.6f}"
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            stats = moe_processor.processing_stats
            print(f"   ü§ñ MoE –≤—ã–∑–æ–≤–æ–≤: {stats['calls']}")
            print(f"   üìä –ö–ª–µ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_cells']:,}")
            print(f"   üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:")
            for expert_type, usage in stats["expert_usage"].items():
                print(f"      {expert_type}: {usage:,} —Å–≤—è–∑–µ–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            assert (
                output_states.shape == states.shape
            ), "–§–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            assert not torch.isnan(
                output_states
            ).any(), "NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"
            assert not torch.isinf(
                output_states
            ).any(), "Inf –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"

            # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
            state_change = torch.mean(torch.abs(output_states - states)).item()
            if state_change > 1.0:
                print(
                    f"   ‚ö†Ô∏è –ë–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {state_change:.3f} (–æ–∂–∏–¥–∞–ª–æ—Å—å < 1.0)"
                )
            else:
                print(f"   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –Ω–æ—Ä–º–µ: {state_change:.3f}")

            print(f"   üéØ –¢–µ—Å—Ç MoE chunked processing –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")

            optimizer.cleanup()

            self.results[f"moe_processing_{total_cells}"] = {
                "processing_time": processing_time,
                "throughput": throughput,
                "memory_mb": memory_used,
                "expert_stats": stats,
            }

        print(f"\n‚úÖ Chunked MoE processing –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    def test_performance_comparison(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MoE vs –æ–±—ã—á–Ω—ã–π spatial optimization"""
        print("\nüèÅ –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 70)

        dimensions = (50, 50, 50)  # 125k –∫–ª–µ—Ç–æ–∫
        total_cells = dimensions[0] * dimensions[1] * dimensions[2]

        print(f"üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–µ—à–µ—Ç–∫–µ {dimensions} ({total_cells:,} –∫–ª–µ—Ç–æ–∫)")

        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        states = torch.randn(total_cells, 32, device=self.device)

        # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω—ã–π SpatialOptimizer
        print(f"\nüìä –¢–µ—Å—Ç 1: –û–±—ã—á–Ω—ã–π SpatialOptimizer")
        from new_rebuild.core.lattice.spatial_optimization import (
            create_spatial_optimizer,
        )

        regular_optimizer = create_spatial_optimizer(dimensions)

        def simple_neighbor_processor(chunk_states, neighbors):
            """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å–µ–¥–µ–π"""
            return chunk_states + torch.randn_like(chunk_states) * 0.01

        start_time = time.time()
        regular_output = regular_optimizer.optimize_lattice_forward(
            states, simple_neighbor_processor
        )
        regular_time = time.time() - start_time
        regular_throughput = total_cells / regular_time

        print(f"   üïê –í—Ä–µ–º—è: {regular_time:.3f}s")
        print(f"   üìä –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {regular_throughput:,.0f} –∫–ª–µ—Ç–æ–∫/—Å–µ–∫")

        # –¢–µ—Å—Ç 2: MoE SpatialOptimizer
        print(f"\nü§ñ –¢–µ—Å—Ç 2: MoE SpatialOptimizer")

        moe_processor = MoEConnectionProcessorMock()
        moe_optimizer = create_moe_spatial_optimizer(dimensions, moe_processor)

        start_time = time.time()
        moe_output = moe_optimizer.optimize_moe_forward(states, moe_processor)
        moe_time = time.time() - start_time
        moe_throughput = total_cells / moe_time

        print(f"   üïê –í—Ä–µ–º—è: {moe_time:.3f}s")
        print(f"   üìä –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {moe_throughput:,.0f} –∫–ª–µ—Ç–æ–∫/—Å–µ–∫")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        speedup = regular_time / moe_time if moe_time > 0 else float("inf")
        print(f"\n‚ö° –°–†–ê–í–ù–ï–ù–ò–ï:")
        print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ MoE: {speedup:.2f}x")
        if speedup > 1:
            print(f"   ‚úÖ MoE –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ {(speedup-1)*100:.1f}%")
        else:
            print(f"   ‚ö†Ô∏è MoE –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ {(1-speedup)*100:.1f}%")

        # Cleanup
        regular_optimizer.cleanup()
        moe_optimizer.cleanup()

        self.results["performance_comparison"] = {
            "regular_time": regular_time,
            "moe_time": moe_time,
            "speedup": speedup,
            "regular_throughput": regular_throughput,
            "moe_throughput": moe_throughput,
        }

        print(f"\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    def generate_performance_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n" + "=" * 80)
        print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ MoE + SPATIAL OPTIMIZATION")
        print("=" * 80)

        if "moe_processing_19683" in self.results:
            result = self.results["moe_processing_19683"]
            print(f"üéØ MoE –ê–†–•–ò–¢–ï–ö–¢–£–†–ê (27√ó27√ó27 = 19,683 –∫–ª–µ—Ç–æ–∫):")
            print(f"   ‚ö° –í—Ä–µ–º—è forward pass: {result['processing_time']:.3f}s")
            print(
                f"   üìä –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {result['throughput']:,.0f} –∫–ª–µ—Ç–æ–∫/—Å–µ–∫"
            )
            print(f"   üíæ –ü–∞–º—è—Ç—å GPU: {result['memory_mb']:.1f} MB")

        if "performance_comparison" in self.results:
            comp = self.results["performance_comparison"]
            print(f"\nüèÅ –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
            print(f"   üìà MoE —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {comp['speedup']:.2f}x")
            print(
                f"   ‚ö° MoE –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {comp['moe_throughput']:,.0f} –∫–ª–µ—Ç–æ–∫/—Å–µ–∫"
            )

        # –û—Ü–µ–Ω–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫
        if "moe_memory_1000000" in self.results:
            mem = self.results["moe_memory_1000000"]
            print(f"\nüéØ –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –î–û 1M –ö–õ–ï–¢–û–ö:")
            print(f"   üíæ –¢—Ä–µ–±—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {mem['total_memory_gb']:.2f} GB")
            print(f"   üñ•Ô∏è GPU —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {mem['recommended_gpu_memory_gb']:.1f} GB")

            # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if "moe_processing_64000" in self.results:
                base_result = self.results["moe_processing_64000"]
                base_throughput = base_result["throughput"]
                estimated_time = 1_000_000 / base_throughput
                print(f"   ‚è±Ô∏è –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è 1M –∫–ª–µ—Ç–æ–∫: {estimated_time:.3f}s")

                if estimated_time < 0.5:
                    print(f"   ‚úÖ –¶–µ–ª—å < 500ms: –î–û–°–¢–ò–ñ–ò–ú–ê!")
                else:
                    print(f"   ‚ö†Ô∏è –¶–µ–ª—å < 500ms: —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

        print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print(f"   1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º MoE Connection Processor")
        print(f"   2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ RTX 5090 (32GB)")
        print(f"   3. Mixed precision optimization")
        print(f"   4. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
        print(f"   5. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 666√ó666√ó333")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéâ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø MoE + SPATIAL OPTIMIZATION INTEGRATION")
    print("=" * 80)

    test_runner = MoESpatialOptimizationTest()

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_runner.test_moe_memory_estimation()
        test_runner.test_moe_spatial_optimizer_creation()
        test_runner.test_moe_neighbor_classification()
        test_runner.test_moe_chunked_processing()
        test_runner.test_performance_comparison()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        test_runner.generate_performance_report()

        print("\n" + "=" * 80)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ MoE + SPATIAL OPTIMIZATION –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
        print("=" * 80)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


if __name__ == "__main__":
    main()
