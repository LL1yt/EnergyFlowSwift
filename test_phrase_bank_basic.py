#!/usr/bin/env python3
"""
üß™ BASIC TEST: Phase 2.7.1 - PhraseBankDecoder Infrastructure

–¢–µ—Å—Ç –¥–ª—è Checkpoint 1.1:
- [ ] Phrase bank –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è
- [ ] Similarity search —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ  
- [ ] Performance: <10ms –Ω–∞ –ø–æ–∏—Å–∫ —Ñ—Ä–∞–∑—ã

Phase 2.7.1 - –≠–¢–ê–ü 1.1 Test
"""

import sys
import torch
import time
import logging
from pathlib import Path

def test_phrase_bank_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è phrase bank"""
    print("üè¶ Testing phrase bank loading and indexing...")
    
    try:
        from inference.lightweight_decoder.phrase_bank import PhraseBank, PhraseLoader, PhraseEntry
        from data.embedding_loader import EmbeddingLoader
        
        # –°–æ–∑–¥–∞–Ω–∏–µ embedding loader –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        embedding_loader = EmbeddingLoader(
            model_name="distilbert-base-uncased",  # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
            device="cpu"  # CPU –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ phrase bank
        phrase_bank = PhraseBank(
            embedding_dim=768,
            similarity_threshold=0.8,
            index_type="linear"  # Linear search –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ sample phrases
        print("   üìù Creating sample phrases...")
        sample_phrases = PhraseLoader.create_sample_phrases(embedding_loader)
        
        if len(sample_phrases) == 0:
            print("   ‚ùå No sample phrases created")
            return False
        
        print(f"   ‚úÖ Created {len(sample_phrases)} sample phrases")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ phrase bank
        print("   üî® Building phrase index...")
        phrase_bank.add_phrases(sample_phrases)
        
        print(f"   ‚úÖ Phrase bank indexed with {len(phrase_bank.index.phrases)} phrases")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Phrase bank loading failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_similarity_search():
    """–¢–µ—Å—Ç similarity search —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüîç Testing similarity search...")
    
    try:
        from inference.lightweight_decoder.phrase_bank import PhraseBank, PhraseLoader
        from data.embedding_loader import EmbeddingLoader
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        embedding_loader = EmbeddingLoader(
            model_name="distilbert-base-uncased",
            device="cpu"
        )
        
        phrase_bank = PhraseBank(embedding_dim=768, index_type="linear")
        sample_phrases = PhraseLoader.create_sample_phrases(embedding_loader)
        phrase_bank.add_phrases(sample_phrases)
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ñ—Ä–∞–∑–æ–π
        print("   üéØ Testing search with known phrase...")
        test_text = "Hello, how are you?"
        test_embedding = embedding_loader.encode_text(test_text)
        
        # –ü–æ–∏—Å–∫
        results = phrase_bank.search_phrases(test_embedding, k=5)
        
        if len(results) == 0:
            print("   ‚ùå No search results returned")
            return False
        
        print(f"   ‚úÖ Found {len(results)} similar phrases")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        top_phrase, top_similarity = results[0]
        print(f"   üìä Top result: '{top_phrase.text}' (similarity: {top_similarity:.3f})")
        
        if top_similarity < 0.5:
            print("   ‚ö†Ô∏è  Low similarity for exact match")
        
        # –¢–µ—Å—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º —ç–º–±–µ–¥–∏–Ω–≥–æ–º
        print("   üé≤ Testing search with random embedding...")
        random_embedding = torch.randn(768)
        random_results = phrase_bank.search_phrases(random_embedding, k=3)
        
        print(f"   ‚úÖ Random search returned {len(random_results)} results")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Similarity search failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: <10ms –Ω–∞ –ø–æ–∏—Å–∫ —Ñ—Ä–∞–∑—ã"""
    print("\n‚ö° Testing search performance...")
    
    try:
        from inference.lightweight_decoder.phrase_bank import PhraseBank, PhraseLoader
        from data.embedding_loader import EmbeddingLoader
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        embedding_loader = EmbeddingLoader(
            model_name="distilbert-base-uncased",
            device="cpu"
        )
        
        phrase_bank = PhraseBank(embedding_dim=768, index_type="linear")
        sample_phrases = PhraseLoader.create_sample_phrases(embedding_loader)
        phrase_bank.add_phrases(sample_phrases)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
        test_embeddings = []
        for i in range(10):
            test_text = f"Test phrase number {i}"
            embedding = embedding_loader.encode_text(test_text)
            test_embeddings.append(embedding)
        
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("   ‚è±Ô∏è  Measuring search performance...")
        
        total_time = 0
        num_searches = len(test_embeddings)
        
        for embedding in test_embeddings:
            start_time = time.time()
            results = phrase_bank.search_phrases(embedding, k=5)
            end_time = time.time()
            
            search_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            total_time += search_time
        
        avg_time = total_time / num_searches
        print(f"   üìä Average search time: {avg_time:.2f}ms")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è <10ms
        if avg_time < 10.0:
            print("   ‚úÖ Performance target met (<10ms)")
            performance_ok = True
        else:
            print(f"   ‚ö†Ô∏è  Performance target missed (target: <10ms, actual: {avg_time:.2f}ms)")
            performance_ok = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ phrase bank
        stats = phrase_bank.get_statistics()
        print(f"   üìà Cache hit rate: {stats['cache_hit_rate']}")
        print(f"   üîç Total searches: {stats['total_searches']}")
        
        return performance_ok
        
    except Exception as e:
        print(f"   ‚ùå Performance test failed: {e}")
        return False

def test_phrase_bank_decoder():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ PhraseBankDecoder"""
    print("\nüî§ Testing PhraseBankDecoder...")
    
    try:
        from inference.lightweight_decoder.phrase_bank_decoder import PhraseBankDecoder
        from data.embedding_loader import EmbeddingLoader
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–∫–æ–¥–µ—Ä–∞
        decoder = PhraseBankDecoder(
            embedding_dim=768,
            similarity_threshold=0.7,  # –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ phrase bank
        embedding_loader = EmbeddingLoader(
            model_name="distilbert-base-uncased",
            device="cpu"
        )
        
        print("   üìö Loading phrase bank...")
        decoder.load_phrase_bank(embedding_loader=embedding_loader)
        
        # –¢–µ—Å—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("   üî§ Testing basic decoding...")
        test_text = "Thank you very much."
        test_embedding = embedding_loader.encode_text(test_text)
        
        decoded_text = decoder.decode(test_embedding)
        print(f"   üìù Decoded: '{decoded_text}'")
        
        # –¢–µ—Å—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        print("   üìä Testing decoding with metrics...")
        decoded_text, metrics = decoder.decode_with_metrics(test_embedding)
        print(f"   üìà Quality metrics:")
        print(f"      - Confidence: {metrics['confidence']:.3f}")
        print(f"      - Quality Score: {metrics['quality_score']:.3f}")
        print(f"      - Candidates: {metrics['num_candidates']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–∫–æ–¥–µ—Ä–∞
        decoder_stats = decoder.get_statistics()
        print(f"   üìä Decoder stats:")
        print(f"      - Success rate: {decoder_stats['success_rate']}")
        print(f"      - Avg confidence: {decoder_stats['avg_confidence']:.3f}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå PhraseBankDecoder test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_integration_with_modules():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Modules 1 & 2"""
    print("\nüîó Testing integration with existing modules...")
    
    try:
        from data.embedding_loader import EmbeddingLoader
        from core.embedding_processor import EmbeddingProcessor
        from inference.lightweight_decoder.phrase_bank_decoder import PhraseBankDecoder
        
        # Module 1: Teacher LLM Encoder
        print("   üî¥ Setting up Module 1 (Teacher LLM Encoder)...")
        encoder = EmbeddingLoader(
            model_name="distilbert-base-uncased",
            device="cpu"
        )
        
        # Module 2: 3D Cubic Core 
        print("   üîµ Setting up Module 2 (EmbeddingProcessor)...")
        processor = EmbeddingProcessor(
            lattice_size=(4, 4, 4),  # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
            propagation_steps=5
        )
        
        # Module 3: Lightweight Decoder
        print("   üü° Setting up Module 3 (PhraseBankDecoder)...")
        decoder = PhraseBankDecoder(embedding_dim=768)
        decoder.load_phrase_bank(embedding_loader=encoder)
        
        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ pipeline
        print("   üåä Testing end-to-end pipeline...")
        
        test_text = "Hello, how are you today?"
        
        # –¢–µ–∫—Å—Ç ‚Üí –≠–º–±–µ–¥–∏–Ω–≥ (Module 1)
        embedding = encoder.encode_text(test_text)
        print(f"   ‚úÖ Module 1 output: {embedding.shape}")
        
        # –≠–º–±–µ–¥–∏–Ω–≥ ‚Üí –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —ç–º–±–µ–¥–∏–Ω–≥ (Module 2)
        processed_embedding = processor.process(embedding)
        print(f"   ‚úÖ Module 2 output: {processed_embedding.shape}")
        
        # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —ç–º–±–µ–¥–∏–Ω–≥ ‚Üí –¢–µ–∫—Å—Ç (Module 3)
        output_text = decoder.decode(processed_embedding)
        print(f"   ‚úÖ Module 3 output: '{output_text}'")
        
        print(f"\n   üéØ Full pipeline result:")
        print(f"      Input:  '{test_text}'")
        print(f"      Output: '{output_text}'")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Integration test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ PHASE 2.7.1 - PhraseBankDecoder Infrastructure Test")
    print("=" * 70)
    print("Checkpoint 1.1 Verification")
    print()
    
    # –¢–µ—Å—Ç—ã –¥–ª—è Checkpoint 1.1
    tests = [
        ("Phrase Bank Loading", test_phrase_bank_loading),
        ("Similarity Search", test_similarity_search),
        ("Performance (<10ms)", test_performance),
        ("PhraseBankDecoder", test_phrase_bank_decoder),
        ("Module Integration", test_integration_with_modules)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name} failed with exception: {e}")
            results.append((test_name, False))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 70)
    print("üìä CHECKPOINT 1.1 RESULTS")
    print("=" * 70)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    print(f"\nüéØ Checkpoint 1.1: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
    
    # Checkpoint 1.1 –∫—Ä–∏—Ç–µ—Ä–∏–∏
    checkpoint_criteria = [
        "Phrase bank –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è",
        "Similarity search —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", 
        "Performance: <10ms –Ω–∞ –ø–æ–∏—Å–∫ —Ñ—Ä–∞–∑—ã"
    ]
    
    if passed == total:
        print("\nüéâ CHECKPOINT 1.1 COMPLETE!")
        print("\n‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
        for criterion in checkpoint_criteria:
            print(f"   ‚úÖ {criterion}")
        
        print("\nüìù Ready for Phase 2.7.1 - –≠—Ç–∞–ø 1.2:")
        print("   - PhraseBankDecoder implementation")
        print("   - Context-aware phrase selection")
        print("   - Post-processing –¥–ª—è coherent text assembly")
        
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} tests failed")
        print("Address issues before proceeding to –≠—Ç–∞–ø 1.2")
        return False

if __name__ == "__main__":
    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("config").exists() or not Path("core").exists():
        print("‚ùå Please run this test from the project root directory")
        sys.exit(1)
    
    success = main()
    sys.exit(0 if success else 1) 