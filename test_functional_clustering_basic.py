"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ - –®–∞–≥ 3.3

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
2. –ë–∞–∑–æ–≤—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
3. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–µ—Å–æ–≤ —Å–≤—è–∑–µ–π
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å—é
5. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: 16√ó16√ó16 —Ä–µ—à–µ—Ç–∫–∞, MinimalNCACell + GatedMLPCell
"""

import torch
import torch.nn as nn
import sys
import os
import time
import numpy as np
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(str(Path(__file__).parent))

from core.lattice_3d import create_lattice_from_config
from core.lattice_3d.config import load_lattice_config
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def test_clustering_initialization():
    """–¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_lattice_config("config/functional_clustering_test.yaml")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    assert (
        config.enable_clustering == True
    ), "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ –≤ config"
    assert config.clustering_config is not None, "clustering_config –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    assert config.clustering_config["priority"] == 0.3, "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.3"

    print(f"  ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.dimensions} —Ä–µ—à–µ—Ç–∫–∞")
    print(f"  ‚úì –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {config.enable_clustering}")
    print(f"  ‚úì –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {config.clustering_config['priority']}")

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ config –æ–±—ä–µ–∫—Ç–∞ (–∫–∞–∫ –≤ BCM —Ç–µ—Å—Ç–µ)
    from core.lattice_3d.lattice import Lattice3D

    lattice = Lattice3D(config)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    assert hasattr(
        lattice, "functional_clustering"
    ), "BasicFunctionalClustering –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    assert hasattr(
        lattice, "coordination_interface"
    ), "CoordinationInterface –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    assert hasattr(lattice, "enable_clustering"), "enable_clustering –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    assert lattice.enable_clustering == True, "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞"
    assert lattice.clustering_priority == 0.3, "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.3"
    assert (
        lattice.integration_mode == "additive"
    ), "–†–µ–∂–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å additive"

    print(f"  ‚úì –†–µ—à–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {config.total_cells} –∫–ª–µ—Ç–æ–∫")
    print(f"  ‚úì –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"  ‚úì –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤")
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    return lattice


def test_basic_clustering(lattice):
    """–¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    num_cells = lattice.states.size(0)
    state_size = lattice.states.size(1)

    # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –ì—Ä—É–ø–ø–∞ –∫–ª–µ—Ç–æ–∫ —Å –ø–æ—Ö–æ–∂–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞)
    pattern1 = torch.tensor([1.0, 0.5, 0.2, 0.8, 0.3, 0.1])
    # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ì—Ä—É–ø–ø–∞ –∫–ª–µ—Ç–æ–∫ —Å –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞)
    pattern2 = torch.tensor([0.1, 0.9, 0.7, 0.2, 0.6, 0.4])

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    if pattern1.size(0) != state_size:
        pattern1 = (
            pattern1[:state_size]
            if pattern1.size(0) > state_size
            else torch.cat([pattern1, torch.zeros(state_size - pattern1.size(0))])
        )
    if pattern2.size(0) != state_size:
        pattern2 = (
            pattern2[:state_size]
            if pattern2.size(0) > state_size
            else torch.cat([pattern2, torch.zeros(state_size - pattern2.size(0))])
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    half = num_cells // 2
    lattice.states[:half] = pattern1.unsqueeze(0).expand(half, -1)
    lattice.states[half:] = pattern2.unsqueeze(0).expand(num_cells - half, -1)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º
    noise = torch.randn_like(lattice.states) * 0.1
    lattice.states = lattice.states + noise

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
    start_time = time.time()
    clustering_result = lattice.apply_functional_clustering(current_step=0)
    clustering_time = time.time() - start_time

    print(f"‚è±Ô∏è –í—Ä–µ–º—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {clustering_time:.3f}s")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert clustering_result["applied"] == True, "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞"
    assert clustering_result["weights_modified"] == True, "–í–µ—Å–∞ –Ω–µ –±—ã–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö
    clustering_info = clustering_result["clustering_info"]
    assert "clusters" in clustering_info, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    assert clustering_info["updated"] == True, "–ö–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"

    clusters = clustering_info["clusters"]
    num_clusters = len(clusters)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {num_clusters}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –∫–ª–∞—Å—Ç–µ—Ä—ã
    assert (
        num_clusters >= 2
    ), f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–ª–∞—Å—Ç–µ—Ä–∞, –Ω–∞–π–¥–µ–Ω–æ {num_clusters}"
    assert (
        num_clusters <= 8
    ), f"–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 8 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {num_clusters}"

    # –ü–µ—á–∞—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    cluster_sizes = [len(members) for members in clusters.values()]
    print(f"üìè –†–∞–∑–º–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {cluster_sizes}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞
    min_size = min(cluster_sizes)
    assert (
        min_size >= 8
    ), f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 8, –Ω–∞–π–¥–µ–Ω {min_size}"

    print("‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return clusters


def test_weight_modification(lattice, clusters):
    """–¢–µ—Å—Ç 3: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ—Å–æ–≤ —Å–≤—è–∑–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ—Å–æ–≤ —Å–≤—è–∑–µ–π")

    start_time = time.time()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–µ—Å–∞
    original_weights = lattice.connection_weights.clone()

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
    cell_to_cluster = {}
    for cluster_id, members in clusters.items():
        for cell_idx in members:
            cell_to_cluster[cell_idx] = cluster_id

    print(f"  üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {time.time() - start_time:.3f}s")

    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å–æ—Å–µ–¥–µ–π –æ–¥–∏–Ω —Ä–∞–∑
    neighbor_indices_time = time.time()
    neighbor_indices = lattice.topology.get_all_neighbor_indices_batched()
    print(
        f"  üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ—Å–µ–¥–µ–π: {time.time() - neighbor_indices_time:.3f}s"
    )

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤
    analysis_time = time.time()
    intra_cluster_weights = []
    inter_cluster_weights = []

    for cell_idx in range(lattice.connection_weights.size(0)):
        if cell_idx not in cell_to_cluster:
            continue

        cell_cluster = cell_to_cluster[cell_idx]

        for neighbor_idx in range(lattice.connection_weights.size(1)):
            neighbor_cell = neighbor_indices[cell_idx, neighbor_idx].item()

            if neighbor_cell == -1 or neighbor_cell not in cell_to_cluster:
                continue

            neighbor_cluster = cell_to_cluster[neighbor_cell]
            current_weight = lattice.connection_weights[cell_idx, neighbor_idx].item()

            if cell_cluster == neighbor_cluster:
                # –í–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω–∞—è —Å–≤—è–∑—å
                intra_cluster_weights.append(current_weight)
            else:
                # –ú–µ–∂–∫–ª–∞—Å—Ç–µ—Ä–Ω–∞—è —Å–≤—è–∑—å
                inter_cluster_weights.append(current_weight)

    print(f"  üìä –ê–Ω–∞–ª–∏–∑ –≤–µ—Å–æ–≤: {time.time() - analysis_time:.3f}s")

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if intra_cluster_weights and inter_cluster_weights:
        avg_intra = np.mean(intra_cluster_weights)
        avg_inter = np.mean(inter_cluster_weights)

        print(f"üìà –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –≤–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω—ã—Ö —Å–≤—è–∑–µ–π: {avg_intra:.3f}")
        print(f"üìâ –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –º–µ–∂–∫–ª–∞—Å—Ç–µ—Ä–Ω—ã—Ö —Å–≤—è–∑–µ–π: {avg_inter:.3f}")
        print(f"üîÑ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ (intra/inter): {avg_intra/avg_inter:.2f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–µ —Å–≤—è–∑–∏ —Å–∏–ª—å–Ω–µ–µ
        assert (
            avg_intra > avg_inter
        ), "–í–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–µ —Å–≤—è–∑–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∏–ª—å–Ω–µ–µ –º–µ–∂–∫–ª–∞—Å—Ç–µ—Ä–Ω—ã—Ö"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
        assert (
            0.8 <= avg_intra <= 3.0
        ), f"–í–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–µ –≤–µ—Å–∞ –≤–Ω–µ –ø—Ä–µ–¥–µ–ª–æ–≤: {avg_intra}"
        assert 0.1 <= avg_inter <= 2.0, f"–ú–µ–∂–∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–µ –≤–µ—Å–∞ –≤–Ω–µ –ø—Ä–µ–¥–µ–ª–æ–≤: {avg_inter}"
    else:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤—è–∑–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Å–æ–≤")
        print(f"  üìä –ù–∞–π–¥–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω—ã—Ö —Å–≤—è–∑–µ–π: {len(intra_cluster_weights)}")
        print(f"  üìä –ù–∞–π–¥–µ–Ω–æ –º–µ–∂–∫–ª–∞—Å—Ç–µ—Ä–Ω—ã—Ö —Å–≤—è–∑–µ–π: {len(inter_cluster_weights)}")

    total_time = time.time() - start_time
    print(f"  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ 3: {total_time:.3f}s")
    print("‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_plasticity_integration(lattice):
    """–¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å—é"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å—é")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å PlasticityMixin
    assert hasattr(lattice, "apply_combined_plasticity"), "PlasticityMixin –Ω–µ –Ω–∞–π–¥–µ–Ω"
    assert hasattr(lattice, "apply_functional_clustering"), "ClusteringMixin –Ω–µ –Ω–∞–π–¥–µ–Ω"

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å
    initial_weights = lattice.connection_weights.clone()

    # –ù–µ–±–æ–ª—å—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    lattice.states = torch.randn_like(lattice.states) * 0.1

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è STDP
    lattice._track_activity_for_stdp(lattice.states)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
    plasticity_result = lattice.apply_combined_plasticity()
    clustering_result = lattice.apply_functional_clustering(current_step=1)

    print(f"üß† –ü–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {plasticity_result.get('applied', False)}")
    print(f"üîó –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {clustering_result.get('applied', False)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    final_weights = lattice.connection_weights
    weight_change = torch.mean(torch.abs(final_weights - initial_weights))
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤: {weight_change:.6f}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ä–µ–∂–∏–º–æ–≤
    assert (
        lattice.integration_mode == "additive"
    ), "–†–µ–∂–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å additive"
    assert (
        0.0 <= lattice.clustering_priority <= 1.0
    ), "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ –ø—Ä–µ–¥–µ–ª–æ–≤"

    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_coordination_interface_readiness(lattice):
    """–¢–µ—Å—Ç 5: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 5: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    assert hasattr(
        lattice, "coordination_interface"
    ), "CoordinationInterface –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    coordination = lattice.coordination_interface

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    lattice.add_user_clustering_hint("test_hint", {"value": 1.0})
    lattice.add_user_clustering_correction({0: [1, 2, 3]}, {0: [1, 2], 1: [3]})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = lattice.get_clustering_statistics()
    assert stats["clustering_initialized"] == True, "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"

    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:")
    print(f"  - –í–∫–ª—é—á–µ–Ω–∞: {stats['enable_clustering']}")
    print(f"  - –°—á–µ—Ç—á–∏–∫ —à–∞–≥–æ–≤: {stats['clustering_step_counter']}")
    print(f"  - –†–µ–∂–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {stats['coordination']['coordination_mode']}")
    print(
        f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {stats['coordination']['user_hints_count']}"
    )

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    lattice.configure_clustering(
        enable=True, priority=0.4, integration_mode="multiplicative"
    )

    assert lattice.clustering_priority == 0.4, "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è"
    assert lattice.integration_mode == "multiplicative", "–†–µ–∂–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è"

    print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é")


def test_performance_and_stability(lattice):
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"""
    print("\nüß™ –¢–µ—Å—Ç 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    num_steps = 10
    total_time = 0

    for step in range(num_steps):
        # –ù–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        lattice.states += torch.randn_like(lattice.states) * 0.01

        start_time = time.time()
        result = lattice.apply_functional_clustering(current_step=step)
        step_time = time.time() - start_time
        total_time += step_time

        if step % 5 == 0:
            print(
                f"  –®–∞–≥ {step}: {step_time:.3f}s, –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {result.get('clustering_info', {}).get('num_clusters', 0)}"
            )

    avg_time = total_time / num_steps
    print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞ —à–∞–≥: {avg_time:.3f}s")
    print(f"üìä –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}s")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
    assert avg_time < 1.0, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ: {avg_time:.3f}s > 1.0s"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    stats = lattice.get_clustering_statistics()
    stability = stats["basic_clustering"].get("cluster_stability_score", 0.0)
    print(f"üîí –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {stability:.3f}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π
    if stats["clustering_step_counter"] > 1:
        assert stability >= 0.0, "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π"

    print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ô –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–ò")
    print("=" * 60)

    try:
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        lattice = test_clustering_initialization()

        # –¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        clusters = test_basic_clustering(lattice)

        # –¢–µ—Å—Ç 3: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ—Å–æ–≤
        test_weight_modification(lattice, clusters)

        # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å—é
        test_plasticity_integration(lattice)

        # –¢–µ—Å—Ç 5: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        test_coordination_interface_readiness(lattice)

        # –¢–µ—Å—Ç 6: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        test_performance_and_stability(lattice)

        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
        print("üîó –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_stats = lattice.get_clustering_statistics()
        print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  - –ö–ª–∞—Å—Ç–µ—Ä–æ–≤: {len(lattice.get_current_clusters())}")
        print(f"  - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {final_stats['clustering_step_counter']}")
        print(
            f"  - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {final_stats['coordination']['coordination_mode']}"
        )

    except Exception as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô: {e}")
        import traceback

        traceback.print_exc()
        return False

    return True


if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéØ –®–ê–ì 3.3 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑–≤–∏—Ç–∏—è")
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        sys.exit(1)
