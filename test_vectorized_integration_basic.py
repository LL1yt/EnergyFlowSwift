#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
=================================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ.
"""

import sys
import traceback


def test_cell_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–µ—Ç–æ–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–µ—Ç–æ–∫...")

    try:
        # –î–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å - –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±
        from new_rebuild.core.cells import create_cell, VectorizedGNNCell

        print("‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        try:
            from new_rebuild.core.cells import GNNCell

            print("‚ùå –°—Ç–∞—Ä—ã–π GNNCell –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞!")
            return False
        except ImportError:
            print("‚úÖ –°—Ç–∞—Ä—ã–π GNNCell –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False

    return True


def test_cell_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–µ—Ç–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–µ—Ç–æ–∫...")

    try:
        from new_rebuild.core.cells import create_cell

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏
        cell = create_cell()
        print(f"‚úÖ –ö–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {type(cell).__name__}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        if "Vectorized" in type(cell).__name__:
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        else:
            print(f"‚ùå –°–æ–∑–¥–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {type(cell).__name__}")
            return False

        # –¢–µ—Å—Ç legacy –≤–µ—Ä—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å
        try:
            legacy_cell = create_cell(cell_type="gnn")
            print("‚ùå Legacy –≤–µ—Ä—Å–∏—è –≤—Å–µ –µ—â–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è!")
            return False
        except (DeprecationWarning, Exception):
            print("‚úÖ Legacy –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–µ—Ç–∫–∏: {e}")
        traceback.print_exc()
        return False

    return True


def test_spatial_processor_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...")

    try:
        from new_rebuild.core.lattice import (
            create_spatial_processor,
            VectorizedSpatialProcessor,
        )

        print("‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor = create_spatial_processor(dimensions=(5, 5, 5))
        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω: {type(processor).__name__}")

    except ImportError as e:
        print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        print("‚ÑπÔ∏è  –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

    return True


def test_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")

    try:
        from new_rebuild.config import get_project_config

        config = get_project_config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if hasattr(config, "vectorized"):
            print(f"‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: enabled={config.vectorized.enabled}")
            print(f"   Force vectorized: {config.vectorized.force_vectorized}")
            print(f"   Optimal batch size: {config.calculate_optimal_batch_size()}")
        else:
            print("‚ùå –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–ª–µ—Ç–∫–∏
        cell_type = config.get_cell_type()
        print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∏–ø –∫–ª–µ—Ç–∫–∏: {cell_type}")

        if cell_type != "vectorized_gnn":
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∫–ª–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {cell_type}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í–ï–ö–¢–û–†–ò–ó–û–í–ê–ù–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("=" * 60)

    tests = [
        test_cell_imports,
        test_cell_creation,
        test_spatial_processor_imports,
        test_config_integration,
    ]

    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            traceback.print_exc()
            results.append(False)

    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")

    passed = sum(results)
    total = len(results)

    for i, (test, result) in enumerate(zip(tests, results)):
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"   {i+1}. {test.__name__}: {status}")

    print(f"\nüìà –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
