#!/usr/bin/env python3
"""Multiple forward pass test - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""

import torch
import time
import gc

# –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –î–û –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from new_rebuild.config import (
    set_project_config, 
    create_debug_config
)

# –°–æ–∑–¥–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≥–ª–æ–±–∞–ª—å–Ω–æ –î–û –∏–º–ø–æ—Ä—Ç–∞ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
config = create_debug_config()
set_project_config(config)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from new_rebuild.core.training import EmbeddingTrainer
from new_rebuild.utils.logging import get_logger

logger = get_logger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    logger.info("üöÄ Multiple forward pass test...")
    
    # –ö–æ–Ω—Ñ–∏–≥ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –≤—ã—à–µ
    # –°–æ–∑–¥–∞–µ–º trainer - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    trainer = EmbeddingTrainer(config)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
    num_passes = config.validation.num_forward_passes
    batch_size = config.training.batch_size
    embedding_dim = config.embeddings.teacher_dim  # 768 –¥–ª—è distilbert
    
    logger.info(f"üìä Running {num_passes} forward passes...")
    logger.info(f"üìä Batch size: {batch_size}, Embedding dim: {embedding_dim}")
    logger.info(f"üéØ Config mode: {config.mode.mode.name}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_time = 0
    all_losses = []
    
    for i in range(num_passes):
        logger.info(f"\nüîÑ Forward pass #{i+1}:")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞
        test_embeddings = torch.randn(batch_size, embedding_dim).to(trainer.device)
        
        # –í—Ä–µ–º—è forward pass
        start_time = time.time()
    
        try:
            # –ù–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º _forward_pass
            losses = trainer._forward_pass(
                input_embeddings=test_embeddings,
                target_embeddings=test_embeddings,
                texts=None
            )
            
            elapsed = time.time() - start_time
            total_time += elapsed
            
            logger.info(f"  ‚úÖ Completed in {elapsed:.2f} seconds")
            logger.info(f"  üìà Total loss: {losses['total'].item():.6f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ç–µ—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            loss_dict = {k: v.item() for k, v in losses.items()}
            all_losses.append(loss_dict)
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –º–µ–∂–¥—É –ø—Ä–æ—Ö–æ–¥–∞–º–∏
            del test_embeddings
            if torch.cuda.is_available():
                torch.cuda.empty_cache()
            gc.collect()
            
        except Exception as e:
            logger.error(f"  ‚ùå Error: {e}")
            import traceback
            traceback.print_exc()
            break
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info(f"\nüìä Summary:")
    logger.info(f"  Total time: {total_time:.2f} seconds")
    
    if all_losses:
        logger.info(f"  Average time per pass: {total_time/len(all_losses):.2f} seconds")
        logger.info(f"  Successful passes: {len(all_losses)}/{num_passes}")
        
        logger.info(f"\nüìà Loss evolution:")
        for i, losses in enumerate(all_losses):
            logger.info(f"  Pass {i+1}: total={losses['total']:.6f}, reconstruction={losses['reconstruction']:.6f}")
            
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        total_losses = [l['total'] for l in all_losses]
        if len(total_losses) > 1:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            max_loss = max(total_losses)
            min_loss = min(total_losses)
            loss_variation = (max_loss - min_loss) / min_loss if min_loss > 0 else 0
            
            logger.info(f"\nüîç Stability analysis:")
            logger.info(f"  Min total loss: {min_loss:.6f}")
            logger.info(f"  Max total loss: {max_loss:.6f}")
            logger.info(f"  Loss variation: {loss_variation:.2%}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä–æ–≥ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
            stability_threshold = config.validation.stability_threshold
            if loss_variation < stability_threshold:
                logger.info(f"  ‚úÖ System is stable (variation < {stability_threshold:.0%})")
            else:
                logger.warning(f"  ‚ö†Ô∏è System shows instability (variation >= {stability_threshold:.0%})")
    
    logger.info("\n‚úÖ Test completed!")


if __name__ == "__main__":
    main()