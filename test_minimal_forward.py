#!/usr/bin/env python3
"""Multiple forward pass test - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""

import torch
import time
import gc
from new_rebuild.core.training import EmbeddingTrainer
from new_rebuild.config import SimpleProjectConfig
from new_rebuild.utils.logging import get_logger

logger = get_logger(__name__)
logger.info("üöÄ Multiple forward pass test...")

# –°–æ–∑–¥–∞–µ–º trainer
config = SimpleProjectConfig()
trainer = EmbeddingTrainer(config)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
num_passes = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ forward pass'–æ–≤
batch_size = 1  # –¢–æ–ª—å–∫–æ 1 —Å—ç–º–ø–ª
embedding_dim = 768

logger.info(f"üìä Running {num_passes} forward passes...")
logger.info(f"üìä Batch size: {batch_size}, Embedding dim: {embedding_dim}")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total_time = 0
all_losses = []

for i in range(num_passes):
    logger.info(f"\nüîÑ Forward pass #{i+1}:")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞
    test_embeddings = torch.randn(batch_size, embedding_dim).to(trainer.device)
    
    # –í—Ä–µ–º—è forward pass
    start_time = time.time()

    try:
        # –ù–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º _forward_pass
        losses = trainer._forward_pass(
            input_embeddings=test_embeddings,
            target_embeddings=test_embeddings,
            texts=None
        )
        
        elapsed = time.time() - start_time
        total_time += elapsed
        
        logger.info(f"  ‚úÖ Completed in {elapsed:.2f} seconds")
        logger.info(f"  üìà Total loss: {losses['total'].item():.6f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ç–µ—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        loss_dict = {k: v.item() for k, v in losses.items()}
        all_losses.append(loss_dict)
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –º–µ–∂–¥—É –ø—Ä–æ—Ö–æ–¥–∞–º–∏
        del test_embeddings
        if torch.cuda.is_available():
            torch.cuda.empty_cache()
        gc.collect()
        
    except Exception as e:
        logger.error(f"  ‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        break

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
logger.info(f"\nüìä Summary:")
logger.info(f"  Total time: {total_time:.2f} seconds")
logger.info(f"  Average time per pass: {total_time/len(all_losses):.2f} seconds")
logger.info(f"  Successful passes: {len(all_losses)}/{num_passes}")

if all_losses:
    logger.info(f"\nüìà Loss evolution:")
    for i, losses in enumerate(all_losses):
        logger.info(f"  Pass {i+1}: total={losses['total']:.6f}, reconstruction={losses['reconstruction']:.6f}")
        
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    total_losses = [l['total'] for l in all_losses]
    max_loss = max(total_losses)
    min_loss = min(total_losses)
    loss_variation = (max_loss - min_loss) / min_loss if min_loss > 0 else 0
    
    logger.info(f"\nüîç Stability analysis:")
    logger.info(f"  Min total loss: {min_loss:.6f}")
    logger.info(f"  Max total loss: {max_loss:.6f}")
    logger.info(f"  Loss variation: {loss_variation:.2%}")
    
    if loss_variation < 0.1:
        logger.info("  ‚úÖ System is stable (variation < 10%)")
    else:
        logger.warning("  ‚ö†Ô∏è System shows instability (variation >= 10%)")

logger.info("\n‚úÖ Test completed!")