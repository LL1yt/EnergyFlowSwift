"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
===================================

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º:
- –ö–∞–∫–æ–π –º–æ–¥—É–ª—å –±—ã–ª –≤—ã–∑–≤–∞–Ω
- –ö–µ–º –±—ã–ª –≤—ã–∑–≤–∞–Ω (caller info)
- –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç debug_mode
"""

import logging
import inspect
import sys
from datetime import datetime
from typing import Optional, Any, Dict
from pathlib import Path


class ModuleTrackingFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª–µ–π –∏ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –∫–æ–¥–∞."""

    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ caller
        caller_info = self._get_caller_info()
        record.caller_info = caller_info

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(record, "caller_info") and record.caller_info:
            caller_str = f" [{record.caller_info}]"
        else:
            caller_str = ""

        # –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted = super().format(record)

        # –î–æ–±–∞–≤–ª—è–µ–º caller info –µ—Å–ª–∏ –µ—Å—Ç—å
        if caller_str:
            # –í—Å—Ç–∞–≤–ª—è–µ–º caller info –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É—Ä–æ–≤–Ω—è, –Ω–æ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            parts = formatted.split(" - ", 2)
            if len(parts) >= 3:
                formatted = f"{parts[0]} - {parts[1]}{caller_str} - {parts[2]}"

        return formatted

    def _get_caller_info(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ."""
        try:
            # –ò—â–µ–º –≤ —Å—Ç–µ–∫–µ —Ñ—Ä–µ–π–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
            frame = inspect.currentframe()
            for _ in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 —É—Ä–æ–≤–Ω–µ–π –≤–≥–ª—É–±—å
                if frame is None:
                    break

                filename = frame.f_code.co_filename
                func_name = frame.f_code.co_function
                lineno = frame.f_lineno

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—Ä–µ–π–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                if not any(
                    skip in filename.lower() for skip in ["logging", "log_utils"]
                ):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                    try:
                        rel_path = Path(filename).relative_to(Path.cwd())
                        return f"{rel_path}:{func_name}:{lineno}"
                    except ValueError:
                        return f"{Path(filename).name}:{func_name}:{lineno}"

                frame = frame.f_back

            return "unknown"
        except Exception:
            return "unknown"


class DebugModeFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç debug_mode."""

    def __init__(self, debug_mode: bool = False):
        super().__init__()
        self.debug_mode = debug_mode

    def filter(self, record):
        # –í debug_mode –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
        if self.debug_mode:
            return True

        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ INFO –∏ –≤—ã—à–µ, –ø–ª—é—Å –≤–∞–∂–Ω—ã–µ DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è
        if record.levelno >= logging.INFO:
            return True

        # –í–∞–∂–Ω—ã–µ DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã)
        message = record.getMessage()
        important_markers = ["üöÄ INIT", "‚úÖ", "‚ùå", "‚ö†Ô∏è", "ERROR", "CRITICAL"]

        return any(marker in message for marker in important_markers)


def setup_logging(debug_mode: bool = False, log_file: Optional[str] = None) -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.

    Args:
        debug_mode: –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_file: –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –ü–æ–ª—É—á–∞–µ–º root logger
    root_logger = logging.getLogger()

    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    if debug_mode:
        root_logger.setLevel(logging.DEBUG)
        console_level = logging.DEBUG
    else:
        root_logger.setLevel(logging.INFO)
        console_level = logging.INFO

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    if debug_mode:
        format_str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    else:
        format_str = "%(asctime)s - %(levelname)s - %(message)s"

    formatter = ModuleTrackingFormatter(format_str)

    # Console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(console_level)
    console_handler.setFormatter(formatter)
    console_handler.addFilter(DebugModeFilter(debug_mode))
    root_logger.addHandler(console_handler)

    # File handler (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª)
    if log_file:
        file_handler = logging.FileHandler(log_file)
        file_handler.setLevel(logging.DEBUG)  # –í —Ñ–∞–π–ª –ø–∏—à–µ–º –≤—Å–µ
        file_handler.setFormatter(formatter)
        root_logger.addHandler(file_handler)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("matplotlib").setLevel(logging.WARNING)
    logging.getLogger("PIL").setLevel(logging.WARNING)
    logging.getLogger("urllib3").setLevel(logging.WARNING)


def get_logger(name: Optional[str] = None) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–æ–¥—É–ª—è.

    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    if name is None:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –º–æ–¥—É–ª—è
        frame = inspect.currentframe().f_back
        if frame:
            module_name = frame.f_globals.get("__name__", "unknown")
            name = module_name
        else:
            name = "unknown"

    return logging.getLogger(name)


def log_init(component_name: str, **kwargs) -> None:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

    Args:
        component_name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    logger = get_logger()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    info_parts = []
    for key, value in kwargs.items():
        if isinstance(value, (dict, list)):
            info_parts.append(f"{key.upper()}: {len(value)} items")
        else:
            info_parts.append(f"{key.upper()}: {value}")

    info_str = "\n     ".join(info_parts) if info_parts else "No additional info"

    logger.info(f"üöÄ INIT {component_name} @ {timestamp}\n" f"     {info_str}")


def log_function_call(func_name: str, args: Dict[str, Any] = None) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è debug_mode).

    Args:
        func_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
    """
    logger = get_logger()

    if args:
        args_str = ", ".join(f"{k}={v}" for k, v in args.items())
        logger.debug(f"üìû CALL {func_name}({args_str})")
    else:
        logger.debug(f"üìû CALL {func_name}()")


def log_performance(operation: str, duration: float, **kwargs) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

    Args:
        operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        duration: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    logger = get_logger()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    if duration < 0.001:
        time_str = f"{duration*1000000:.1f}Œºs"
    elif duration < 1.0:
        time_str = f"{duration*1000:.1f}ms"
    else:
        time_str = f"{duration:.2f}s"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    extra_info = ""
    if kwargs:
        extra_parts = [f"{k}={v}" for k, v in kwargs.items()]
        extra_info = f" ({', '.join(extra_parts)})"

    logger.info(f"‚è±Ô∏è PERF {operation}: {time_str}{extra_info}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º
def _get_caller_info() -> str:
    """–§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ caller."""
    formatter = ModuleTrackingFormatter("")
    return formatter._get_caller_info()
