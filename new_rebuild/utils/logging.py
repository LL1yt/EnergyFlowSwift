"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
===================================

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º:
- –ö–∞–∫–æ–π –º–æ–¥—É–ª—å –±—ã–ª –≤—ã–∑–≤–∞–Ω
- –ö–µ–º –±—ã–ª –≤—ã–∑–≤–∞–Ω (caller info)
- –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç debug_mode

–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ core/log_utils.py –¥–ª—è unified –ø–æ–¥—Ö–æ–¥–∞
"""

import logging
import inspect
import sys
import os
from datetime import datetime, timedelta
from typing import Optional, Any, Dict, Set
from pathlib import Path
import threading
import hashlib


def _get_caller_info_legacy() -> str:
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ core/log_utils.py
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ (—Ñ–∞–π–ª, —Å—Ç—Ä–æ–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è).

    LEGACY COMPATIBILITY: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ core/log_utils.py
    """
    try:
        # inspect.stack() is slow, but for debugging it's acceptable.
        stack = inspect.stack()
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ñ—Ä–µ–π–º –Ω–µ –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        for frame_info in stack[2:]:  # Go up 2 frames to get out of this helper
            if frame_info.filename != str(Path(__file__).resolve()):
                # Return a concise string with relevant info, relative to project root 'AA'
                try:
                    # Assumes the project root is named 'AA' or is the CWD
                    project_root = Path.cwd()
                    if "AA" not in project_root.parts:
                        # Fallback if not run from a subfolder of AA
                        rel_path = frame_info.filename
                    else:
                        # Find the 'AA' part and form the path from there
                        aa_index = project_root.parts.index("AA")
                        aa_root = Path(*project_root.parts[: aa_index + 1])
                        rel_path = os.path.relpath(frame_info.filename, start=aa_root)

                except (ValueError, TypeError):
                    rel_path = frame_info.filename
                return f"{rel_path}:{frame_info.lineno} ({frame_info.function})"
        return "N/A"
    except Exception:
        # This could fail in some environments (e.g. optimized Python), so we have a fallback.
        return "N/A"


class ModuleTrackingFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª–µ–π –∏ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –∫–æ–¥–∞."""

    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ caller –∏—Å–ø–æ–ª—å–∑—É—è legacy –ª–æ–≥–∏–∫—É
        caller_info = self._get_caller_info()
        record.caller_info = caller_info

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(record, "caller_info") and record.caller_info:
            caller_str = f" [{record.caller_info}]"
        else:
            caller_str = ""

        # –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted = super().format(record)

        # –î–æ–±–∞–≤–ª—è–µ–º caller info –µ—Å–ª–∏ –µ—Å—Ç—å
        if caller_str:
            # –í—Å—Ç–∞–≤–ª—è–µ–º caller info –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É—Ä–æ–≤–Ω—è, –Ω–æ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            parts = formatted.split(" - ", 2)
            if len(parts) >= 3:
                formatted = f"{parts[0]} - {parts[1]}{caller_str} - {parts[2]}"

        return formatted

    def _get_caller_info(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ.
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É 'code' object has no
        """
        try:
            # –ò—â–µ–º –≤ —Å—Ç–µ–∫–µ —Ñ—Ä–µ–π–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
            frame = inspect.currentframe()

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç–µ–∫—É
            for level in range(15):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–ª–µ—Ç–æ–∫
                if frame is None:
                    break

                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—Ä–µ–π–º–µ
                    filename = getattr(frame, "f_code", None)
                    if filename is None:
                        frame = frame.f_back
                        continue

                    filename = filename.co_filename
                    func_name = frame.f_code.co_function
                    lineno = frame.f_lineno

                except (AttributeError, TypeError) as e:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—Ä–µ–π–º–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    frame = frame.f_back
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—Ä–µ–π–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                skip_files = ["logging", "log_utils", "__init__"]
                skip_functions = [
                    "__init__",
                    "setup_logging",
                    "get_logger",
                    "_log_parameter_count",
                    "format",
                    "_get_caller_info",
                ]

                try:
                    file_basename = Path(filename).name.lower()
                except (TypeError, OSError):
                    file_basename = str(filename).lower()

                # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—â–∏—Ö —Ñ—Ä–µ–π–º–æ–≤
                is_logging_frame = (
                    any(skip in file_basename for skip in skip_files)
                    or func_name in skip_functions
                    or "logging.py" in file_basename
                )

                if not is_logging_frame:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy –ª–æ–≥–∏–∫—É –¥–ª—è –ø—É—Ç–µ–π —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
                    try:
                        project_root = Path.cwd()
                        if "AA" not in str(project_root):
                            rel_path = Path(filename).name
                        else:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç AA
                            try:
                                if "AA" in project_root.parts:
                                    aa_index = project_root.parts.index("AA")
                                    aa_root = Path(*project_root.parts[: aa_index + 1])
                                    rel_path = os.path.relpath(filename, start=aa_root)
                                else:
                                    # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                                    rel_path = Path(filename).name
                            except (ValueError, OSError):
                                rel_path = Path(filename).name
                    except (ValueError, TypeError, OSError):
                        rel_path = Path(filename).name if filename else "unknown_file"

                    return f"{rel_path}:{func_name}:{lineno}"

                frame = frame.f_back

            return "unknown"
        except Exception as e:
            # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return f"error:caller_info_failed"


class DebugModeFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç debug_mode."""

    def __init__(self, debug_mode: bool = False):
        super().__init__()
        self.debug_mode = debug_mode

    def filter(self, record):
        # –í debug_mode –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
        if self.debug_mode:
            return True

        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ INFO –∏ –≤—ã—à–µ, –ø–ª—é—Å –≤–∞–∂–Ω—ã–µ DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è
        if record.levelno >= logging.INFO:
            return True

        # –í–∞–∂–Ω—ã–µ DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã)
        message = record.getMessage()
        important_markers = ["üöÄ INIT", "‚úÖ", "‚ùå", "‚ö†Ô∏è", "ERROR", "CRITICAL"]

        return any(marker in message for marker in important_markers)


def setup_logging(
    debug_mode: bool = False,
    level: Optional[str] = None,
    log_file: Optional[str] = None,
    enable_deduplication: bool = False,
    enable_context: bool = True,
) -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.

    Args:
        debug_mode: –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç level)
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ("DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL")
        log_file: –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        enable_deduplication: –û–¢–ö–õ–Æ–ß–ï–ù–û - –º–æ–∂–µ—Ç —Å–∫—Ä—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ
        enable_context: –í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º root logger
    root_logger = logging.getLogger()

    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if debug_mode:
        # debug_mode –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç level
        log_level = logging.DEBUG
    elif level:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        level_map = {
            "DEBUG": logging.DEBUG,
            "INFO": logging.INFO,
            "WARNING": logging.WARNING,
            "ERROR": logging.ERROR,
            "CRITICAL": logging.CRITICAL
        }
        log_level = level_map.get(level.upper(), logging.INFO)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO
        log_level = logging.INFO
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    root_logger.setLevel(log_level)
    console_level = log_level

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä (–≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    if debug_mode:
        format_str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    else:
        format_str = "%(asctime)s - %(levelname)s - %(message)s"

    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    if enable_context:
        formatter = ContextualFormatter(format_str)
    else:
        formatter = ModuleTrackingFormatter(format_str)

    # Console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(console_level)
    console_handler.setFormatter(formatter)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (–ë–ï–ó –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏)
    console_handler.addFilter(DebugModeFilter(debug_mode))
    # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º AntiDuplicationFilter - –º–æ–∂–µ—Ç —Å–∫—Ä—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

    root_logger.addHandler(console_handler)

    # File handler (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª)
    if log_file:
        file_handler = logging.FileHandler(log_file)
        file_handler.setLevel(logging.DEBUG)  # –í —Ñ–∞–π–ª –ø–∏—à–µ–º –≤—Å–µ
        file_handler.setFormatter(formatter)
        # –í —Ñ–∞–π–ª —Ç–æ–∂–µ –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
        root_logger.addHandler(file_handler)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("matplotlib").setLevel(logging.WARNING)
    logging.getLogger("PIL").setLevel(logging.WARNING)
    logging.getLogger("urllib3").setLevel(logging.WARNING)

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    logger = get_logger("logging_setup")
    level_name = logging.getLevelName(log_level)
    logger.info(
        f"Logging configured: level={level_name}, debug={debug_mode}, context={enable_context}"
    )


def get_logger(name: Optional[str] = None) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–æ–¥—É–ª—è.

    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    if name is None:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –º–æ–¥—É–ª—è
        frame = inspect.currentframe().f_back
        if frame:
            module_name = frame.f_globals.get("__name__", "unknown")
            name = module_name
        else:
            name = "unknown"

    return logging.getLogger(name)


def log_init(component_name: str, **kwargs) -> None:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

    Args:
        component_name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    logger = get_logger()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    info_parts = []
    for key, value in kwargs.items():
        if isinstance(value, (dict, list)):
            info_parts.append(f"{key.upper()}: {len(value)} items")
        else:
            info_parts.append(f"{key.upper()}: {value}")

    info_str = "\n     ".join(info_parts) if info_parts else "No additional info"

    logger.info(f"üöÄ INIT {component_name} @ {timestamp}\n" f"     {info_str}")


def log_function_call(func_name: str, args: Dict[str, Any] = None) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è debug_mode).

    Args:
        func_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
    """
    logger = get_logger()

    if args:
        args_str = ", ".join(f"{k}={v}" for k, v in args.items())
        logger.debug(f"üìû CALL {func_name}({args_str})")
    else:
        logger.debug(f"üìû CALL {func_name}()")


def log_performance(operation: str, duration: float, **kwargs) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

    Args:
        operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        duration: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    logger = get_logger()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    if duration < 0.001:
        time_str = f"{duration*1000000:.1f}Œºs"
    elif duration < 1.0:
        time_str = f"{duration*1000:.1f}ms"
    else:
        time_str = f"{duration:.2f}s"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    extra_info = ""
    if kwargs:
        extra_parts = [f"{k}={v}" for k, v in kwargs.items()]
        extra_info = f" ({', '.join(extra_parts)})"

    logger.info(f"‚è±Ô∏è PERF {operation}: {time_str}{extra_info}")


# === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–õ–ï–¢–û–ö ===


def log_cell_init(
    cell_type: str, total_params: int, target_params: int, **kwargs
) -> None:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫.

    Args:
        cell_type: –¢–∏–ø –∫–ª–µ—Ç–∫–∏ (NCA, gMLP, Hybrid)
        total_params: –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        target_params: –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    logger = get_logger()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ target_params —É–∫–∞–∑–∞–Ω)
    if target_params is not None and total_params > target_params * 1.2:
        status = "‚ö†Ô∏è –ü–†–ï–í–´–®–ï–ù–ò–ï"
        logger.warning(
            f"üöÄ INIT {cell_type}Cell: {total_params:,} params (target: {target_params:,}) - {status}"
        )
    elif target_params is not None:
        status = "‚úÖ –ù–û–†–ú–ê"
        logger.info(
            f"üöÄ INIT {cell_type}Cell: {total_params:,} params (target: {target_params:,}) - {status}"
        )
    else:
        # –ù–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.info(f"üöÄ INIT {cell_type}Cell: {total_params:,} params")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    for key, value in kwargs.items():
        logger.info(f"     {key.upper()}: {value}")


def log_cell_forward(
    cell_type: str, input_shapes: Dict[str, Any], output_shape: Any = None
) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç forward pass –∫–ª–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ debug_mode).

    Args:
        cell_type: –¢–∏–ø –∫–ª–µ—Ç–∫–∏
        input_shapes: –§–æ—Ä–º—ã –≤—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤
        output_shape: –§–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞
    """
    logger = get_logger()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–∞—Ö
    input_info = []
    for name, shape in input_shapes.items():
        input_info.append(f"{name}: {shape}")

    input_str = ", ".join(input_info)

    if output_shape:
        logger.debug(f"üìû FORWARD {cell_type}Cell: {input_str} ‚Üí {output_shape}")
    else:
        logger.debug(f"üìû FORWARD {cell_type}Cell: {input_str}")


def log_cell_component_params(
    component_params: Dict[str, int], total_params: int
) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –∫–ª–µ—Ç–∫–∏.

    Args:
        component_params: –°–ª–æ–≤–∞—Ä—å {–∫–æ–º–ø–æ–Ω–µ–Ω—Ç: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤}
        total_params: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    logger = get_logger()

    for component, count in sorted(
        component_params.items(), key=lambda x: x[1], reverse=True
    ):
        percentage = (count / total_params) * 100 if total_params > 0 else 0
        logger.info(f"     {component}: {count:,} params ({percentage:.1f}%)")


# === LEGACY COMPATIBILITY ===


def _get_caller_info() -> str:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è caller info.
    """
    return _get_caller_info_legacy()


# –ê–ª–∏–∞—Å –¥–ª—è legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
get_caller_info = _get_caller_info


# === –°–ò–°–¢–ï–ú–ê –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –õ–û–ì–û–í ===


class DuplicationManager:  # deprecated
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤.

    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. Event-based logging - –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, –Ω–µ –¥–µ–π—Å—Ç–≤–∏—è
    2. Context tracking - –∫–∞–∂–¥—ã–π –ª–æ–≥ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    3. Time-based deduplication - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—ã –≤ –∫–æ—Ä–æ—Ç–∫–æ–º –ø–µ—Ä–∏–æ–¥–µ
    4. Hierarchical logging - —á–µ—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∫—Ç–æ —á—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç
    """

    def __init__(self, dedup_window_seconds: int = 1):
        self.dedup_window = timedelta(seconds=dedup_window_seconds)
        self.recent_logs: Dict[str, datetime] = {}
        self.lock = threading.Lock()

    def should_log(self, message: str, logger_name: str, level: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç.

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            logger_name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, False –µ—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç
        """
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        key = self._create_message_key(message, logger_name, level)

        with self.lock:
            now = datetime.now()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ —Ç–∞–∫–æ–π –∂–µ –ª–æ–≥
            if key in self.recent_logs:
                last_time = self.recent_logs[key]
                if now - last_time < self.dedup_window:
                    return False  # –î—É–±–ª–∏–∫–∞—Ç, –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∞
            self.recent_logs[key] = now

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            self._cleanup_old_entries(now)

            return True

    def _create_message_key(self, message: str, logger_name: str, level: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–±–∏—Ä–∞–µ–º timestamps, –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è)
        normalized = self._normalize_message(message)
        key_string = f"{logger_name}:{level}:{normalized}"
        return hashlib.md5(key_string.encode()).hexdigest()

    def _normalize_message(self, message: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–±–∏—Ä–∞—è –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è —á–∞—Å—Ç–∏"""
        import re

        # –£–±–∏—Ä–∞–µ–º timestamps
        message = re.sub(r"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}[.,]\d+", "", message)
        # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–Ω–∑–æ—Ä–æ–≤ (–æ–Ω–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è)
        message = re.sub(r"torch\.Size\([^)]+\)", "torch.Size(...)", message)
        # –£–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–º–æ–≥—É—Ç —Å–ª–µ–≥–∫–∞ –º–µ–Ω—è—Ç—å—Å—è)
        message = re.sub(r"\d+,?\d* params", "X params", message)

        return message.strip()

    def _cleanup_old_entries(self, now: datetime):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
        cutoff = now - self.dedup_window * 2  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ –¥–≤–æ–π–Ω–æ–≥–æ –æ–∫–Ω–∞
        old_keys = [key for key, time in self.recent_logs.items() if time < cutoff]
        for key in old_keys:
            del self.recent_logs[key]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
_deduplication_manager = DuplicationManager()


class AntiDuplicationFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤"""

    def filter(self, record):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        return _deduplication_manager.should_log(
            record.getMessage(), record.name, record.levelname
        )


# === –ö–û–ù–¢–ï–ö–°–¢–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===


class LogContext:
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    with LogContext("cell_creation", cell_type="NCA"):
        # –í—Å–µ –ª–æ–≥–∏ –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã
        logger.info("Creating cell...")  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: [cell_creation:NCA] Creating cell...
    """

    _context_stack: list = []
    _lock = threading.Lock()

    def __init__(self, context_name: str, **context_data):
        self.context_name = context_name
        self.context_data = context_data

    def __enter__(self):
        with self._lock:
            self._context_stack.append(self)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        with self._lock:
            if self._context_stack and self._context_stack[-1] is self:
                self._context_stack.pop()

    @classmethod
    def get_current_context(cls) -> Optional["LogContext"]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        with cls._lock:
            return cls._context_stack[-1] if cls._context_stack else None

    def format_context(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–æ–≥"""
        if self.context_data:
            data_str = ":".join(f"{k}={v}" for k, v in self.context_data.items())
            return f"[{self.context_name}:{data_str}]"
        return f"[{self.context_name}]"


class ContextualFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º"""

    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        context = LogContext.get_current_context()
        if context:
            context_str = context.format_context()
            record.msg = f"{context_str} {record.msg}"

        return super().format(record)
