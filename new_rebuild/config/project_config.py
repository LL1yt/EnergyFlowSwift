#!/usr/bin/env python3
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Clean 3D Cellular Neural Network
=================================================================

–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∏–∑ utils/centralized_config.py, –Ω–æ —É–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è clean –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
"""

from dataclasses import dataclass
from typing import Tuple, Dict, Any, Optional
import logging
import torch


@dataclass
class ProjectConfig:
    """
    –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

    –ü—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
    2. –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    3. –≠–º–µ—Ä–¥–∂–µ–Ω—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ—Ç—É
    4. Centralised logging
    """

    # === –ê–†–•–ò–¢–ï–ö–¢–£–†–ê ===
    architecture_type: str = "moe"  # moe | gnn (deprecated: nca, gmlp, hybrid)

    # === 3D –†–ï–®–ï–¢–ö–ê ===
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–ª–æ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ —Ü–µ–ª–∏
    lattice_dimensions: Tuple[int, int, int] = (27, 27, 27)  # MoE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    # lattice_dimensions: Tuple[int, int, int] = (6, 6, 6)  # –æ—Ç–ª–∞–¥–∫–∞
    # lattice_dimensions: Tuple[int, int, int] = (16, 16, 16)  # test
    # target_dimensions: Tuple[int, int, int] = (666, 666, 333)  # –Ω–∞—É—á–Ω—ã–µ –æ–ø—ã—Ç—ã

    # === DEPRECATED: NCA –ù–ï–ô–†–û–ù–´ (–∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ MoE Gating) ===
    # nca_state_size: int = 4  # DEPRECATED - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ gnn_state_size
    # nca_hidden_dim: int = 3  # DEPRECATED
    # nca_neighbor_count: int = 26  # DEPRECATED - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ effective_neighbors
    # nca_external_input_size: int = 1  # DEPRECATED
    # nca_target_params: int = 69  # DEPRECATED
    # nca_activation: str = "tanh"  # DEPRECATED

    # === GNN –°–í–Ø–ó–ò (–∑–∞–º–µ–Ω–∞ gMLP) - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è ===
    gnn_state_size: int = 32  # —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–∫–∏
    gnn_message_dim: int = 16  # —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –∫–ª–µ—Ç–∫–∞–º–∏
    gnn_hidden_dim: int = 32  # —Å–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    gnn_neighbor_count: int = 26  # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å NCA
    gnn_external_input_size: int = 8  # –≤–Ω–µ—à–Ω–∏–π –≤—Ö–æ–¥
    gnn_target_params: int = 8000  # –Ω–∞–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ —á–µ–º gMLP (113k ‚Üí 8k)
    gnn_activation: str = "gelu"  # —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
    gnn_use_attention: bool = True  # attention mechanism –¥–ª—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    gnn_aggregation: str = "attention"  # —Ç–∏–ø –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    gnn_num_layers: int = 1  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ GNN (–Ω–∞—á–∏–Ω–∞–µ–º —Å 1)

    # === HYBRID –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===
    # deprecated hybrid_nca_weight: float = 0.1  # 10% –≤–ª–∏—è–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–æ–≤
    # deprecated hybrid_gnn_weight: float = 0.9  # 90% –≤–ª–∏—è–Ω–∏–µ —Å–≤—è–∑–µ–π (–±—ã–ª–æ gmlp_weight)

    # === –û–ë–£–ß–ï–ù–ò–ï ===
    learning_rate: float = 0.001
    batch_size: int = 4
    device: str = "auto"  # auto-detect cuda/cpu

    # === –≠–ú–ë–ï–î–î–ò–ù–ì–ò ===
    embedding_dim: int = 768  # from DistilBERT
    phrase_based_training: bool = True  # —Ü–µ–ª—ã–µ —Ñ—Ä–∞–∑—ã, –Ω–µ —Ç–æ–∫–µ–Ω—ã

    # === –ë–ò–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ù–¶–ò–ü–´ ===
    shared_weights: bool = True  # –∫–ª–µ—Ç–∫–∏ –∫–∞–∫ –Ω–µ–π—Ä–æ–Ω—ã —Å –æ–±—â–∏–º–∏ –≤–µ—Å–∞–º–∏
    tissue_simulation: bool = True  # —Ä–µ—à–µ—Ç–∫–∞ –∫–∞–∫ –Ω–µ—Ä–≤–Ω–∞—è —Ç–∫–∞–Ω—å
    receptor_coverage: float = 1.0  # —Ä–µ—Ü–µ–ø—Ç–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (100% –ø–æ–∫—Ä—ã—Ç–∏—è)
    signal_propagation: bool = True  # —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∫ –Ω–µ—Ä–≤–Ω—ã–µ –∏–º–ø—É–ª—å—Å—ã
    # === –¢–û–ü–û–õ–û–ì–ò–Ø –°–û–°–ï–î–°–¢–í–ê (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ—à–µ—Ç–∫–∏) ===
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: 10/55/35 –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è CNF –≤–ª–∏—è–Ω–∏—è
    neighbors: int = 26  # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (3D Moore neighborhood)
    max_neighbors: int = 10000  # –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º (10k —Å–≤—è–∑–µ–π)
    neighbor_finding_strategy: str = "tiered"
    dynamic_neighbor_count: bool = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ—Ç–∫–∏
    # neighbor_strategy_config:
    local_tier: float = 0.1  # 10% –ª–æ–∫–∞–ª—å–Ω—ã–µ (–º–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
    functional_tier: float = 0.55  # 55% —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è CNF)
    distant_tier: float = 0.35  # 35% –¥–∞–ª—å–Ω–∏–µ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è CNF)
    local_grid_cell_size: int = 8  # –†–∞–∑–º–µ—Ä spatial hash bins

    # === –ü–õ–ê–°–¢–ò–ß–ù–û–°–¢–¨ ===
    enable_plasticity: bool = True
    plasticity_rule: str = "combined"  # STDP + BCM + competitive
    enable_competitive_learning: bool = True
    enable_metaplasticity: bool = True
    enable_clustering: bool = False  # –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ

    # === MoE ARCHITECTURE (–û–°–ù–û–í–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê) ===
    enable_moe: bool = True  # Mixture of Experts - –æ—Å–Ω–æ–≤–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

    # === GATING NETWORK (–∑–∞–º–µ–Ω—è–µ—Ç NCA –Ω–µ–π—Ä–æ–Ω) ===
    gating_state_size: int = 32  # —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è gating (= gnn_state_size)
    gating_params: int = 808  # —Ç–æ—á–Ω–æ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    gating_num_experts: int = 3  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    gating_activation: str = "gelu"  # –∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è gating network

    # === –≠–ö–°–ü–ï–†–¢–´ –ò –ò–• –ü–ê–†–ê–ú–ï–¢–†–´ ===
    # Local Expert (SimpleLinear) - —Ä–µ—Ñ–ª–µ–∫—Å—ã
    local_expert_params: int = 2059  # —Ç–æ—á–Ω–æ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    local_expert_type: str = "linear"  # —Ç–∏–ø —ç–∫—Å–ø–µ—Ä—Ç–∞

    # Functional Expert (GNN) - –æ—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    functional_expert_params: int = 8233  # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    functional_expert_type: str = "gnn"  # —Ç–æ–ª—å–∫–æ GNN (–±–µ–∑ CNF –≤ functional)

    # Distant Expert (CNF) - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
    distant_expert_params: int = 4000  # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è LightweightCNF
    distant_expert_type: str = "cnf"  # —Ç–æ–ª—å–∫–æ CNF

    # === –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–í–Ø–ó–ï–ô –ü–û –≠–ö–°–ü–ï–†–¢–ê–ú ===
    local_connections_ratio: float = 0.10  # 10% —Å–≤—è–∑–µ–π - Local Expert
    functional_connections_ratio: float = 0.55  # 55% —Å–≤—è–∑–µ–π - Functional Expert
    distant_connections_ratio: float = 0.35  # 35% —Å–≤—è–∑–µ–π - Distant Expert

    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π
    local_distance_threshold: float = 1.5  # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è local connections
    functional_similarity_threshold: float = 0.3  # –ø–æ—Ä–æ–≥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏

    # === DEPRECATED: HYBRID GNN+CNF EXPERT ===
    # hybrid_gnn_cnf_expert_params: int = 12233  # DEPRECATED - —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ
    # cnf_expert_params: int = 3000  # DEPRECATED - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ distant_expert_params

    # === PHASE 4: LIGHTWEIGHT CNF ===
    enable_cnf: bool = True  # –í–∫–ª—é—á–∞–µ–º CNF –¥–ª—è MoE
    cnf_functional_connections: bool = True  # CNF –¥–ª—è functional (55%)
    cnf_distant_connections: bool = True  # CNF –¥–ª—è distant (35%)
    cnf_integration_steps: int = 3  # 3-step Euler (–≤–º–µ—Å—Ç–æ 10 RK4)
    cnf_adaptive_step_size: bool = True  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —à–∞–≥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    cnf_target_params_per_connection: int = 3000  # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è CNF

    # === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–ê–ú–Ø–¢–ò ===
    memory_efficient: bool = True
    use_checkpointing: bool = True
    mixed_precision: bool = True

    # === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
    debug_mode: bool = True  # –º–∞–∫—Å–∏–º—É–º –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    enable_logging: bool = True
    log_level: str = "INFO"

    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    seed: int = 42
    initialization_method: str = "xavier"

    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if self.device == "auto":
            self.device = "cuda" if torch.cuda.is_available() else "cpu"

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è neighbor_count –º–µ–∂–¥—É NCA –∏ GNN
        if self.nca_neighbor_count != self.gnn_neighbor_count:
            logging.warning(
                f"‚ö†Ô∏è NCA neighbor_count ({self.nca_neighbor_count}) != GNN neighbor_count ({self.gnn_neighbor_count})"
            )
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
            self.gnn_neighbor_count = self.nca_neighbor_count

        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—Ç–æ–∫
        self.total_cells = (
            self.lattice_dimensions[0]
            * self.lattice_dimensions[1]
            * self.lattice_dimensions[2]
        )

        if self.debug_mode:
            logging.info(f"üîß ProjectConfig initialized:")
            logging.info(f"   Architecture: {self.architecture_type}")
            logging.info(
                f"   Lattice: {self.lattice_dimensions} = {self.total_cells} cells"
            )
            logging.info(f"   Device: {self.device}")
            logging.info(f"   NCA params target: {self.nca_target_params}")
            logging.info(f"   GNN params target: {self.gnn_target_params}")

    # === –ú–ï–¢–û–î–´ –î–û–°–¢–£–ü–ê (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Legacy) ===
    def get_nca_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é NCA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        return {
            "state_size": self.nca_state_size,
            "hidden_dim": self.nca_hidden_dim,
            "external_input_size": self.nca_external_input_size,
            "neighbor_count": self.nca_neighbor_count,
            "target_params": self.nca_target_params,
            "activation": self.nca_activation,
            "dropout": 0.0,
            "use_memory": False,
            "enable_lattice_scaling": False,
        }

    def get_gnn_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é GNN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–∑–∞–º–µ–Ω–∞ gMLP)"""
        return {
            "state_size": self.gnn_state_size,
            "neighbor_count": self.gnn_neighbor_count,
            "message_dim": self.gnn_message_dim,
            "hidden_dim": self.gnn_hidden_dim,
            "external_input_size": self.gnn_external_input_size,
            "target_params": self.gnn_target_params,
            "activation": self.gnn_activation,
            "use_attention": self.gnn_use_attention,
            "aggregation": self.gnn_aggregation,
            "num_layers": self.gnn_num_layers,
            "dropout": 0.0,  # –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è clean –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        }

    def get_gmlp_config(self) -> Dict[str, Any]:
        """DEPRECATED: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é gMLP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (Legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º GNN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        gnn_config = self.get_gnn_config()
        # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return {
            "state_size": gnn_config["state_size"],
            "neighbor_count": gnn_config["neighbor_count"],
            "hidden_dim": gnn_config["hidden_dim"],
            "external_input_size": gnn_config["external_input_size"],
            "target_params": gnn_config["target_params"],
            "activation": gnn_config["activation"],
            "dropout": 0.0,  # –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è clean –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            "use_memory": False,  # –ø–∞–º—è—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ (shared weights)
            # –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú bottleneck –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            "bottleneck_dim": None,
        }

    def get_lattice_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é 3D —Ä–µ—à–µ—Ç–∫–∏"""
        return {
            "dimensions": self.lattice_dimensions,
            "total_cells": self.total_cells,
            "neighbors": self.nca_neighbor_count,  # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            "device": self.device,
            "enable_logging": self.enable_logging,
            "seed": self.seed,
            "initialization_method": self.initialization_method,
        }

    def get_cnf_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Lightweight CNF"""
        return {
            "enable_cnf": self.enable_cnf,
            "functional_connections": self.cnf_functional_connections,
            "distant_connections": self.cnf_distant_connections,
            "integration_steps": self.cnf_integration_steps,
            "adaptive_step_size": self.cnf_adaptive_step_size,
            "target_params_per_connection": self.cnf_target_params_per_connection,
        }

    def get_neighbor_strategy_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ—Å–µ–¥—Å—Ç–≤–∞ (–¥–ª—è CNF –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
        return {
            "local_tier": self.local_tier,
            "functional_tier": self.functional_tier,
            "distant_tier": self.distant_tier,
            "local_grid_cell_size": self.local_grid_cell_size,
        }

    @property
    def total_target_params(self) -> int:
        """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        return self.nca_target_params + self.gnn_target_params

    @property
    def neighbor_strategy_config(self) -> Dict[str, Any]:
        """–°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç neighbor_strategy_config"""
        return self.get_neighbor_strategy_config()

    def calculate_dynamic_neighbors(self) -> int:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Å–µ–¥–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ—à–µ—Ç–∫–∏

        –ü—Ä–∏–Ω—Ü–∏–ø: —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º ~10000 —Å–≤—è–∑–µ–π –Ω–∞ –Ω–µ–π—Ä–æ–Ω
        –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–æ–≥–∏—è: –≤ –ø–ª–æ—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏ –±–æ–ª—å—à–µ —Å–≤—è–∑–µ–π
        """
        if not self.dynamic_neighbor_count:
            return self.neighbors  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        # –†–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ—à–µ—Ç–∫–∏ —Å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
        total_cells = self.total_cells

        if total_cells <= 216:  # 6x6x6
            return 26  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ 3D Moore neighborhood (–º–∏–Ω–∏–º—É–º)
        elif total_cells <= 4096:  # 16x16x16
            return 500  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        elif total_cells <= 19683:  # 27x27x27
            return 2000  # –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º 10k –¥–ª—è MoE
        elif total_cells <= 262144:  # 64x64x64
            return 5000  # –ë–æ–ª—å—à–∏–µ —Ä–µ—à–µ—Ç–∫–∏
        else:  # –ö—Ä—É–ø–Ω—ã–µ —Ä–µ—à–µ—Ç–∫–∏ (666x666x333)
            return min(self.max_neighbors, 10000)  # –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º

    @property
    def effective_neighbors(self) -> int:
        """–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)"""
        return self.calculate_dynamic_neighbors()


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ===
_global_config: Optional[ProjectConfig] = None


def get_project_config() -> ProjectConfig:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    Singleton pattern –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏—Å—Ç–∏–Ω—ã
    """
    global _global_config
    if _global_config is None:
        _global_config = ProjectConfig()
    return _global_config


def set_project_config(config: ProjectConfig):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    global _global_config
    _global_config = config
