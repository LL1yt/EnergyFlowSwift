#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - Clean Architecture
============================================================

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤–º–µ—Å—Ç–æ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ dataclass'–æ–≤.
–ü—Ä–æ—Å—Ç–∞—è, —Ä–∞—Å—à–∏—Ä—è–µ–º–∞—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

–ü—Ä–∏–Ω—Ü–∏–ø—ã:
- –ö–æ–º–ø–æ–∑–∏—Ü–∏—è > –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ > –°–ª–æ–∂–Ω–æ—Å—Ç—å
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å > –ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º
"""

from dataclasses import dataclass, field
from typing import Optional, Dict, Any
import logging

from .config_components import (
    # –†–µ–∂–∏–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ConfigMode,
    ModeSettings,
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    LatticeSettings,
    ModelSettings,
    TrainingSettings,
    CNFSettings,
    EulerSettings,
    CacheSettings,
    SpatialSettings,
    UnifiedOptimizerSettings,
    VectorizedSettings,
    InitSettings,
    DeviceSettings,
    LoggingSettings,
    MemorySettings,
    AdaptiveChunkerSettings,
    ExperimentSettings,
    PerformanceSettings,
    ValidationSettings,
    ConnectionSettings,
    EmbeddingSettings,
    TrainingEmbeddingSettings,
    NeighborSettings,
    ExpertSettings,
    LocalExpertSettings,
    FunctionalExpertSettings,
    DistantExpertSettings,
    GatingNetworkSettings,
    # –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è hardcoded –∑–Ω–∞—á–µ–Ω–∏–π
    TrainingOptimizerSettings,
    EmbeddingMappingSettings,
    MemoryManagementSettings,
    ArchitectureConstants,
    # Spatial optimization helpers
    ChunkInfo,
    create_spatial_config_for_lattice,
    AlgorithmicStrategies,
    ModePresets,
    # –§—É–Ω–∫—Ü–∏–∏
    create_basic_config,
    create_research_config,
    validate_config_components,
)
from ..utils.device_manager import DeviceManager, get_device_manager


@dataclass
class SimpleProjectConfig:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

    –í–º–µ—Å—Ç–æ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ dataclass'–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
    –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.
    """

    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    mode: ModeSettings = field(default_factory=ModeSettings)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ __post_init__)
    lattice: LatticeSettings = field(init=False)
    model: ModelSettings = field(init=False)
    training: TrainingSettings = field(init=False)
    logging: LoggingSettings = field(init=False)
    cache: CacheSettings = field(init=False)
    training_embedding: TrainingEmbeddingSettings = field(init=False)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –æ–±—ã—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    init: InitSettings = field(default_factory=InitSettings)
    device: DeviceSettings = field(default_factory=DeviceSettings)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
    cnf: Optional[CNFSettings] = field(default_factory=CNFSettings)
    euler: Optional[EulerSettings] = field(default_factory=EulerSettings)
    spatial: Optional[SpatialSettings] = field(default_factory=SpatialSettings)
    unified_optimizer: Optional[UnifiedOptimizerSettings] = field(
        default_factory=UnifiedOptimizerSettings
    )
    vectorized: Optional[VectorizedSettings] = field(default_factory=VectorizedSettings)
    memory: Optional[MemorySettings] = field(default_factory=MemorySettings)
    adaptive_chunker: Optional[AdaptiveChunkerSettings] = field(
        default_factory=AdaptiveChunkerSettings
    )

    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    experiment: Optional[ExperimentSettings] = None
    performance: Optional[PerformanceSettings] = None
    validation: Optional[ValidationSettings] = None

    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–±–µ–¥–∏–Ω–≥–∞–º–∏
    embedding: Optional[EmbeddingSettings] = field(default_factory=EmbeddingSettings)

    # MoE –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    neighbors: Optional[NeighborSettings] = field(default_factory=NeighborSettings)
    expert: Optional[ExpertSettings] = field(init=False)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ __post_init__
    connection: Optional[ConnectionSettings] = field(default_factory=ConnectionSettings)
    
    # –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ hardcoded –∑–Ω–∞—á–µ–Ω–∏–π)
    training_optimizer: Optional[TrainingOptimizerSettings] = field(default_factory=TrainingOptimizerSettings)
    embedding_mapping: Optional[EmbeddingMappingSettings] = field(default_factory=EmbeddingMappingSettings)
    memory_management: Optional[MemoryManagementSettings] = field(default_factory=MemoryManagementSettings)
    architecture: Optional[ArchitectureConstants] = field(default_factory=ArchitectureConstants)
    strategies: Optional[AlgorithmicStrategies] = field(default_factory=AlgorithmicStrategies)
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
    mode_presets: Optional[ModePresets] = field(default_factory=ModePresets)

    # Runtime –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    device_manager: Optional[DeviceManager] = field(init=False, default=None)

    def __post_init__(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –°–ù–ê–ß–ê–õ–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏
        self._initialize_components_from_presets()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –ü–ï–†–ï–î –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
        if self.mode.auto_apply_overrides:
            self._apply_mode_settings()
            
        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from ..utils.logging import setup_logging
        setup_logging(
            debug_mode=self.logging.debug_mode,
            level=self.logging.level,  # –ü–µ—Ä–µ–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            log_file=self.logging.log_file if self.logging.log_to_file else None,
            enable_deduplication=False,
            enable_context=True,
            debug_categories=self.logging.debug_categories  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ debug
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è device manager —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º debug_mode –∏–∑ logging –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.device_manager = get_device_manager(
            prefer_cuda=self.device.prefer_cuda, 
            debug_mode=self.logging.debug_mode
        )

        # –°–≤—è–∑—ã–≤–∞–µ–º cache —Å expert settings
        if self.expert and self.cache:
            self.expert.cache = self.cache

        # –°–¢–†–û–ì–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø - –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        # –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–Ω—Ü–∏–ø–æ–º: "–ª—É—á—à–µ —è–≤–Ω–∞—è –æ—à–∏–±–∫–∞, —á–µ–º —Å–∫—Ä—ã—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
        self._validate_configuration()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if self.logging.debug_mode:
            self._log_initialization()
            
    def _apply_mode_settings(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        global _global_migration_warned
        
        # –í DEBUG —Ä–µ–∂–∏–º–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —Ä–∞–∑
        if self.mode.mode == ConfigMode.DEBUG:
            _global_migration_warned = False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –≤—Å—é —Å–µ—Å—Å–∏—é (–∫—Ä–æ–º–µ DEBUG —Ä–µ–∂–∏–º–∞)
        if not _global_migration_warned:
            import warnings
            warnings.warn(
                "\n‚ö†Ô∏è –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –†–µ–∂–∏–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã!\n"
                "‚úÖ –≠—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –ø–æ–º–Ω–∏—Ç–µ:\n"
                "   1. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ config –≤–º–µ—Å—Ç–æ hardcoded –≤ –≤–∞—à–µ–º –∫–æ–¥–µ\n"
                "   2. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ @no_hardcoded –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
                "   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ strict_no_hardcoded() –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã\n"
                "üìù –ü—Ä–µ—Å–µ—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ config.mode_presets.{debug|experiment|optimized}",
                UserWarning,
                stacklevel=4
            )
            _global_migration_warned = True
            
        if self.mode.mode == ConfigMode.DEBUG:
            self._apply_debug_mode()
        elif self.mode.mode == ConfigMode.EXPERIMENT:
            self._apply_experiment_mode()
        elif self.mode.mode == ConfigMode.OPTIMIZED:
            self._apply_optimized_mode()
            
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ
        if self.mode.log_mode_info:
            logging.info(f"üéØ Config mode: {self.mode.mode.value.upper()}")
            
    def _initialize_components_from_presets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤"""
        preset = self._get_current_preset()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤
        self.lattice = LatticeSettings(dimensions=preset.lattice_dimensions)
        
        self.model = ModelSettings(
            state_size=preset.model_state_size
        )
        
        self.training = TrainingSettings(
            batch_size=preset.training_batch_size,
            max_epochs=preset.training_num_epochs,
            num_epochs=preset.training_num_epochs,
            early_stopping_patience=preset.training_early_stopping_patience,
            checkpoint_frequency=preset.training_checkpoint_frequency
        )
        
        self.logging = LoggingSettings(
            level=preset.logging_level,
            debug_mode=preset.logging_debug_mode,
            enable_profiling=preset.logging_enable_profiling,
            performance_tracking=preset.logging_enable_profiling
        )
        
        self.cache = CacheSettings(
            enable_detailed_stats=preset.logging_debug_mode  # –°–≤—è–∑–∞–Ω–æ —Å debug —Ä–µ–∂–∏–º–æ–º
        )
        
        self.training_embedding = TrainingEmbeddingSettings(
            test_mode=preset.logging_debug_mode,  # DEBUG = test_mode
            num_epochs=preset.training_num_epochs,
            max_total_samples=preset.training_max_samples
        )
        
        # Expert settings
        local_expert = LocalExpertSettings(
            params=preset.expert_local_params,
            neighbor_agg_hidden1=getattr(preset, 'expert_local_neighbor_agg_hidden1', 32),
            neighbor_agg_hidden2=getattr(preset, 'expert_local_neighbor_agg_hidden2', 16),
            processor_hidden=getattr(preset, 'expert_local_processor_hidden', 64)
        )
        functional_expert = FunctionalExpertSettings(
            params=preset.expert_functional_params,
            hidden_dim=getattr(preset, 'expert_functional_hidden_dim', 32),
            message_dim=getattr(preset, 'expert_functional_message_dim', 16)
        )
        distant_expert = DistantExpertSettings(
            params=preset.expert_distant_params,
            ode_hidden_dim=getattr(preset, 'expert_distant_ode_hidden_dim', None),
            ode_dropout_rate=getattr(preset, 'expert_distant_ode_dropout_rate', 0.1)
        )
        
        # Gating network settings
        gating_network = GatingNetworkSettings(
            params=getattr(preset, 'expert_gating_params', 808),
            state_size=preset.model_state_size,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π state_size
            hidden_dim=getattr(preset, 'expert_gating_hidden_dim', 64)
        )
        
        self.expert = ExpertSettings(
            local=local_expert,
            functional=functional_expert,
            distant=distant_expert,
            gating=gating_network
        )
        
        # Validation settings –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤
        self.validation = ValidationSettings(
            num_forward_passes=getattr(preset, 'validation_num_forward_passes', 1),
            stability_threshold=getattr(preset, 'validation_stability_threshold', 0.1)
        )
        
    def _get_current_preset(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Å–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞"""
        if not hasattr(self, 'mode_presets') or self.mode_presets is None:
            from .config_components import ModePresets
            self.mode_presets = ModePresets()
            
        if self.mode.mode == ConfigMode.DEBUG:
            return self.mode_presets.debug
        elif self.mode.mode == ConfigMode.EXPERIMENT:
            return self.mode_presets.experiment
        elif self.mode.mode == ConfigMode.OPTIMIZED:
            return self.mode_presets.optimized
        else:
            return self.mode_presets.debug  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
    def _apply_debug_mode(self):
        """–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ _initialize_components_from_presets
        preset = self.mode_presets.debug
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è DEBUG —Ä–µ–∂–∏–º–∞
        self.logging.debug_categories = ['cache', 'init', 'training']
        
        # Architecture (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º)
        self.architecture.moe_functional_params = preset.expert_functional_params
        self.architecture.moe_distant_params = preset.expert_distant_params
        
        # Memory & Performance
        self.memory_management.training_memory_reserve_gb = preset.memory_reserve_gb
        self.memory_management.dataloader_workers = preset.dataloader_workers
        self.memory_management.cleanup_threshold = preset.cleanup_threshold
        
        # Override adaptive radius for small debug lattice
        if hasattr(preset, 'lattice_adaptive_radius_ratio'):
            self.lattice.adaptive_radius_ratio = preset.lattice_adaptive_radius_ratio
        
    def _apply_experiment_mode(self):
        """–†–µ–∂–∏–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ _initialize_components_from_presets
        preset = self.mode_presets.experiment
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è EXPERIMENT —Ä–µ–∂–∏–º–∞
        self.logging.debug_categories = self.logging.TRAINING_DEBUG
        
        # Architecture (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º)
        self.architecture.moe_functional_params = preset.expert_functional_params
        self.architecture.moe_distant_params = preset.expert_distant_params
        
        # Memory & Performance
        self.memory_management.training_memory_reserve_gb = preset.memory_reserve_gb
        self.memory_management.dataloader_workers = preset.dataloader_workers
        self.memory_management.cleanup_threshold = preset.cleanup_threshold
        
    def _apply_optimized_mode(self):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ _initialize_components_from_presets
        preset = self.mode_presets.optimized
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è OPTIMIZED —Ä–µ–∂–∏–º–∞
        self.logging.performance_tracking = False
        self.logging.debug_categories = []
        
        # Architecture (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º)
        self.architecture.moe_functional_params = preset.expert_functional_params
        self.architecture.moe_distant_params = preset.expert_distant_params
        
        # Memory & Performance
        self.memory_management.training_memory_reserve_gb = preset.memory_reserve_gb
        self.memory_management.dataloader_workers = preset.dataloader_workers
        self.memory_management.cleanup_threshold = preset.cleanup_threshold
        
        # –í–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if self.performance is None:
            self.performance = PerformanceSettings()
        self.performance.enable_jit = True
        self.performance.benchmark_mode = True

    def _validate_configuration(self):
        """–°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ fallback'–æ–≤"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        from .config_validator import ConfigValidator
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        ConfigValidator.validate_full_config(self)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª—å—à–∏–µ —Ä–µ—à–µ—Ç–∫–∏ –±–µ–∑ –∫—ç—à–∞
            if self.lattice.total_cells > 5000 and (
                not self.cache or not self.cache.enabled
            ):
                logging.warning(
                    f"Large lattice ({self.lattice.total_cells} cells) "
                    "without cache may be slow"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤
            if self.model.state_size < 8:
                logging.warning("Very small state_size may limit model capacity")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (
                self.cache
                and self.cache.use_gpu_acceleration
                and not self.device.prefer_cuda
            ):
                logging.warning("GPU acceleration enabled but CUDA not preferred")

        except Exception as e:
            logging.error(f"Configuration validation failed: {e}")

    def _log_initialization(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logging.info("üîß SimpleProjectConfig initialized:")
        logging.info(
            f"   üìä Lattice: {self.lattice.dimensions} = {self.lattice.total_cells} cells"
        )
        logging.info(
            f"   üß† Model: {self.model.state_size}D state (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤)"
        )
        logging.info(f"   üñ•Ô∏è Device: {self.device_manager.get_device_str()}")

        if self.cache and self.cache.enabled:
            logging.info(
                f"   üíæ Cache: enabled (GPU: {self.cache.use_gpu_acceleration})"
            )
        if self.cnf and self.cnf.enabled:
            logging.info(f"   üåä CNF: enabled ({self.cnf.adaptive_method})")
        if self.embedding:
            logging.info(
                f"   üéØ Embeddings: {self.embedding.teacher_model} ({self.embedding.teacher_embedding_dim}D ‚Üí {self.cube_embedding_dim}D)"
            )

    @property
    def total_cells(self) -> int:
        """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ –≤ —Ä–µ—à–µ—Ç–∫–µ"""
        return self.lattice.total_cells

    @property
    def current_device(self) -> str:
        """–¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        return self.device_manager.get_device_str() if self.device_manager else "cpu"

    @property
    def max_neighbors(self) -> int:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.neighbors.max_neighbors if self.neighbors else 20000

    @property
    def cube_surface_dim(self) -> int:
        """–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫—É–±–∞ (–ø–µ—Ä–≤—ã–µ –¥–≤–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ—Ç–∫–∏)"""
        return self.lattice.dimensions[0]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫—É–±–∏—á–µ—Å–∫—É—é —Ä–µ—à–µ—Ç–∫—É

    @property
    def cube_embedding_dim(self) -> int:
        """–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö —ç–º–±–µ–¥–∏–Ω–≥–æ–≤ (surface_dim¬≤)"""
        surface_dim = self.cube_surface_dim
        return surface_dim * surface_dim

    @property
    def effective_max_chunk_size(self) -> int:
        """–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä chunk'–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–µ—à–µ—Ç–∫–∏"""
        config_max = (
            self.adaptive_chunker.max_chunk_size if self.adaptive_chunker else 64
        )
        # –î–ª—è –º–∞–ª—ã—Ö —Ä–µ—à–µ—Ç–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º chunk —Ä–∞–∑–º–µ—Ä–æ–º –≤ 1/4 —Ä–µ—à–µ—Ç–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π –æ—Å–∏
        max_dim = max(self.lattice.dimensions)
        quarter_lattice = max_dim // 4
        return min(config_max, max(quarter_lattice, 4))  # –º–∏–Ω–∏–º—É–º 4 –∫–ª–µ—Ç–∫–∏

    @property
    def effective_min_chunk_size(self) -> int:
        """–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä chunk'–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–µ—à–µ—Ç–∫–∏"""
        config_min = (
            self.adaptive_chunker.min_chunk_size if self.adaptive_chunker else 32
        )
        # –î–ª—è –º–∞–ª—ã—Ö —Ä–µ—à–µ—Ç–æ–∫ –¥–µ–ª–∞–µ–º min_chunk_size = 1/8 –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        max_dim = max(self.lattice.dimensions)
        eighth_lattice = max(max_dim // 8, 2)  # –º–∏–Ω–∏–º—É–º 2 –∫–ª–µ—Ç–∫–∏
        return min(config_min, eighth_lattice)

    def calculate_adaptive_radius(self) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–µ—à–µ—Ç–∫–∏.
        –§–æ—Ä–º—É–ª–∞: (max_dim * ratio), –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π min/max.
        """
        if not self.lattice.adaptive_radius_enabled:
            return self.lattice.adaptive_radius_max

        max_dim = max(self.lattice.dimensions)
        radius = max_dim * self.lattice.adaptive_radius_ratio

        return float(
            max(
                self.lattice.adaptive_radius_min,
                min(radius, self.lattice.adaptive_radius_max),
            )
        )
    
    def estimate_neighbors_in_radius(self, radius: float) -> int:
        """
        –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Å–µ–¥–µ–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –¥–ª—è 3D —Ä–µ—à–µ—Ç–∫–∏.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –æ–±—ä–µ–º–∞ —Å—Ñ–µ—Ä—ã —Å —É—á–µ—Ç–æ–º –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ—Ç–∫–∏.
        
        Args:
            radius: –†–∞–¥–∏—É—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ—Å–µ–¥–µ–π
            
        Returns:
            –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π
        """
        import math
        
        if radius <= 0:
            return 0
        
        # –û–±—ä–µ–º —Å—Ñ–µ—Ä—ã: 4/3 * œÄ * r¬≥
        volume = (4/3) * math.pi * (radius ** 3)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª–µ—Ç–æ–∫ –º–∏–Ω—É—Å 1 (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∞–º—É –∫–ª–µ—Ç–∫—É)
        total_cells = self.lattice.dimensions[0] * self.lattice.dimensions[1] * self.lattice.dimensions[2]
        estimated = min(int(volume), total_cells - 1)
        
        return estimated
    
    def get_neighbor_counts_by_type(self) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–≤—è–∑–µ–π
        –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ –∏ –ø–æ—Ä–æ–≥–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ—Å–µ–¥–µ–π –ø–æ —Ç–∏–ø–∞–º: {local, functional, distant}
        """
        adaptive_radius = self.calculate_adaptive_radius()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ä–æ–≥–∏
        local_threshold = adaptive_radius * self.lattice.local_distance_ratio
        functional_threshold = adaptive_radius * self.lattice.functional_distance_ratio
        distant_threshold = adaptive_radius * self.lattice.distant_distance_ratio
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–æ–≥–∞
        local_neighbors = self.estimate_neighbors_in_radius(local_threshold)
        functional_neighbors = self.estimate_neighbors_in_radius(functional_threshold) - local_neighbors
        distant_neighbors = self.estimate_neighbors_in_radius(distant_threshold) - local_neighbors - functional_neighbors
        
        return {
            "local": local_neighbors,
            "functional": functional_neighbors,
            "distant": distant_neighbors,
            "total": local_neighbors + functional_neighbors + distant_neighbors
        }

    def get_component(self, name: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏"""
        return getattr(self, name, None)

    def update_component(self, name: str, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            component = self.get_component(name)
            if component is None:
                return False

            for key, value in kwargs.items():
                if hasattr(component, key):
                    setattr(component, key, value)

            return True
        except Exception:
            return False

    def enable_research_mode(self):
        """–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if self.experiment is None:
            self.experiment = ExperimentSettings()
        if self.performance is None:
            self.performance = PerformanceSettings()
        if self.validation is None:
            self.validation = ValidationSettings()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        self.logging.debug_mode = False  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.logging.performance_tracking = True
        if self.cache:
            self.cache.enable_detailed_stats = True
        if self.performance:
            self.performance.profiling_enabled = True

    def enable_production_mode(self):
        """–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º production"""
        # –û—Ç–∫–ª—é—á–∞–µ–º debug —Ä–µ–∂–∏–º—ã - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —á–µ—Ä–µ–∑ LoggingSettings
        self.logging.debug_mode = False
        self.logging.level = "WARNING"
        # self.device.debug_mode = False  # –£–î–ê–õ–ï–ù–û - –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if self.performance is None:
            self.performance = PerformanceSettings()
        self.performance.enable_jit = True
        self.performance.benchmark_mode = True

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        if self.cache:
            self.cache.enable_detailed_stats = False
        self.logging.performance_tracking = False

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        result = {}

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        for field_name in ["lattice", "model", "training", "init", "device", "logging"]:
            component = getattr(self, field_name)
            result[field_name] = (
                component.__dict__ if hasattr(component, "__dict__") else component
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç)
        for field_name in [
            "cnf",
            "euler",
            "cache",
            "spatial",
            "unified_optimizer",
            "vectorized",
            "memory",
            "adaptive_chunker",
            "experiment",
            "performance",
            "validation",
            "embedding",
            "training_embedding",
            "neighbors",
            "expert",
        ]:
            component = getattr(self, field_name)
            if component is not None:
                result[field_name] = (
                    component.__dict__ if hasattr(component, "__dict__") else component
                )

        return result


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ===

_global_config: Optional[SimpleProjectConfig] = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é)
_global_migration_warned: bool = False


def get_project_config() -> SimpleProjectConfig:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global _global_config
    if _global_config is None:
        import warnings
        warnings.warn(
            "‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —è–≤–Ω–æ! "
            "–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (DEBUG —Ä–µ–∂–∏–º). "
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å set_project_config() –∏–ª–∏ create_*_config() —Ñ—É–Ω–∫—Ü–∏–∏ "
            "–≤ –Ω–∞—á–∞–ª–µ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —è–≤–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.",
            stacklevel=2
        )
        _global_config = create_debug_config()
    return _global_config


def set_project_config(config: SimpleProjectConfig):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global _global_config
    _global_config = config


def reset_project_config():
    """–°–±—Ä–æ—Å–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    global _global_config
    _global_config = None


def reset_migration_warning():
    """–°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
    global _global_migration_warned
    _global_migration_warned = False


# === –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò ===


def create_simple_config(**overrides) -> SimpleProjectConfig:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏"""
    config = SimpleProjectConfig()

    for key, value in overrides.items():
        if hasattr(config, key):
            setattr(config, key, value)

    return config


def create_debug_config(**overrides) -> SimpleProjectConfig:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º ModeSettings —Å –Ω—É–∂–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
    mode_settings = ModeSettings(mode=ConfigMode.DEBUG)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —ç—Ç–∏–º —Ä–µ–∂–∏–º–æ–º
    config = SimpleProjectConfig(mode=mode_settings)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    for key, value in overrides.items():
        if hasattr(config, key):
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if isinstance(value, dict) and hasattr(getattr(config, key), '__dict__'):
                component = getattr(config, key)
                for k, v in value.items():
                    if hasattr(component, k):
                        setattr(component, k, v)
            else:
                setattr(config, key, value)
    
    return config


def create_experiment_config(**overrides) -> SimpleProjectConfig:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º ModeSettings —Å –Ω—É–∂–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
    mode_settings = ModeSettings(mode=ConfigMode.EXPERIMENT)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —ç—Ç–∏–º —Ä–µ–∂–∏–º–æ–º
    config = SimpleProjectConfig(mode=mode_settings)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    for key, value in overrides.items():
        if hasattr(config, key):
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if isinstance(value, dict) and hasattr(getattr(config, key), '__dict__'):
                component = getattr(config, key)
                for k, v in value.items():
                    if hasattr(component, k):
                        setattr(component, k, v)
            else:
                setattr(config, key, value)
    
    return config


def create_optimized_config(**overrides) -> SimpleProjectConfig:
    """–°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥"""
    # –°–æ–∑–¥–∞–µ–º ModeSettings —Å –Ω—É–∂–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
    mode_settings = ModeSettings(mode=ConfigMode.OPTIMIZED)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —ç—Ç–∏–º —Ä–µ–∂–∏–º–æ–º
    config = SimpleProjectConfig(mode=mode_settings)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    for key, value in overrides.items():
        if hasattr(config, key):
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if isinstance(value, dict) and hasattr(getattr(config, key), '__dict__'):
                component = getattr(config, key)
                for k, v in value.items():
                    if hasattr(component, k):
                        setattr(component, k, v)
            else:
                setattr(config, key, value)
    
    return config


def create_research_config_simple(**overrides) -> SimpleProjectConfig:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
    config = SimpleProjectConfig()
    config.enable_research_mode()

    for key, value in overrides.items():
        if hasattr(config, key):
            setattr(config, key, value)

    return config


def create_production_config_simple(**overrides) -> SimpleProjectConfig:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è production"""
    config = SimpleProjectConfig()
    config.enable_production_mode()

    for key, value in overrides.items():
        if hasattr(config, key):
            setattr(config, key, value)

    return config


# === –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ ===

# –ê–ª–∏–∞—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º
ProjectConfig = SimpleProjectConfig  # –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ª–∏–∞—Å


def get_legacy_config():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è legacy –∫–æ–¥–∞"""
    return get_project_config()
