#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - Clean Architecture
============================================================

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤–º–µ—Å—Ç–æ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ dataclass'–æ–≤.
–ü—Ä–æ—Å—Ç–∞—è, —Ä–∞—Å—à–∏—Ä—è–µ–º–∞—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

–ü—Ä–∏–Ω—Ü–∏–ø—ã:
- –ö–æ–º–ø–æ–∑–∏—Ü–∏—è > –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ > –°–ª–æ–∂–Ω–æ—Å—Ç—å
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å > –ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º
"""

from dataclasses import dataclass, field
from typing import Optional, Dict, Any
import logging

from .config_components import (
    LatticeSettings,
    ModelSettings,
    TrainingSettings,
    CNFSettings,
    EulerSettings,
    CacheSettings,
    SpatialSettings,
    VectorizedSettings,
    DeviceSettings,
    LoggingSettings,
    MemorySettings,
    ExperimentSettings,
    PerformanceSettings,
    ValidationSettings,
    EmbeddingSettings,
    TrainingEmbeddingSettings,
    NeighborSettings,
    ExpertSettings,
    create_basic_config,
    create_research_config,
    validate_config_components,
)
from ..utils.device_manager import DeviceManager, get_device_manager


@dataclass
class SimpleProjectConfig:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

    –í–º–µ—Å—Ç–æ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ dataclass'–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
    –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.
    """

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç)
    lattice: LatticeSettings = field(default_factory=LatticeSettings)
    model: ModelSettings = field(default_factory=ModelSettings)
    training: TrainingSettings = field(default_factory=TrainingSettings)
    device: DeviceSettings = field(default_factory=DeviceSettings)
    logging: LoggingSettings = field(default_factory=LoggingSettings)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
    cnf: Optional[CNFSettings] = field(default_factory=CNFSettings)
    euler: Optional[EulerSettings] = field(default_factory=EulerSettings)
    cache: Optional[CacheSettings] = field(default_factory=CacheSettings)
    spatial: Optional[SpatialSettings] = field(default_factory=SpatialSettings)
    vectorized: Optional[VectorizedSettings] = field(default_factory=VectorizedSettings)
    memory: Optional[MemorySettings] = field(default_factory=MemorySettings)

    # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    experiment: Optional[ExperimentSettings] = None
    performance: Optional[PerformanceSettings] = None
    validation: Optional[ValidationSettings] = None

    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–±–µ–¥–∏–Ω–≥–∞–º–∏
    embedding: Optional[EmbeddingSettings] = field(default_factory=EmbeddingSettings)
    training_embedding: Optional[TrainingEmbeddingSettings] = field(
        default_factory=TrainingEmbeddingSettings
    )

    # MoE –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    neighbors: Optional[NeighborSettings] = field(default_factory=NeighborSettings)
    expert: Optional[ExpertSettings] = field(default_factory=ExpertSettings)

    # Runtime –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    device_manager: Optional[DeviceManager] = field(init=False, default=None)

    def __post_init__(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è device manager
        self.device_manager = get_device_manager(
            prefer_cuda=self.device.prefer_cuda, debug_mode=self.device.debug_mode
        )

        # –°–≤—è–∑—ã–≤–∞–µ–º cache —Å expert settings
        if self.expert and self.cache:
            self.expert.cache = self.cache

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if self.validation and self.validation.validate_config:
            self._validate_configuration()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if self.logging.debug_mode:
            self._log_initialization()

    def _validate_configuration(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª—å—à–∏–µ —Ä–µ—à–µ—Ç–∫–∏ –±–µ–∑ –∫—ç—à–∞
            if self.lattice.total_cells > 5000 and (
                not self.cache or not self.cache.enabled
            ):
                logging.warning(
                    f"Large lattice ({self.lattice.total_cells} cells) "
                    "without cache may be slow"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤
            if self.model.state_size < 8:
                logging.warning("Very small state_size may limit model capacity")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (
                self.cache
                and self.cache.use_gpu_acceleration
                and not self.device.prefer_cuda
            ):
                logging.warning("GPU acceleration enabled but CUDA not preferred")

        except Exception as e:
            logging.error(f"Configuration validation failed: {e}")

    def _log_initialization(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logging.info("üîß SimpleProjectConfig initialized:")
        logging.info(
            f"   üìä Lattice: {self.lattice.dimensions} = {self.lattice.total_cells} cells"
        )
        logging.info(
            f"   üß† Model: {self.model.state_size}D state, {self.model.target_params} params"
        )
        logging.info(f"   üñ•Ô∏è Device: {self.device_manager.get_device_str()}")

        if self.cache and self.cache.enabled:
            logging.info(
                f"   üíæ Cache: enabled (GPU: {self.cache.use_gpu_acceleration})"
            )
        if self.cnf and self.cnf.enabled:
            logging.info(f"   üåä CNF: enabled ({self.cnf.adaptive_method})")
        if self.embedding:
            logging.info(
                f"   üéØ Embeddings: {self.embedding.teacher_model} ({self.embedding.teacher_embedding_dim}D ‚Üí {self.embedding.cube_embedding_dim}D)"
            )

    @property
    def total_cells(self) -> int:
        """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ –≤ —Ä–µ—à–µ—Ç–∫–µ"""
        return self.lattice.total_cells

    @property
    def current_device(self) -> str:
        """–¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        return self.device_manager.get_device_str() if self.device_manager else "cpu"

    @property
    def max_neighbors(self) -> int:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.neighbors.max_neighbors if self.neighbors else 20000

    def calculate_adaptive_radius(self) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–µ—à–µ—Ç–∫–∏.
        –§–æ—Ä–º—É–ª–∞: (max_dim * ratio), –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π min/max.
        """
        if not self.lattice.adaptive_radius_enabled:
            return self.lattice.adaptive_radius_max

        max_dim = max(self.lattice.dimensions)
        radius = max_dim * self.lattice.adaptive_radius_ratio

        return float(
            max(
                self.lattice.adaptive_radius_min,
                min(radius, self.lattice.adaptive_radius_max),
            )
        )

    def get_component(self, name: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏"""
        return getattr(self, name, None)

    def update_component(self, name: str, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            component = self.get_component(name)
            if component is None:
                return False

            for key, value in kwargs.items():
                if hasattr(component, key):
                    setattr(component, key, value)

            return True
        except Exception:
            return False

    def enable_research_mode(self):
        """–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if self.experiment is None:
            self.experiment = ExperimentSettings()
        if self.performance is None:
            self.performance = PerformanceSettings()
        if self.validation is None:
            self.validation = ValidationSettings()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        self.logging.debug_mode = True
        self.logging.performance_tracking = True
        if self.cache:
            self.cache.enable_detailed_stats = True
        if self.performance:
            self.performance.profiling_enabled = True

    def enable_production_mode(self):
        """–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º production"""
        # –û—Ç–∫–ª—é—á–∞–µ–º debug —Ä–µ–∂–∏–º—ã
        self.logging.debug_mode = False
        self.logging.level = "WARNING"
        self.device.debug_mode = False

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if self.performance is None:
            self.performance = PerformanceSettings()
        self.performance.enable_jit = True
        self.performance.benchmark_mode = True

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
        if self.cache:
            self.cache.enable_detailed_stats = False
        self.logging.performance_tracking = False

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        result = {}

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        for field_name in ["lattice", "model", "training", "device", "logging"]:
            component = getattr(self, field_name)
            result[field_name] = (
                component.__dict__ if hasattr(component, "__dict__") else component
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç)
        for field_name in [
            "cnf",
            "euler",
            "cache",
            "spatial",
            "vectorized",
            "memory",
            "experiment",
            "performance",
            "validation",
            "embedding",
            "training_embedding",
            "neighbors",
            "expert",
        ]:
            component = getattr(self, field_name)
            if component is not None:
                result[field_name] = (
                    component.__dict__ if hasattr(component, "__dict__") else component
                )

        return result


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ===

_global_config: Optional[SimpleProjectConfig] = None


def get_project_config() -> SimpleProjectConfig:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global _global_config
    if _global_config is None:
        _global_config = SimpleProjectConfig()
    return _global_config


def set_project_config(config: SimpleProjectConfig):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global _global_config
    _global_config = config


def reset_project_config():
    """–°–±—Ä–æ—Å–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    global _global_config
    _global_config = None


# === –§–ê–ë–†–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò ===


def create_simple_config(**overrides) -> SimpleProjectConfig:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏"""
    config = SimpleProjectConfig()

    for key, value in overrides.items():
        if hasattr(config, key):
            setattr(config, key, value)

    return config


def create_research_config_simple(**overrides) -> SimpleProjectConfig:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
    config = SimpleProjectConfig()
    config.enable_research_mode()

    for key, value in overrides.items():
        if hasattr(config, key):
            setattr(config, key, value)

    return config


def create_production_config_simple(**overrides) -> SimpleProjectConfig:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è production"""
    config = SimpleProjectConfig()
    config.enable_production_mode()

    for key, value in overrides.items():
        if hasattr(config, key):
            setattr(config, key, value)

    return config


# === –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ ===

# –ê–ª–∏–∞—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º
ProjectConfig = SimpleProjectConfig  # –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ª–∏–∞—Å


def get_legacy_config():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è legacy –∫–æ–¥–∞"""
    return get_project_config()
