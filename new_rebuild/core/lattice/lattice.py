"""
–ú–æ–¥—É–ª—å 3D –†–µ—à–µ—Ç–∫–∞ –∫–ª–µ—Ç–æ–∫ –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
==========================================

–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Lattice3D, —Ä–∞–±–æ—Ç–∞—é—â–∞—è —Ç–æ–ª—å–∫–æ —Å MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å spatial optimization –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫.

–ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –¢–û–õ–¨–ö–û MoE
- –ë–∞–∑–æ–≤—ã–µ –∫–ª–µ—Ç–∫–∏: GNN Cell
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤—è–∑–µ–π: MoE Connection Processor —Å spatial optimization
- –£–±—Ä–∞–Ω–∞ legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import torch
import torch.nn as nn
from typing import List, Dict, Optional, Any
import time
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ new_rebuild
from ...config import get_project_config
# from ..cells import create_cell  # –ù–µ –Ω—É–∂–µ–Ω –≤ MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ lattice –º–æ–¥—É–ª—è
from .enums import Face
from .io import IOPointPlacer
from .position import Position3D

# Unified Spatial optimization –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from .spatial_optimization.unified_spatial_optimizer import (
    create_unified_spatial_optimizer,
    OptimizationConfig,
    OptimizationMode,
)
from ...utils.logging import get_logger

logger = get_logger(__name__)


class Lattice3D(nn.Module):
    """
    –¢—Ä—ë—Ö–º–µ—Ä–Ω–∞—è —Ä–µ—à—ë—Ç–∫–∞ –∫–ª–µ—Ç–æ–∫ –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.

    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, —Ä–∞–±–æ—Ç–∞—é—â–∞—è —Ç–æ–ª—å–∫–æ —Å:
    - MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ MoE Connection Processor
    - GNN –±–∞–∑–æ–≤—ã–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏
    - Spatial optimization –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ—Ç–∫–∏ –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
        """
        super().__init__()
        self.config = get_project_config()
        self.device = torch.device(self.config.current_device)
        self.pos_helper = Position3D(self.config.lattice.dimensions)
        self.logger = logger

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        from ...utils.logging import log_init

        if self.config.logging.debug_mode:
            logger.info(f"üîß –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Lattice3D –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
            log_init(
                "Lattice3D_MoE",
                dimensions=self.config.lattice.dimensions,
                total_cells=self.pos_helper.total_positions,
                architecture="moe",
                device=str(self.device),
            )

        # –í MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∫–ª–µ—Ç–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        # self.cells –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

        # Unified Spatial Optimizer —Å MoE –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        spatial_config = OptimizationConfig(
            enable_morton_encoding=self.config.lattice.enable_morton_encoding,
            target_performance_ms=self.config.lattice.target_performance_ms,
        )

        # –°–æ–∑–¥–∞–µ–º MoE processor –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.moe_processor = self._create_moe_processor()
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å MoE processor
        self.spatial_optimizer = create_unified_spatial_optimizer(
            dimensions=self.config.lattice.dimensions, config=spatial_config
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MoE processor –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        self.spatial_optimizer.moe_processor = self.moe_processor
        
        # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ spatial optimizer –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω MoE processor'—É
        # —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫—ç—à –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π

        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ I/O —Ç–æ—á–µ–∫
        from .enums import PlacementStrategy

        self.io_placer = IOPointPlacer(
            lattice_dimensions=self.config.lattice.dimensions,
            strategy=PlacementStrategy.FULL_FACE,
            config={},
            seed=self.config.init.seed,
        )

        # I/O —Ç–æ—á–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º FRONT –∏ BACK)
        self.input_points = self.io_placer.get_input_points(Face.FRONT)
        self.output_points = self.io_placer.get_output_points(Face.BACK)
        self.input_indices = [
            self.pos_helper.to_linear_index(p) for p in self.input_points
        ]
        self.output_indices = [
            self.pos_helper.to_linear_index(p) for p in self.output_points
        ]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫
        self.states = self._initialize_states()

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.perf_stats = {
            "total_steps": 0,
            "total_time": 0.0,
            "avg_time_per_step": 0.0,
        }

        if self.config.logging.debug_mode:
            logger.info(
                f"‚úÖ Lattice3D MoE initialized successfully:\n"
                f"     INPUT_POINTS: {len(self.input_points)}\n"
                f"     OUTPUT_POINTS: {len(self.output_points)}\n"
                f"     CELL_TYPE: MoE (Multiple Experts)\n"
                f"     SPATIAL_OPTIMIZER: {type(self.spatial_optimizer).__name__}"
            )


    def _create_moe_processor(self):
        """–°–æ–∑–¥–∞—ë—Ç MoE processor –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        from ..moe import create_moe_connection_processor

        return create_moe_connection_processor(
            dimensions=self.config.lattice.dimensions,
            state_size=self.config.model.state_size,
            device=self.device,
        )

    def _initialize_states(self) -> torch.Tensor:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–Ω–∑–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫.
        """
        state_size = self.config.model.state_size

        dims = (self.pos_helper.total_positions, state_size)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–ª—ã–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        torch.manual_seed(self.config.init.seed)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        states = torch.randn(*dims, device=self.device, dtype=torch.float32) * 0.1

        if self.config.logging.debug_mode:
            logger.info(f"States initialized with shape: {states.shape}")

        return states

    def forward(self, external_inputs: Optional[torch.Tensor] = None) -> torch.Tensor:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —à–∞–≥ forward pass —á–µ—Ä–µ–∑ —Ä–µ—à–µ—Ç–∫—É —Å MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.

        Args:
            external_inputs: –í–Ω–µ—à–Ω–∏–µ –≤—Ö–æ–¥—ã –¥–ª—è –∫–ª–µ—Ç–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            torch.Tensor: –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫
        """
        start_time = time.time()

        self.logger.info(f"üöÄ LATTICE FORWARD: states shape {self.states.shape}")
        self.logger.info(f"üöÄ LATTICE DIMENSIONS: {self.config.lattice.dimensions}")

        # MoE processor —É–∂–µ —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

        # DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
        import numpy as np
        expected_cells = np.prod(self.config.lattice.dimensions)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: states –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å [total_cells, state_size], –ø–æ—ç—Ç–æ–º—É shape[0] = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫
        actual_cells = self.states.shape[0]
        if expected_cells != actual_cells:
            self.logger.error(f"‚ùå DIMENSION MISMATCH: Expected {expected_cells} cells from lattice {self.config.lattice.dimensions}, but states has {actual_cells} cells")
            self.logger.error(f"States shape: {self.states.shape}")
            self.logger.error(f"Expected shape: [{expected_cells}, {self.config.model.state_size}]")
            raise RuntimeError(f"Lattice dimensions mismatch: expected {expected_cells} cells, got {actual_cells}")

        # Unified Spatial Optimizer –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–π —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        optimization_result = self.spatial_optimizer.optimize_lattice_forward(
            self.states
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        new_states = optimization_result.new_states

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω debug —Ä–µ–∂–∏–º
        if self.config.logging.debug_mode:
            self.logger.info(
                f"Spatial optimization: {optimization_result.processing_time_ms:.1f}ms, "
                f"—Ä–µ–∂–∏–º: {optimization_result.mode_used.value}, "
                f"–ø–∞–º—è—Ç—å: {optimization_result.memory_usage_mb:.1f}MB"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.states = new_states

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        step_time = time.time() - start_time
        self._update_performance_stats(step_time, optimization_result)

        return self.states

    def _update_performance_stats(self, step_time: float, optimization_result=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        self.perf_stats["total_steps"] += 1
        self.perf_stats["total_time"] += step_time
        self.perf_stats["avg_time_per_step"] = (
            self.perf_stats["total_time"] / self.perf_stats["total_steps"]
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        if optimization_result:
            self.perf_stats["spatial_optimization"] = {
                "processing_time_ms": optimization_result.processing_time_ms,
                "mode_used": optimization_result.mode_used.value,
                "memory_usage_mb": optimization_result.memory_usage_mb,
                "gpu_utilization": optimization_result.gpu_utilization,
                "neighbors_found": optimization_result.neighbors_found,
                "cache_hit_rate": optimization_result.cache_hit_rate,
            }

    def get_states(self) -> torch.Tensor:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫."""
        return self.states

    def set_states(self, new_states: torch.Tensor):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫."""
        if new_states.shape != self.states.shape:
            raise ValueError(
                f"Shape mismatch: expected {self.states.shape}, got {new_states.shape}"
            )
        self.states = new_states.to(self.device)

    def get_face_states(self, face: Face) -> torch.Tensor:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä–∞–Ω–∏."""
        face_coords = self.io_placer._get_face_coordinates(face)
        face_indices = [self.pos_helper.to_linear_index(coord) for coord in face_coords]
        return self.states[face_indices]

    def get_output_states(self) -> torch.Tensor:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫."""
        return self.states[self.output_indices]

    def get_input_states(self) -> torch.Tensor:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫."""
        return self.states[self.input_indices]

    def set_input_states(self, input_states: torch.Tensor):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫."""
        if input_states.shape[0] != len(self.input_indices):
            raise ValueError(
                f"Input states count {input_states.shape[0]} "
                f"doesn't match input points {len(self.input_indices)}"
            )
        self.states[self.input_indices] = input_states.to(self.device)

    def reset_states(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º."""
        self.states = self._initialize_states()

    def get_performance_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        return dict(self.perf_stats)

    def get_io_point_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–∞—Ö –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞."""
        return {
            "input_points": len(self.input_points),
            "output_points": len(self.output_points),
            "input_indices": self.input_indices,
            "output_indices": self.output_indices,
            "input_coordinates": self.input_points,
            "output_coordinates": self.output_points,
        }

    def validate_lattice(self) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ—à–µ—Ç–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        stats = {
            "dimensions": self.config.lattice.dimensions,
            "total_cells": self.pos_helper.total_positions,
            "architecture_type": "moe",
            "device": str(self.device),
            "state_shape": list(self.states.shape),
            "input_points": len(self.input_points),
            "output_points": len(self.output_points),
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        if hasattr(self.spatial_optimizer, "get_comprehensive_stats"):
            stats["spatial_optimizer"] = (
                self.spatial_optimizer.get_comprehensive_stats()
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ—Ç–∫–∞—Ö
        # –í MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–µ—Ç–∫–∞—Ö —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —ç–∫—Å–ø–µ—Ä—Ç–∞—Ö
        if hasattr(self.moe_processor, "get_info"):
            stats["moe_info"] = self.moe_processor.get_info()

        return stats

    def cleanup(self):
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞."""
        if hasattr(self.spatial_optimizer, "cleanup"):
            self.spatial_optimizer.cleanup()
            self.logger.info("üßπ Unified Spatial Optimizer —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            self.cleanup()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–µ—Å—Ç—Ä—É–∫—Ü–∏–∏


def create_lattice() -> Lattice3D:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è MoE —Ä–µ—à–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ProjectConfig.
    """
    return Lattice3D()
