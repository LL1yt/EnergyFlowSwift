#!/usr/bin/env python3
"""
Vectorized Spatial Processor - –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ—Ç–∫–∏
========================================================================

–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π spatial processor —Å batch processing –¥–ª—è maximum performance.
–ò—Å–∫–ª—é—á–∞–µ—Ç –≤—Å–µ sequential –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ü–∏–∫–ª—ã.

–ö–õ–Æ–ß–ï–í–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
1. ‚úÖ Batch Neighbor Finding - –≤—Å–µ —Å–æ—Å–µ–¥–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
2. ‚úÖ Vectorized Cell Processing - –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É
3. ‚úÖ GPU Memory Optimization - efficient tensor operations
4. ‚úÖ Adaptive Batch Sizing - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –±–∞—Ç—á–µ–π –¥–ª—è GPU
"""

import torch
import torch.nn as nn
from typing import List, Dict, Any, Optional, Callable, Tuple
import time

from ...config import get_project_config
from ...utils.logging import get_logger
from ...utils.device_manager import get_device_manager
from .position import Position3D
from .gpu_spatial_hashing import GPUSpatialHashGrid

logger = get_logger(__name__)


class VectorizedNeighborFinder:
    """
    –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π –¥–ª—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ —Å—Ä–∞–∑—É

    –ò—Å–∫–ª—é—á–∞–µ—Ç —Ü–∏–∫–ª—ã –∏ sequential –æ–ø–µ—Ä–∞—Ü–∏–∏
    """

    def __init__(self, dimensions: Tuple[int, int, int], device: torch.device):
        self.dimensions = dimensions
        self.device = device
        self.pos_helper = Position3D(dimensions)

        # GPU spatial hash –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.spatial_hash = GPUSpatialHashGrid(
            dimensions=dimensions,
            cell_size=2,
        )

        # –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫
        self.all_coordinates = self._precompute_all_coordinates()

        # –ó–∞–ø–æ–ª–Ω—è–µ–º spatial hash
        self._populate_spatial_hash()

    def _precompute_all_coordinates(self) -> torch.Tensor:
        """–ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –≤ —Ä–µ—à–µ—Ç–∫–µ"""
        total_cells = self.dimensions[0] * self.dimensions[1] * self.dimensions[2]

        coordinates = []
        for cell_idx in range(total_cells):
            coords = self.pos_helper.to_3d_coordinates(cell_idx)
            coordinates.append(coords)

        return torch.tensor(coordinates, device=self.device, dtype=torch.float32)

    def _populate_spatial_hash(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ–º spatial hash –≤—Å–µ–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏"""
        total_cells = self.all_coordinates.shape[0]
        indices = torch.arange(total_cells, device=self.device)

        self.spatial_hash.insert_batch(self.all_coordinates, indices)

        logger.debug(f"üìç Spatial hash populated with {total_cells} cells")

    def find_neighbors_batch(
        self,
        cell_indices: torch.Tensor,
        search_radius: float,
        max_neighbors: int = 1000,
    ) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π –¥–ª—è batch –∫–ª–µ—Ç–æ–∫

        Args:
            cell_indices: [batch] - –∏–Ω–¥–µ–∫—Å—ã –∫–ª–µ—Ç–æ–∫
            search_radius: —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
            max_neighbors: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –Ω–∞ –∫–ª–µ—Ç–∫—É

        Returns:
            neighbor_indices: [batch, max_neighbors] - –∏–Ω–¥–µ–∫—Å—ã —Å–æ—Å–µ–¥–µ–π (padded —Å -1)
            neighbor_mask: [batch, max_neighbors] - –º–∞—Å–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
        """
        batch_size = cell_indices.shape[0]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è batch –∫–ª–µ—Ç–æ–∫
        batch_coordinates = self.all_coordinates[cell_indices]

        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π —á–µ—Ä–µ–∑ spatial hash
        neighbor_lists = self.spatial_hash.query_radius_batch(
            batch_coordinates, search_radius
        )

        # –°–æ–∑–¥–∞–µ–º padded tensor –¥–ª—è —Å–æ—Å–µ–¥–µ–π
        neighbor_indices = torch.full(
            (batch_size, max_neighbors), -1, device=self.device, dtype=torch.long
        )
        neighbor_mask = torch.zeros(
            (batch_size, max_neighbors), device=self.device, dtype=torch.bool
        )

        # –ó–∞–ø–æ–ª–Ω—è–µ–º tensor —Å–æ—Å–µ–¥—è–º–∏
        for i, neighbors in enumerate(neighbor_lists):
            if len(neighbors) > 0:
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º—É –∫–ª–µ—Ç–∫—É –∏–∑ —Å–æ—Å–µ–¥–µ–π
                neighbors = neighbors[neighbors != cell_indices[i]]

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π
                num_neighbors = min(len(neighbors), max_neighbors)
                if num_neighbors > 0:
                    neighbor_indices[i, :num_neighbors] = neighbors[:num_neighbors]
                    neighbor_mask[i, :num_neighbors] = True

        return neighbor_indices, neighbor_mask


class VectorizedSpatialProcessor:
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π spatial processor

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—é —Ä–µ—à–µ—Ç–∫—É –±–µ–∑ —Ü–∏–∫–ª–æ–≤ –∏ sequential –æ–ø–µ—Ä–∞—Ü–∏–π
    """

    def __init__(self, dimensions: Tuple[int, int, int]):
        self.dimensions = dimensions
        self.device_manager = get_device_manager()
        self.device = self.device_manager.get_device()

        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π
        self.neighbor_finder = VectorizedNeighborFinder(dimensions, self.device)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = get_project_config()
        self.search_radius = config.calculate_adaptive_radius()
        self.max_neighbors = config.calculate_dynamic_neighbors()

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        self.optimal_batch_size = self._calculate_optimal_batch_size()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            "total_forward_passes": 0,
            "total_processing_time": 0.0,
            "avg_batch_time": 0.0,
            "cells_per_second": 0.0,
        }

        logger.info(f"üöÄ VectorizedSpatialProcessor initialized:")
        logger.info(f"   Dimensions: {dimensions}")
        logger.info(f"   Search radius: {self.search_radius:.2f}")
        logger.info(f"   Max neighbors: {self.max_neighbors}")
        logger.info(f"   Optimal batch size: {self.optimal_batch_size}")

    def _calculate_optimal_batch_size(self) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è GPU"""
        total_cells = self.dimensions[0] * self.dimensions[1] * self.dimensions[2]

        if self.device_manager.is_cuda():
            # GPU: –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏, –º–æ–∂–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –±–∞—Ç—á–∏
            memory_stats = self.device_manager.get_memory_stats()
            available_mb = memory_stats.get("available_mb", 8000)

            if available_mb > 16000:  # >16GB
                return min(total_cells, 8000)
            elif available_mb > 8000:  # >8GB
                return min(total_cells, 4000)
            else:  # <8GB
                return min(total_cells, 2000)
        else:
            # CPU: –º–µ–Ω—å—à–∏–µ –±–∞—Ç—á–∏
            return min(total_cells, 1000)

    def process_lattice_vectorized(
        self, states: torch.Tensor, cell_processor: Callable, **kwargs
    ) -> torch.Tensor:
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ—Ç–∫–∏

        Args:
            states: [total_cells, state_size] - —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫
            cell_processor: —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–µ—Ç–æ–∫ (–¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å batch)

        Returns:
            new_states: [total_cells, state_size] - –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        start_time = time.time()

        states = self.device_manager.ensure_device(states)
        total_cells, state_size = states.shape

        logger.info(f"üöÄ Vectorized processing {total_cells:,} cells...")

        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä
        new_states = torch.empty_like(states)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        num_batches = (
            total_cells + self.optimal_batch_size - 1
        ) // self.optimal_batch_size

        for batch_idx in range(num_batches):
            batch_start = batch_idx * self.optimal_batch_size
            batch_end = min(batch_start + self.optimal_batch_size, total_cells)

            # –ò–Ω–¥–µ–∫—Å—ã –∫–ª–µ—Ç–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º –±–∞—Ç—á–µ
            batch_cell_indices = torch.arange(
                batch_start, batch_end, device=self.device, dtype=torch.long
            )

            # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π –¥–ª—è –≤—Å–µ–≥–æ –±–∞—Ç—á–∞
            neighbor_indices, neighbor_mask = self.neighbor_finder.find_neighbors_batch(
                batch_cell_indices, self.search_radius, self.max_neighbors
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–∞—Ç—á–∞
            batch_states = states[batch_cell_indices]  # [batch_size, state_size]

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å–µ–¥–µ–π (–≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ)
            batch_neighbor_states = self._get_neighbor_states_vectorized(
                states, neighbor_indices, neighbor_mask
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Å—å –±–∞—Ç—á —Å—Ä–∞–∑—É —á–µ—Ä–µ–∑ cell_processor
            batch_new_states = cell_processor(
                neighbor_states=batch_neighbor_states,
                own_state=batch_states,
                cell_indices=batch_cell_indices,
                neighbor_indices=neighbor_indices,
                neighbor_mask=neighbor_mask,
                **kwargs,
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            new_states[batch_start:batch_end] = batch_new_states

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        processing_time = time.time() - start_time
        self._update_performance_stats(total_cells, processing_time)

        logger.info(f"‚úÖ Vectorized processing completed in {processing_time:.3f}s")
        logger.info(f"   Performance: {total_cells/processing_time:.0f} cells/second")

        return new_states

    def _get_neighbor_states_vectorized(
        self,
        all_states: torch.Tensor,
        neighbor_indices: torch.Tensor,
        neighbor_mask: torch.Tensor,
    ) -> torch.Tensor:
        """
        –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ—Å–µ–¥–µ–π

        Args:
            all_states: [total_cells, state_size] - –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            neighbor_indices: [batch, max_neighbors] - –∏–Ω–¥–µ–∫—Å—ã —Å–æ—Å–µ–¥–µ–π
            neighbor_mask: [batch, max_neighbors] - –º–∞—Å–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π

        Returns:
            neighbor_states: [batch, max_neighbors, state_size] - —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å–µ–¥–µ–π
        """
        batch_size, max_neighbors = neighbor_indices.shape
        state_size = all_states.shape[1]

        # –°–æ–∑–¥–∞–µ–º tensor –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ—Å–µ–¥–µ–π
        neighbor_states = torch.zeros(
            batch_size,
            max_neighbors,
            state_size,
            device=self.device,
            dtype=all_states.dtype,
        )

        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
        valid_indices = neighbor_indices[neighbor_mask]
        if len(valid_indices) > 0:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
            valid_states = all_states[valid_indices]

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            neighbor_states[neighbor_mask] = valid_states

        return neighbor_states

    def process_with_moe(
        self, states: torch.Tensor, moe_processor: nn.Module, **kwargs
    ) -> torch.Tensor:
        """
        –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

        Args:
            states: [total_cells, state_size] - —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫
            moe_processor: MoE –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å batch support

        Returns:
            new_states: [total_cells, state_size] - –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """

        def moe_cell_processor(
            neighbor_states: torch.Tensor,
            own_state: torch.Tensor,
            cell_indices: torch.Tensor,
            neighbor_indices: torch.Tensor,
            neighbor_mask: torch.Tensor,
            **proc_kwargs,
        ) -> torch.Tensor:
            """Wrapper –¥–ª—è MoE –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch –º–µ—Ç–æ–¥ MoE –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            result = moe_processor.forward_batch(
                batch_states=own_state,
                batch_neighbor_states=neighbor_states,
                batch_cell_indices=cell_indices,
                batch_neighbor_indices=neighbor_indices,
                full_lattice_states=states,
                **proc_kwargs,
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if isinstance(result, dict) and "new_states" in result:
                return result["new_states"]
            else:
                return result

        return self.process_lattice_vectorized(states, moe_cell_processor, **kwargs)

    def _update_performance_stats(self, total_cells: int, processing_time: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.performance_stats["total_forward_passes"] += 1
        self.performance_stats["total_processing_time"] += processing_time
        self.performance_stats["avg_batch_time"] = (
            self.performance_stats["total_processing_time"]
            / self.performance_stats["total_forward_passes"]
        )
        self.performance_stats["cells_per_second"] = total_cells / processing_time

    def get_performance_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            "architecture": "vectorized_spatial_processor",
            "optimization": "full_vectorization",
            "sequential_operations": 0,  # –ù–ï–¢ —Ü–∏–∫–ª–æ–≤!
            "optimal_batch_size": self.optimal_batch_size,
            "search_radius": self.search_radius,
            "max_neighbors": self.max_neighbors,
            "performance": self.performance_stats.copy(),
            "device": str(self.device),
            "memory_stats": self.device_manager.get_memory_stats(),
        }

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.device_manager.cleanup()
        logger.debug("üßπ VectorizedSpatialProcessor cleaned up")
