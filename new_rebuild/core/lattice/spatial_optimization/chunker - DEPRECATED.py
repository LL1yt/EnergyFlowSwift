#!/usr/bin/env python3
"""
Lattice Chunker - –†–∞–∑–±–∏–≤–∫–∞ —Ä–µ—à–µ—Ç–æ–∫ –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —á–∞—Å—Ç–∏
======================================================

LatticeChunker –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ —Ä–µ—à–µ—Ç–∫–∏ –Ω–∞ —á–∞—Å—Ç–∏,
–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ GPU –ø–∞–º—è—Ç—å, —Å —É—á–µ—Ç–æ–º —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É chunk'–∞–º–∏.
"""

from typing import List
from ....config.project_config import ChunkInfo
from ....config.project_config import get_project_config
from ..spatial_hashing import Coordinates3D
from ..position import Position3D
from ....utils.logging import get_logger

logger = get_logger(__name__)


class LatticeChunker:
    """
    ‚ö†Ô∏è DEPRECATED: –†–∞–∑–±–∏–≤–∫–∞ –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫ –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ chunk'–∏
    ============================================================

    üö® –£–°–¢–ê–†–ï–õ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AdaptiveGPUChunker –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ä–µ—à–µ—Ç–∫—É –Ω–∞ —á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ GPU –ø–∞–º—è—Ç—å,
    —Å —É—á–µ—Ç–æ–º —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É chunk'–∞–º–∏.

    –ó–ê–ú–ï–ù–ï–ù –ù–ê: new_rebuild.core.lattice.spatial_optimization.adaptive_chunker.AdaptiveGPUChunker
    –ü–†–ò–ß–ò–ù–ê: GPU acceleration, adaptive memory management, better performance

    DEPRECATED —Å 28 –¥–µ–∫–∞–±—Ä—è 2025. –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤ –≤–µ—Ä—Å–∏–∏ 2.0.
    """

    def __init__(self, dimensions: Coordinates3D, config: dict = None):
        self.dimensions = dimensions
        self.config = config or get_project_config().get_spatial_optim_config()
        self.pos_helper = Position3D(dimensions)

        self.chunks: List[ChunkInfo] = []
        self._create_chunks()

        logger.info(f"üß© LatticeChunker —Å–æ–∑–¥–∞–ª {len(self.chunks)} chunk'–æ–≤")

    def _create_chunks(self):
        """–°–æ–∑–¥–∞–µ—Ç chunk'–∏ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º"""
        x_dim, y_dim, z_dim = self.dimensions
        chunk_size = self.config["chunk_size"]

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ chunk'–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π –æ—Å–∏
        x_chunks = max(1, (x_dim + chunk_size - 1) // chunk_size)
        y_chunks = max(1, (y_dim + chunk_size - 1) // chunk_size)
        z_chunks = max(1, (z_dim + chunk_size - 1) // chunk_size)

        chunk_id = 0

        for z_idx in range(z_chunks):
            for y_idx in range(y_chunks):
                for x_idx in range(x_chunks):
                    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã chunk'–∞
                    start_x = x_idx * chunk_size
                    start_y = y_idx * chunk_size
                    start_z = z_idx * chunk_size

                    end_x = min(start_x + chunk_size, x_dim)
                    end_y = min(start_y + chunk_size, y_dim)
                    end_z = min(start_z + chunk_size, z_dim)

                    # –°–æ–∑–¥–∞–µ–º chunk info
                    chunk_info = self._create_chunk_info(
                        chunk_id, (start_x, start_y, start_z), (end_x, end_y, end_z)
                    )

                    self.chunks.append(chunk_info)
                    chunk_id += 1

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ chunk'–∏
        self._compute_neighbor_chunks()

    def _create_chunk_info(
        self, chunk_id: int, start: Coordinates3D, end: Coordinates3D
    ) -> ChunkInfo:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ chunk'–µ"""
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–ª–µ—Ç–∫–∏ –≤ chunk'–µ
        cell_indices = []
        for z in range(start[2], end[2]):
            for y in range(start[1], end[1]):
                for x in range(start[0], end[0]):
                    cell_idx = self.pos_helper.to_linear_index((x, y, z))
                    cell_indices.append(cell_idx)

        # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–º—è—Ç–∏
        num_cells = len(cell_indices)
        memory_size_mb = num_cells * 32 * 4 / (1024**2)  # float32 —Å–æ—Å—Ç–æ—è–Ω–∏—è

        return ChunkInfo(
            chunk_id=chunk_id,
            start_coords=start,
            end_coords=end,
            cell_indices=cell_indices,
            neighbor_chunks=[],  # –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
            memory_size_mb=memory_size_mb,
        )

    def _compute_neighbor_chunks(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ chunk'–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chunk'–∞"""
        for chunk in self.chunks:
            neighbor_chunk_ids = []

            for other_chunk in self.chunks:
                if chunk.chunk_id != other_chunk.chunk_id:
                    if self._are_chunks_neighbors(chunk, other_chunk):
                        neighbor_chunk_ids.append(other_chunk.chunk_id)

            chunk.neighbor_chunks = neighbor_chunk_ids

    def _are_chunks_neighbors(self, chunk1: ChunkInfo, chunk2: ChunkInfo) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ chunk'–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏"""
        overlap = self.config["chunk_overlap"]

        # –†–∞—Å—à–∏—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã chunk1 –Ω–∞ overlap
        start1 = (
            max(0, chunk1.start_coords[0] - overlap),
            max(0, chunk1.start_coords[1] - overlap),
            max(0, chunk1.start_coords[2] - overlap),
        )
        end1 = (
            min(self.dimensions[0], chunk1.end_coords[0] + overlap),
            min(self.dimensions[1], chunk1.end_coords[1] + overlap),
            min(self.dimensions[2], chunk1.end_coords[2] + overlap),
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å chunk2
        return (
            start1[0] < chunk2.end_coords[0]
            and end1[0] > chunk2.start_coords[0]
            and start1[1] < chunk2.end_coords[1]
            and end1[1] > chunk2.start_coords[1]
            and start1[2] < chunk2.end_coords[2]
            and end1[2] > chunk2.start_coords[2]
        )

    def get_chunk_by_coords(self, coords: Coordinates3D) -> ChunkInfo:
        """–ù–∞—Ö–æ–¥–∏—Ç chunk –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        for chunk in self.chunks:
            if (
                chunk.start_coords[0] <= coords[0] < chunk.end_coords[0]
                and chunk.start_coords[1] <= coords[1] < chunk.end_coords[1]
                and chunk.start_coords[2] <= coords[2] < chunk.end_coords[2]
            ):
                return chunk

        raise ValueError(f"Chunk –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {coords}")

    def get_processing_schedule(self) -> List[List[int]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ chunk'–æ–≤

        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç chunk'–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–∞–º—è—Ç–∏
        –∏ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.
        """
        remaining_chunks = set(range(len(self.chunks)))
        schedule = []

        while remaining_chunks:
            # –í—ã–±–∏—Ä–∞–µ–º batch chunk'–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            current_batch = []
            used_neighbors = set()

            for chunk_id in list(remaining_chunks):
                chunk = self.chunks[chunk_id]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç chunk –≤ —Ç–µ–∫—É—â–∏–π batch
                conflicts = set(chunk.neighbor_chunks) & used_neighbors

                if (
                    not conflicts
                    and len(current_batch) < self.config["max_chunks_in_memory"]
                ):
                    current_batch.append(chunk_id)
                    used_neighbors.add(chunk_id)
                    used_neighbors.update(chunk.neighbor_chunks)

            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ chunk'–∏
            for chunk_id in current_batch:
                remaining_chunks.remove(chunk_id)

            schedule.append(current_batch)

        logger.debug(f"   üìÖ –°–æ–∑–¥–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {len(schedule)} batch'–µ–π")
        return schedule
