#!/usr/bin/env python3
"""
–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
============================================

HierarchicalSpatialIndex –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π
–≤ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö (1M+ –∫–ª–µ—Ç–æ–∫).
"""

from typing import List, Set
from ..spatial_hashing import SpatialHashGrid, Coordinates3D
from ....config.project_config import get_project_config
from ....utils.logging import get_logger

logger = get_logger(__name__)


class HierarchicalSpatialIndex:
    """
    –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ

    –°–æ–∑–¥–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é spatial hash grid'–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    –≤ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö (1M+ –∫–ª–µ—Ç–æ–∫).
    """

    def __init__(self, dimensions: Coordinates3D, config: dict = None):
        self.dimensions = dimensions
        self.config = config or get_project_config().get_spatial_optim_config()

        # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é spatial grid'–æ–≤
        self.levels: List[SpatialHashGrid] = []
        self._build_hierarchy()

        logger.info(f"üèóÔ∏è HierarchicalSpatialIndex —Å–æ–∑–¥–∞–Ω—ã {len(self.levels)} —É—Ä–æ–≤–Ω–µ–π")

    def _build_hierarchy(self):
        """–°—Ç—Ä–æ–∏—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é spatial grid'–æ–≤"""
        max_dim = max(self.dimensions)

        for level in range(self.config.spatial_levels):
            # –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —É—Ä–æ–≤–Ω–µ–º
            cell_size = max(1, max_dim // (4 ** (level + 1)))

            grid = SpatialHashGrid(self.dimensions, cell_size)
            self.levels.append(grid)

            logger.debug(f"   Level {level}: cell_size={cell_size}")

    def insert_batch(self, coords_list: List[Coordinates3D], indices_list: List[int]):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç batch –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–æ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏"""
        for coords, idx in zip(coords_list, indices_list):
            for grid in self.levels:
                grid.insert(coords, idx)

    def query_hierarchical(self, coords: Coordinates3D, radius: float) -> Set[int]:
        """
        –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π

        –ù–∞—á–∏–Ω–∞–µ—Ç —Å –∫—Ä—É–ø–Ω—ã—Ö —è—á–µ–µ–∫, –∑–∞—Ç–µ–º —É—Ç–æ—á–Ω—è–µ—Ç –≤ –º–µ–ª–∫–∏—Ö
        """
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –∫—Ä—É–ø–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        candidates = set()

        for level_idx, grid in enumerate(self.levels):
            level_radius = radius * (
                2**level_idx
            )  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            level_candidates = set(grid.query_radius(coords, level_radius))

            if level_idx == 0:
                candidates = level_candidates
            else:
                # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
                candidates = candidates.intersection(level_candidates)

            # –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –º–∞–ª–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Ä–∞–Ω—å—à–µ
            if len(candidates) < self.config.min_cells_per_node:
                break

        return candidates
