#!/usr/bin/env python3
"""
MoE Spatial Optimizer - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º MoE Connection Processor
=====================================================================

Spatial Optimizer –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º MoE Connection Processor
–¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–∫–∞—Ö.

–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:
- –†–µ–∞–ª—å–Ω—ã–π MoEConnectionProcessor (–≤–º–µ—Å—Ç–æ Mock)
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π
- GPU acceleration –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- Chunked processing –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫
"""

import torch
import torch.nn as nn
from typing import Dict, List, Optional, Any
import time

from .spatial_optimizer import SpatialOptimizer
from ....config.project_config import ChunkInfo, create_spatial_config_for_lattice
from ....config.project_config import get_project_config
from ..spatial_hashing import Coordinates3D
from ..position import Position3D
from ....utils.logging import get_logger

# GPU Spatial Optimization –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
from .gpu_spatial_processor import GPUSpatialProcessor
from .adaptive_chunker import AdaptiveGPUChunker
from ..gpu_spatial_hashing import AdaptiveGPUSpatialHash

logger = get_logger(__name__)


class MoESpatialOptimizer(SpatialOptimizer):
    """
    Spatial Optimizer –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º MoE Connection Processor
    –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–∫–∞—Ö.
    """

    def __init__(
        self,
        dimensions: Coordinates3D,
        moe_processor=None,
        config: Optional[dict] = None,
        device: Optional[torch.device] = None,
    ):
        super().__init__(dimensions, config)

        self.moe_processor = moe_processor
        self.expert_cache = {}  # –ö—ç—à –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ chunk'–∞–º

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        self.device = device or torch.device(
            "cuda" if torch.cuda.is_available() else "cpu"
        )

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if hasattr(self.moe_processor, "to") and self.moe_processor is not None:
            self.moe_processor.to(self.device)

        # MoE-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ ProjectConfig
        project_config = get_project_config()

        self.connection_distributions = {
            "local": project_config.local_connections_ratio,
            "functional": project_config.functional_connections_ratio,
            "distant": project_config.distant_connections_ratio,
        }

        # === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø GPU SPATIAL OPTIMIZATION ===
        # –°–æ–∑–¥–∞–µ–º GPU Spatial Processor –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π
        # (device –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ device_manager)
        self.gpu_spatial_processor = GPUSpatialProcessor(dimensions=dimensions)

        # GPU Adaptive Chunker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫
        self.gpu_chunker = AdaptiveGPUChunker(dimensions=dimensions)

        # Adaptive GPU Spatial Hash –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π
        project_config = get_project_config()
        target_memory = getattr(project_config, "gpu_spatial_target_memory_mb", 1024.0)
        self.gpu_spatial_hash = AdaptiveGPUSpatialHash(
            dimensions=dimensions, target_memory_mb=target_memory
        )

        logger.info(f"üîß MoESpatialOptimizer –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        logger.info(f"   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π: {self.connection_distributions}")
        logger.info(f"   üéØ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        logger.info(f"   üöÄ GPU Spatial Optimization –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù")

    def optimize_moe_forward(
        self, states: torch.Tensor, moe_processor=None
    ) -> torch.Tensor:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π forward pass —Å —Ä–µ–∞–ª—å–Ω—ã–º MoE Connection Processor

        Args:
            states: [num_cells, state_size] - —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            moe_processor: —Ä–µ–∞–ª—å–Ω—ã–π MoE Connection Processor (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            new_states: [num_cells, state_size] - –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫
        """
        if moe_processor is None:
            moe_processor = self.moe_processor

        if moe_processor is None:
            raise ValueError(
                "MoE Connection Processor –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–¥–∞–π—Ç–µ moe_processor –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ."
            )

        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ MoE processor –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        if hasattr(moe_processor, "to"):
            moe_processor.to(self.device)

        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        if states.device != self.device:
            states = states.to(self.device)

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MoE forward pass –Ω–∞ {self.device}")
        logger.info(f"   üìä –í—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {states.shape} –Ω–∞ {states.device}")

        start_time = time.time()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chunked processing –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫
        output_states = self._process_moe_chunks(states, moe_processor)

        processing_time = time.time() - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if torch.isnan(output_states).any():
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –≤ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö")
        if torch.isinf(output_states).any():
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Inf –≤ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö")

        logger.info(f"‚úÖ MoE forward pass –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.3f}s")
        logger.info(
            f"   üìä –í—ã—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {output_states.shape} –Ω–∞ {output_states.device}"
        )

        return output_states

    def _process_moe_chunks(self, states: torch.Tensor, moe_processor) -> torch.Tensor:
        """
        Chunked processing —Å —Ä–µ–∞–ª—å–Ω—ã–º MoE Connection Processor

        –†–∞–∑–±–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ —Ä–µ—à–µ—Ç–∫–∏ –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —á–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
        """
        num_cells = states.shape[0]
        total_cells = self.dimensions[0] * self.dimensions[1] * self.dimensions[2]

        if num_cells != total_cells:
            logger.warning(
                f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: states={num_cells}, lattice={total_cells}"
            )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        output_states = states.clone()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è chunked processing
        project_config = get_project_config()
        adaptive_radius = project_config.calculate_adaptive_radius()

        logger.info(f"   üìê Adaptive radius: {adaptive_radius:.2f}")

        # === GPU ADAPTIVE CHUNKER –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPU Adaptive Chunker –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
            processing_schedule = self.gpu_chunker.get_adaptive_processing_schedule()
            logger.info(
                f"üîß GPU Chunker —Å–æ–∑–¥–∞–ª schedule —Å {len(processing_schedule)} chunk'–∞–º–∏"
            )

            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã batch'–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ GPU chunker
            chunk_stats = self.gpu_chunker.get_comprehensive_stats()
            optimal_batch_size = chunk_stats["chunks"]["chunk_size"] ** 3
            batch_size = min(optimal_batch_size, num_cells)

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è GPU Chunker –Ω–µ —É–¥–∞–ª—Å—è: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            max_batches = getattr(project_config, "max_test_batches", 3)
            batch_size = (
                min(1000, num_cells // max_batches) if num_cells > 5000 else num_cells
            )

        processed_cells = 0
        batch_count = 0

        for batch_start in range(0, num_cells, batch_size):
            if batch_count >= max_batches:
                logger.info(
                    f"   üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç batch'–µ–π ({max_batches}) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                break

            batch_end = min(batch_start + batch_size, num_cells)
            batch_cells = list(range(batch_start, batch_end))

            logger.debug(
                f"   üîÑ Batch {batch_count + 1}: –∫–ª–µ—Ç–∫–∏ {batch_start}-{batch_end}"
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º batch —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π MoE processor
            batch_output = self._process_moe_batch(
                states, batch_cells, moe_processor, adaptive_radius
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            output_states[batch_start:batch_end] = batch_output

            processed_cells += len(batch_cells)
            batch_count += 1

        logger.info(
            f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_cells}/{num_cells} –∫–ª–µ—Ç–æ–∫ –≤ {batch_count} batch'–∞—Ö"
        )

        return output_states

    def _process_moe_batch(
        self,
        states: torch.Tensor,
        cell_indices: List[int],
        moe_processor,
        adaptive_radius: float,
    ) -> torch.Tensor:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ batch'–∞ –∫–ª–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π MoE Connection Processor

        Args:
            states: –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—à–µ—Ç–∫–∏
            cell_indices: –∏–Ω–¥–µ–∫—Å—ã –∫–ª–µ—Ç–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º batch'–µ
            moe_processor: —Ä–µ–∞–ª—å–Ω—ã–π MoE Connection Processor
            adaptive_radius: —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π

        Returns:
            batch_output: –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è batch'–∞ –∫–ª–µ—Ç–æ–∫
        """
        batch_size = len(cell_indices)
        state_size = states.shape[1]

        # –õ–û–ì–ò–†–£–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û BATCH'–ï
        logger.debug(
            f"üîÑ _process_moe_batch: batch_size={batch_size}, cell_indices={cell_indices[:10]}..."
        )
        logger.debug(
            f"   üìê Dimensions: {self.dimensions}, total_valid_cells: {self.dimensions[0] * self.dimensions[1] * self.dimensions[2]}"
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π tensor
        batch_output = torch.zeros(
            batch_size, state_size, device=self.device, dtype=states.dtype
        )

        pos_helper = Position3D(self.dimensions)

        for i, cell_idx in enumerate(cell_indices):
            # –õ–û–ì–ò–†–£–ï–ú –ö–ê–ñ–î–£–Æ –ö–õ–ï–¢–ö–£
            logger.debug(
                f"   üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫—É {i+1}/{batch_size}: cell_idx={cell_idx}"
            )

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏
            coords = pos_helper.to_3d_coordinates(cell_idx)

            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ü–µ—Ä–µ–¥–∞–µ–º spatial_optimizer –≤ MoE processor
            # –û–Ω —Å–∞–º –Ω–∞–π–¥–µ—Ç —Å–æ—Å–µ–¥–µ–π –ø–æ adaptive radius
            current_state = states[cell_idx].unsqueeze(0)  # [1, state_size]

            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ neighbor_states - MoE processor —Å–∞–º –Ω–∞–π–¥–µ—Ç –Ω—É–∂–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π
            empty_neighbors = torch.empty(1, 0, states.shape[1], device=self.device)

            try:
                # –ü–µ—Ä–µ–¥–∞–µ–º self –∫–∞–∫ spatial_optimizer –¥–ª—è adaptive radius –ø–æ–∏—Å–∫–∞
                result = moe_processor(
                    current_state=current_state,
                    neighbor_states=empty_neighbors,  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ adaptive neighbors
                    cell_idx=cell_idx,
                    neighbor_indices=[],  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ adaptive neighbors
                    spatial_optimizer=self,  # –ö–õ–Æ–ß–ï–í–û–ï: –ø–µ—Ä–µ–¥–∞–µ–º —Å–µ–±—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π
                    full_lattice_states=states,  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è adaptive radius
                )

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if isinstance(result, dict) and "new_state" in result:
                    new_state = result["new_state"]
                elif isinstance(result, torch.Tensor):
                    new_state = result
                else:
                    logger.warning(
                        f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç MoE: {type(result)}"
                    )
                    new_state = current_state

                batch_output[i] = new_state.squeeze(0)

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ MoE –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–µ—Ç–∫–∏ {cell_idx}: {e}")
                # Fallback: –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                batch_output[i] = states[cell_idx]

        return batch_output

    def _classify_neighbors_for_moe(
        self, cell_idx: int, neighbors: List[int]
    ) -> Dict[str, List[int]]:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Å–µ–¥–µ–π –¥–ª—è MoE —ç–∫—Å–ø–µ—Ä—Ç–æ–≤

        Args:
            cell_idx: –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∫–ª–µ—Ç–∫–∏
            neighbors: —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ—Å–µ–¥–µ–π

        Returns:
            dict —Å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ—Å–µ–¥—è–º–∏ –ø–æ —Ç–∏–ø–∞–º
        """
        if not neighbors:
            return {"local": [], "functional": [], "distant": []}

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Å–æ—Å–µ–¥–µ–π
        pos_helper = Position3D(self.dimensions)
        cell_coords = pos_helper.to_3d_coordinates(cell_idx)

        neighbor_distances = []
        for neighbor_idx in neighbors:
            neighbor_coords = pos_helper.to_3d_coordinates(neighbor_idx)

            # –ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            distance = (
                (cell_coords[0] - neighbor_coords[0]) ** 2
                + (cell_coords[1] - neighbor_coords[1]) ** 2
                + (cell_coords[2] - neighbor_coords[2]) ** 2
            ) ** 0.5

            neighbor_distances.append((distance, neighbor_idx))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        neighbor_distances.sort(key=lambda x: x[0])

        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ MoE —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
        total_neighbors = len(neighbors)
        local_count = max(
            1, int(total_neighbors * self.connection_distributions["local"])
        )
        functional_count = max(
            1, int(total_neighbors * self.connection_distributions["functional"])
        )
        # distant_count –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ = –æ—Å—Ç–∞–ª—å–Ω—ã–µ

        classified = {
            "local": [idx for _, idx in neighbor_distances[:local_count]],
            "functional": [
                idx
                for _, idx in neighbor_distances[
                    local_count : local_count + functional_count
                ]
            ],
            "distant": [
                idx for _, idx in neighbor_distances[local_count + functional_count :]
            ],
        }

        return classified

    def find_neighbors_by_radius_safe(
        self, cell_idx: int, spatial_optimizer=None
    ) -> List[int]:
        """
        GPU-ACCELERATED –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–ª—è MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

        Args:
            cell_idx: –∏–Ω–¥–µ–∫—Å –∫–ª–µ—Ç–∫–∏
            spatial_optimizer: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π SpatialOptimizer –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)

        Returns:
            —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ—Å–µ–¥–µ–π –≤ adaptive radius
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        total_cells = self.dimensions[0] * self.dimensions[1] * self.dimensions[2]
        if not (0 <= cell_idx < total_cells):
            logger.warning(f"Invalid cell_idx: {cell_idx}")
            return []

        pos_helper = Position3D(self.dimensions)
        coords = pos_helper.to_3d_coordinates(cell_idx)

        # === GPU SPATIAL OPTIMIZATION –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ torch tensor
            query_point = torch.tensor(
                [list(coords)], dtype=torch.float32, device=self.device
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º adaptive radius –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            project_config = get_project_config()
            search_radius = float(project_config.calculate_adaptive_radius())

            # GPU-accelerated –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ GPUSpatialProcessor
            result = self.gpu_spatial_processor.query_neighbors_sync(
                coordinates=query_point, radius=search_radius, timeout=10.0
            )

            if result and result.neighbor_lists:
                neighbors = result.neighbor_lists[0].cpu().tolist()
                logger.debug(
                    f"üöÄ GPU –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª {len(neighbors)} —Å–æ—Å–µ–¥–µ–π –¥–ª—è cell {cell_idx}"
                )
                return neighbors[: project_config.max_neighbors]

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è GPU –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: {e}, fallback –Ω–∞ CPU")

        # === FALLBACK –ù–ê CPU –í–ï–†–°–ò–Æ ===
        neighbors = []
        search_radius = project_config.calculate_adaptive_radius()
        max_neighbors = project_config.max_neighbors

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º bounds –¥–ª—è –ø–æ–∏—Å–∫–∞
        x_min = max(0, coords[0] - int(search_radius))
        x_max = min(self.dimensions[0], coords[0] + int(search_radius) + 1)
        y_min = max(0, coords[1] - int(search_radius))
        y_max = min(self.dimensions[1], coords[1] + int(search_radius) + 1)
        z_min = max(0, coords[2] - int(search_radius))
        z_max = min(self.dimensions[2], coords[2] + int(search_radius) + 1)

        # CPU –ø–æ–∏—Å–∫ –≤ bounds —Å —Å—Ç—Ä–æ–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        for x in range(x_min, x_max):
            for y in range(y_min, y_max):
                for z in range(z_min, z_max):
                    if (x, y, z) == coords:
                        continue

                    # –°–¢–†–û–ì–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    if not (
                        0 <= x < self.dimensions[0]
                        and 0 <= y < self.dimensions[1]
                        and 0 <= z < self.dimensions[2]
                    ):
                        continue

                    distance = (
                        (x - coords[0]) ** 2
                        + (y - coords[1]) ** 2
                        + (z - coords[2]) ** 2
                    ) ** 0.5
                    if distance <= search_radius:
                        neighbor_idx = pos_helper.to_linear_index((x, y, z))

                        # –°–¢–†–û–ì–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –∏–Ω–¥–µ–∫—Å–∞
                        if 0 <= neighbor_idx < total_cells:
                            neighbors.append(neighbor_idx)
                        else:
                            logger.warning(
                                f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π neighbor_idx: {neighbor_idx} –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ({x}, {y}, {z})"
                            )

                        if len(neighbors) >= max_neighbors:
                            break

        logger.debug(
            f"üíª CPU fallback –Ω–∞—à–µ–ª {len(neighbors)} —Å–æ—Å–µ–¥–µ–π –¥–ª—è cell {cell_idx}"
        )
        return neighbors

    def estimate_moe_memory_requirements(
        self, dimensions: Coordinates3D
    ) -> Dict[str, float]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏ –¥–ª—è MoE + Spatial Optimization"""
        from .spatial_optimizer import estimate_memory_requirements

        base_requirements = estimate_memory_requirements(dimensions)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è MoE
        total_cells = dimensions[0] * dimensions[1] * dimensions[2]

        moe_overhead = {
            "expert_states_gb": total_cells * 32 * 4 * 3 / (1024**3),  # 3 —ç–∫—Å–ø–µ—Ä—Ç–∞
            "connection_classification_gb": total_cells
            * 26
            * 4
            / (1024**3),  # –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–≤—è–∑–µ–π
            "spatial_index_gb": total_cells * 8 / (1024**3),  # –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            "chunk_coordination_gb": 0.1,  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è chunk'–æ–≤
        }

        # –û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        total_moe_overhead = sum(moe_overhead.values())

        result = base_requirements.copy()
        result.update(moe_overhead)
        result["total_memory_gb"] += total_moe_overhead
        result["recommended_gpu_memory_gb"] = (
            result["total_memory_gb"] * 1.3
        )  # 30% –∑–∞–ø–∞—Å

        return result


def create_moe_spatial_optimizer(
    dimensions: Coordinates3D, moe_processor=None, device: Optional[torch.device] = None
) -> MoESpatialOptimizer:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è MoE Spatial Optimizer

    Args:
        dimensions: —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏ (x, y, z)
        moe_processor: —Ä–µ–∞–ª—å–Ω—ã–π MoE Connection Processor
        device: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π

    Returns:
        MoESpatialOptimizer –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–µ—à–µ—Ç–∫–∏
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

    project_config = get_project_config()
    config = project_config.get_spatial_optim_config()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    if device is None:
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    logger.info(f"üè≠ –°–æ–∑–¥–∞–Ω–∏–µ MoE Spatial Optimizer –¥–ª—è {dimensions}")
    logger.info(f"   üéØ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    logger.info(
        f"   ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config['chunk_size']}√ó{config['chunk_size']}√ó{config['chunk_size']} chunks"
    )

    # –ï—Å–ª–∏ MoE processor –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º Mock –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if moe_processor is None:
        logger.warning("‚ö†Ô∏è MoE processor –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Mock –≤–µ—Ä—Å–∏—è")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å Mock –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É

    return MoESpatialOptimizer(
        dimensions=dimensions,
        moe_processor=moe_processor,
        config=config,
        device=device,
    )


def estimate_moe_memory_requirements(dimensions: Coordinates3D) -> Dict[str, float]:
    """
    –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏ –¥–ª—è MoE Spatial Optimization

    Args:
        dimensions: —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏ (x, y, z)

    Returns:
        dict —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –ø–∞–º—è—Ç–∏ –≤ GB
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

    project_config = get_project_config()
    config = project_config.get_spatial_optim_config()

    optimizer = MoESpatialOptimizer(dimensions, config=config)

    return optimizer.estimate_moe_memory_requirements(dimensions)
