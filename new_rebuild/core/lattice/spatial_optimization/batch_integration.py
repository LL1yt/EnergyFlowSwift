#!/usr/bin/env python3
"""
Batch Processing Integration
===========================

–ú–æ–¥—É–ª—å –¥–ª—è –ª–µ–≥–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∫–ª—é—á–∞—Ç—å batch –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ runtime –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ.
"""

from typing import Optional, Tuple
import torch

from .unified_spatial_optimizer import UnifiedSpatialOptimizer
from .gpu_spatial_processor_batch import GPUSpatialProcessorBatch
from ....utils.logging import get_logger
from ....config import get_project_config

logger = get_logger(__name__)


def create_batch_optimized_spatial_optimizer(
    dimensions: Tuple[int, int, int],
    moe_processor,
    enable_batch: bool = True,
    batch_threshold: int = 4,
    **kwargs
) -> UnifiedSpatialOptimizer:
    """
    –°–æ–∑–¥–∞–µ—Ç UnifiedSpatialOptimizer —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π batch –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        dimensions: —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Ä–µ—à–µ—Ç–∫–∏
        moe_processor: MoE –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        enable_batch: –≤–∫–ª—é—á–∏—Ç—å –ª–∏ batch –æ–±—Ä–∞–±–æ—Ç–∫—É
        batch_threshold: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä chunk'–∞ –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        **kwargs: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è UnifiedSpatialOptimizer
        
    Returns:
        UnifiedSpatialOptimizer —Å batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
    """
    config = get_project_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if hasattr(config, 'performance') and hasattr(config.performance, 'enable_batch_processing'):
        enable_batch = config.performance.enable_batch_processing
        logger.info(f"Batch processing set from config: {enable_batch}")
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    optimizer = UnifiedSpatialOptimizer(dimensions, moe_processor, **kwargs)
    
    if enable_batch:
        # –ó–∞–º–µ–Ω—è–µ–º GPU processor –Ω–∞ batch –≤–µ—Ä—Å–∏—é
        logger.info("üöÄ Enabling batch processing for spatial optimization")
        
        batch_processor = GPUSpatialProcessorBatch(
            dimensions=dimensions,
            moe_processor=moe_processor,
            enable_batch=enable_batch,
            batch_threshold=batch_threshold,
            profile_performance=True
        )
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–µ
        optimizer.gpu_processor = batch_processor
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        def get_batch_performance_report():
            if hasattr(optimizer.gpu_processor, 'get_performance_report'):
                return optimizer.gpu_processor.get_performance_report()
            return {"status": "Batch processing not available"}
        
        optimizer.get_batch_performance_report = get_batch_performance_report
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è batch —Ä–µ–∂–∏–º–∞
        def set_batch_enabled(enabled: bool):
            if hasattr(optimizer.gpu_processor, 'set_batch_enabled'):
                optimizer.gpu_processor.set_batch_enabled(enabled)
                logger.info(f"Batch processing {'enabled' if enabled else 'disabled'}")
            else:
                logger.warning("Batch processing control not available")
        
        optimizer.set_batch_enabled = set_batch_enabled
        
        logger.info("‚úÖ Batch processing enabled for spatial optimizer")
    else:
        logger.info("‚ÑπÔ∏è Using standard per-cell processing")
    
    return optimizer


def upgrade_lattice_to_batch(lattice):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é Lattice3D –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        lattice: —ç–∫–∑–µ–º–ø–ª—è—Ä Lattice3D
        
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è lattice —Å batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
    """
    if not hasattr(lattice, 'spatial_optimizer'):
        logger.error("Lattice doesn't have spatial_optimizer attribute")
        return lattice
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
    old_optimizer = lattice.spatial_optimizer
    dimensions = old_optimizer.dimensions
    moe_processor = old_optimizer.moe_processor
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å batch –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    new_optimizer = create_batch_optimized_spatial_optimizer(
        dimensions=dimensions,
        moe_processor=moe_processor,
        enable_batch=True
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    lattice.spatial_optimizer = new_optimizer
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è batch —Ä–µ–∂–∏–º–æ–º
    def set_batch_enabled(enabled: bool):
        if hasattr(lattice.spatial_optimizer, 'set_batch_enabled'):
            lattice.spatial_optimizer.set_batch_enabled(enabled)
    
    def get_batch_performance():
        if hasattr(lattice.spatial_optimizer, 'get_batch_performance_report'):
            return lattice.spatial_optimizer.get_batch_performance_report()
        return {"status": "Batch processing not available"}
    
    lattice.set_batch_enabled = set_batch_enabled
    lattice.get_batch_performance = get_batch_performance
    
    logger.info("‚úÖ Lattice upgraded with batch processing support")
    
    return lattice