#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π Spatial Optimizer
=========================

–û—Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ 3D —Ä–µ—à–µ—Ç–æ–∫.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π –∏ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ä–µ—à–µ—Ç–æ–∫.
"""

import torch
from typing import Dict, List, Optional
import time

from ....config.project_config import create_spatial_config_for_lattice
from ....config.project_config import get_project_config
from .hierarchical_index import HierarchicalSpatialIndex
from ..spatial_hashing import Coordinates3D, SpatialHashGrid
from ..position import Position3D
from ....utils.logging import get_logger

logger = get_logger(__name__)


class SpatialOptimizer:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ 3D —Ä–µ—à–µ—Ç–æ–∫.
    """

    def __init__(self, dimensions: Coordinates3D, config: Optional[dict] = None):
        self.dimensions = dimensions
        self.config = config or get_project_config().get_spatial_optim_config()

        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.pos_helper = Position3D(dimensions)
        self.spatial_index: Optional[HierarchicalSpatialIndex] = None
        self.spatial_grid: Optional[SpatialHashGrid] = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            "total_queries": 0,
            "total_time_ms": 0.0,
            "avg_neighbors_found": 0.0,
        }

        # –°—Ç—Ä–æ–∏–º spatial index
        self._build_spatial_index()

        logger.info(f"üóÇÔ∏è SpatialOptimizer –≥–æ—Ç–æ–≤ –¥–ª—è {dimensions}")

    def _build_spatial_index(self):
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
        self.spatial_index = HierarchicalSpatialIndex(self.dimensions, self.config)

        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π spatial grid –¥–ª—è fallback
        max_dim = max(self.dimensions)
        cell_size = max(1, max_dim // 32)  # –†–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏
        self.spatial_grid = SpatialHashGrid(self.dimensions, cell_size)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤—Å–µ–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        total_cells = self.dimensions[0] * self.dimensions[1] * self.dimensions[2]

        coords_list = []
        indices_list = []

        for idx in range(total_cells):
            coords = self.pos_helper.to_3d_coordinates(idx)
            coords_list.append(coords)
            indices_list.append(idx)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑–æ–≤—ã–π grid
            self.spatial_grid.insert(coords, idx)

        # Batch insert –≤ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
        self.spatial_index.insert_batch(coords_list, indices_list)

        logger.info(f"   üìä –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã {total_cells:,} –∫–ª–µ—Ç–æ–∫")

    def find_neighbors_optimized(
        self, coords: Coordinates3D, radius: float
    ) -> List[int]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ

        Args:
            coords: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
            radius: —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞

        Returns:
            list –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
        """
        start_time = time.time()

        # –õ–û–ì–ò–†–£–ï–ú –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï
        logger.debug(f"üîç find_neighbors_optimized: coords={coords}, radius={radius}")
        logger.debug(f"   üìê Dimensions: {self.dimensions}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if not self.pos_helper.is_valid_coordinates(coords):
            logger.warning(
                f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords} –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ {self.dimensions}"
            )
            return []

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–∞–¥–∏—É—Å–æ–≤
            if radius > 10.0 and self.spatial_index:
                logger.debug(
                    f"   üîé –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è radius={radius}"
                )
                neighbors = list(self.spatial_index.query_hierarchical(coords, radius))
            else:
                logger.debug(
                    f"   üîé –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π spatial grid –¥–ª—è radius={radius}"
                )
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π spatial grid –¥–ª—è –º–∞–ª—ã—Ö —Ä–∞–¥–∏—É—Å–æ–≤
                neighbors = list(self.spatial_grid.query_radius(coords, radius))

            logger.debug(f"   üîé –ù–∞–π–¥–µ–Ω–æ {len(neighbors)} —Å–æ—Å–µ–¥–µ–π –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π")

            # –£–±–∏—Ä–∞–µ–º —Å–∞–º—É —Ç–æ—á–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å
            center_idx = self.pos_helper.to_linear_index(coords)
            if center_idx in neighbors:
                neighbors.remove(center_idx)
                logger.debug(f"   ‚úÇÔ∏è –£–±—Ä–∞–ª–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É {center_idx}")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ —Å–æ—Å–µ–¥–µ–π: {e}")
            neighbors = []

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        query_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        self.performance_stats["total_queries"] += 1
        self.performance_stats["total_time_ms"] += query_time
        self.performance_stats["avg_neighbors_found"] = (
            self.performance_stats["avg_neighbors_found"] * 0.9 + len(neighbors) * 0.1
        )

        logger.debug(f"   ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(neighbors)} —Å–æ—Å–µ–¥–µ–π: {neighbors[:10]}...")
        return neighbors

    def find_neighbors_by_radius_safe(
        self, cell_idx: int, spatial_optimizer=None
    ) -> List[int]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        total_cells = self.dimensions[0] * self.dimensions[1] * self.dimensions[2]
        if not (0 <= cell_idx < total_cells):
            logger.warning(f"Invalid cell_idx: {cell_idx}")
            return []

        pos_helper = Position3D(self.dimensions)
        coords = pos_helper.to_3d_coordinates(cell_idx)

        neighbors = []
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞
        search_radius = self.config.get("max_search_radius", 10.0)
        max_neighbors = self.config.get("max_neighbors", 26)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º bounds –¥–ª—è –ø–æ–∏—Å–∫–∞
        x_min = max(0, coords[0] - int(search_radius))
        x_max = min(self.dimensions[0], coords[0] + int(search_radius) + 1)
        y_min = max(0, coords[1] - int(search_radius))
        y_max = min(self.dimensions[1], coords[1] + int(search_radius) + 1)
        z_min = max(0, coords[2] - int(search_radius))
        z_max = min(self.dimensions[2], coords[2] + int(search_radius) + 1)

        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ bounds —Å —Å—Ç—Ä–æ–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        for x in range(x_min, x_max):
            for y in range(y_min, y_max):
                for z in range(z_min, z_max):
                    if (x, y, z) == coords:
                        continue

                    # –°–¢–†–û–ì–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    if not (
                        0 <= x < self.dimensions[0]
                        and 0 <= y < self.dimensions[1]
                        and 0 <= z < self.dimensions[2]
                    ):
                        continue

                    distance = (
                        (x - coords[0]) ** 2
                        + (y - coords[1]) ** 2
                        + (z - coords[2]) ** 2
                    ) ** 0.5
                    if distance <= search_radius:
                        neighbor_idx = pos_helper.to_linear_index((x, y, z))

                        # –°–¢–†–û–ì–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –∏–Ω–¥–µ–∫—Å–∞
                        if 0 <= neighbor_idx < total_cells:
                            neighbors.append(neighbor_idx)
                        else:
                            logger.warning(
                                f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π neighbor_idx: {neighbor_idx} –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ({x}, {y}, {z})"
                            )

                        if len(neighbors) >= max_neighbors:
                            break

        return neighbors

    def optimize_lattice_forward(
        self, states: torch.Tensor, neighbor_processor_fn
    ) -> torch.Tensor:
        """
        –ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ—Ç–∫–∏

        Args:
            states: [num_cells, state_size] - —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫
            neighbor_processor_fn: —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å–µ–¥–µ–π

        Returns:
            new_states: [num_cells, state_size] - –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–π spatial optimization")

        start_time = time.time()
        num_cells = states.shape[0]

        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ chunking –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        output_states = states.clone()

        for cell_idx in range(num_cells):
            coords = self.pos_helper.to_3d_coordinates(cell_idx)
            neighbors = self.find_neighbors_optimized(
                coords, self.config["max_search_radius"]
            )

            if neighbors:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å–µ–¥–µ–π
                new_state = neighbor_processor_fn(
                    states[cell_idx], states[neighbors], cell_idx, neighbors
                )
                output_states[cell_idx] = new_state

        processing_time = time.time() - start_time
        logger.info(f"‚úÖ –ë–∞–∑–æ–≤–∞—è optimization –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.3f}s")

        return output_states

    def get_performance_stats(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        stats = self.performance_stats.copy()

        if stats["total_queries"] > 0:
            stats["avg_query_time_ms"] = stats["total_time_ms"] / stats["total_queries"]
        else:
            stats["avg_query_time_ms"] = 0.0

        return stats

    def cleanup(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self, "spatial_index"):
            self.spatial_index = None
        if hasattr(self, "spatial_grid"):
            self.spatial_grid = None

        logger.info("üßπ SpatialOptimizer —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


def create_spatial_optimizer(dimensions: Coordinates3D) -> SpatialOptimizer:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ Spatial Optimizer

    Args:
        dimensions: —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏ (x, y, z)

    Returns:
        SpatialOptimizer –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–µ—à–µ—Ç–∫–∏
    """
    config = create_spatial_config_for_lattice(dimensions)

    logger.info(f"üè≠ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ Spatial Optimizer –¥–ª—è {dimensions}")

    return SpatialOptimizer(dimensions=dimensions, config=config)


def estimate_memory_requirements(dimensions: Coordinates3D) -> Dict[str, float]:
    """
    –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏ –¥–ª—è Spatial Optimization

    Args:
        dimensions: —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏ (x, y, z)

    Returns:
        dict —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –ø–∞–º—è—Ç–∏ –≤ GB
    """
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]

    # –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    cell_states_gb = total_cells * 32 * 4 / (1024**3)  # float32 —Å–æ—Å—Ç–æ—è–Ω–∏—è
    spatial_index_gb = total_cells * 16 / (1024**3)  # –∏–Ω–¥–µ–∫—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    neighbor_cache_gb = total_cells * 26 * 4 / (1024**3)  # –∫—ç—à —Å–æ—Å–µ–¥–µ–π
    processing_overhead_gb = 0.5  # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ buffers

    total_memory_gb = (
        cell_states_gb + spatial_index_gb + neighbor_cache_gb + processing_overhead_gb
    )

    return {
        "cell_states_gb": cell_states_gb,
        "spatial_index_gb": spatial_index_gb,
        "neighbor_cache_gb": neighbor_cache_gb,
        "processing_overhead_gb": processing_overhead_gb,
        "total_memory_gb": total_memory_gb,
        "recommended_gpu_memory_gb": total_memory_gb * 1.2,  # 20% –∑–∞–ø–∞—Å
    }
