#!/usr/bin/env python3
"""
Connection Cache Manager - Pre-computed –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π
========================================================================

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ pre-compute —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä:
1. Pre-computed —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏ –∫–ª–µ—Ç–æ–∫
2. Pre-computed –±–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (LOCAL/DISTANT)
3. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ candidate —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è FUNCTIONAL —Å–≤—è–∑–µ–π
4. –ë—ã—Å—Ç—Ä–∞—è lookup —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π

–ü–†–ò–ù–¶–ò–ü–´:
- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
- –¢–æ–ª—å–∫–æ functional_similarity –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
- Massive speedup –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π
- Memory-efficient —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å sparse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
"""

import torch
import numpy as np
from typing import Dict, List, Tuple, Optional, Set
from dataclasses import dataclass, asdict
from pathlib import Path
import pickle
import hashlib
import os
import time
import math

from .connection_types import ConnectionCategory, ConnectionInfo
from .distance_calculator import DistanceCalculator
from ...config import get_project_config
from ...utils.logging import get_logger

logger = get_logger(__name__)


@dataclass
class CachedConnectionInfo:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤—è–∑–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""

    target_idx: int
    euclidean_distance: float
    manhattan_distance: float
    category: (
        ConnectionCategory  # LOCAL –∏–ª–∏ DISTANT (FUNCTIONAL –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    )


class ConnectionCacheManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–µ–π —Å pre-computed —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏

    –ö–ª—é—á–µ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
    1. Pre-computed distance matrices (sparse)
    2. Pre-computed –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ LOCAL/DISTANT
    3. Candidate —Å–ø–∏—Å–∫–∏ –¥–ª—è FUNCTIONAL –ø—Ä–æ–≤–µ—Ä–∫–∏
    4. Batch lookup —Ç–∞–±–ª–∏—Ü—ã
    """

    def __init__(
        self,
        lattice_dimensions: Tuple[int, int, int],
        cache_config: Optional[Dict] = None,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à –º–µ–Ω–µ–¥–∂–µ—Ä–∞

        Args:
            lattice_dimensions: –†–∞–∑–º–µ—Ä—ã 3D —Ä–µ—à–µ—Ç–∫–∏ (x, y, z)
            cache_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.lattice_dimensions = lattice_dimensions
        self.total_cells = np.prod(lattice_dimensions)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_project_config()
        if cache_config is None:
            self.cache_config = asdict(config.cache) if config.cache else {}
        else:
            self.cache_config = cache_config

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π adaptive_radius
        self.adaptive_radius = config.calculate_adaptive_radius()

        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π, –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ adaptive_radius
        self.local_threshold = (
            self.adaptive_radius * config.lattice.local_distance_ratio
        )
        self.functional_threshold = (
            self.adaptive_radius * config.lattice.functional_distance_ratio
        )
        self.distant_threshold = (
            self.adaptive_radius * config.lattice.distant_distance_ratio
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º distance calculator
        self.distance_calculator = DistanceCalculator(lattice_dimensions)

        # GPU –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.use_gpu = (
            self.cache_config.get("use_gpu_acceleration", True)
            and torch.cuda.is_available()
        )
        self.gpu_batch_size = self.cache_config.get("gpu_batch_size", 10000)
        self.device = torch.device("cuda" if self.use_gpu else "cpu")

        # –ö—ç—à —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.cache: Dict[int, Dict[str, List[CachedConnectionInfo]]] = {}
        self.distance_cache: Dict[Tuple[int, int], Dict[str, float]] = {}
        self.is_precomputed = False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º)
        self.enable_performance_monitoring = self.cache_config.get(
            "enable_performance_monitoring", False
        )
        self.enable_detailed_stats = self.cache_config.get(
            "enable_detailed_stats", False
        )

        if self.enable_performance_monitoring:
            self.cache_hits = 0
            self.cache_misses = 0
            self.total_lookup_time = 0.0
            self.total_rebuild_time = 0.0

        logger.info(f"üîß ConnectionCacheManager initialized:")
        logger.info(f"   Lattice: {lattice_dimensions} ({self.total_cells} cells)")
        logger.info(f"   Adaptive radius: {self.adaptive_radius}")
        logger.info(
            f"   Thresholds: LOCAL‚â§{self.local_threshold}, FUNCTIONAL‚â§{self.functional_threshold}, DISTANT‚â•{self.distant_threshold}"
        )
        logger.info(f"   Performance monitoring: {self.enable_performance_monitoring}")
        logger.info(f"   Detailed stats: {self.enable_detailed_stats}")

        # GPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if self.use_gpu:
            gpu_name = torch.cuda.get_device_name(0)
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
            logger.info(f"üöÄ GPU acceleration: {gpu_name} ({gpu_memory:.1f}GB)")
            logger.info(f"   GPU batch size: {self.gpu_batch_size}")
        else:
            logger.info("üíª CPU mode: GPU not available or disabled")

    def _load_cache_from_disk(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ —Å –¥–∏—Å–∫–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        Returns:
            True –µ—Å–ª–∏ –∫—ç—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        try:
            cache_key = self._get_cache_key()
            cache_file = f"cache/connection_cache_{cache_key}.pkl"

            if not os.path.exists(cache_file):
                logger.info(f"–ö—ç—à —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {cache_file}")
                return False

            with open(cache_file, "rb") as f:
                cache_data = pickle.load(f)

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            is_compatible = True
            checks = {
                "lattice_dimensions": self.lattice_dimensions,
                "adaptive_radius": self.adaptive_radius,
                "local_threshold": self.local_threshold,
                "functional_threshold": self.functional_threshold,
                "distant_threshold": self.distant_threshold,
                "cache_version": self.cache_config.get("cache_version", "2024.1"),
            }
            if logger.isEnabledFor(10):
                logger.debug("--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫—ç—à–∞ ---")

            for key, expected_value in checks.items():
                cached_value = cache_data.get(key)
                if isinstance(expected_value, float):
                    if not math.isclose(
                        cached_value if isinstance(cached_value, float) else -1.0,
                        expected_value,
                        rel_tol=1e-9,
                        abs_tol=1e-9,
                    ):
                        if logger.isEnabledFor(10):
                            logger.debug(
                                f"‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢ (float): {key} | –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_value} | –í –∫—ç—à–µ: {cached_value}"
                            )
                        is_compatible = False
                elif cached_value != expected_value:
                    if logger.isEnabledFor(10):
                        logger.debug(
                            f"‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢: {key} | –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_value} | –í –∫—ç—à–µ: {cached_value}"
                        )
                    is_compatible = False
                else:
                    if logger.isEnabledFor(10):
                        logger.debug(f"‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç: {key} = {cached_value}")

            if not is_compatible:
                logger.info("–ö—ç—à –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ.")
                return False

            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.cache = cache_data["cache"]
            self.distance_cache = cache_data["distance_cache"]
            self.total_cells = cache_data["total_cells"]
            logger.info(f"‚úÖ –ö—ç—à —Å–æ–≤–º–µ—Å—Ç–∏–º –∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å –¥–∏—Å–∫–∞: {cache_file}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            return False

    def _get_cache_key(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        key_data = {
            "lattice_dimensions": self.lattice_dimensions,
            "adaptive_radius": self.adaptive_radius,
            "local_threshold": self.local_threshold,
            "functional_threshold": self.functional_threshold,
            "distant_threshold": self.distant_threshold,
            "cache_version": self.cache_config.get("cache_version", "2024.1"),
            # GPU/CPU –∫—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º, —É–±–∏—Ä–∞–µ–º GPU –∏–∑ –∫–ª—é—á–∞
        }
        if logger.isEnabledFor(10):
            logger.debug(f"üîë Cache key data: {key_data}")

        key_str = str(sorted(key_data.items()))
        return hashlib.md5(key_str.encode()).hexdigest()

    def _save_cache_to_disk(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞ –¥–∏—Å–∫ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        try:
            os.makedirs("cache", exist_ok=True)
            cache_key = self._get_cache_key()
            cache_file = f"cache/connection_cache_{cache_key}.pkl"

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
            cache_data = {
                "cache": self.cache,
                "distance_cache": self.distance_cache,
                "adaptive_radius": self.adaptive_radius,
                "lattice_dimensions": self.lattice_dimensions,
                "local_threshold": self.local_threshold,
                "functional_threshold": self.functional_threshold,
                "distant_threshold": self.distant_threshold,
                "total_cells": self.total_cells,
                "cache_version": self.cache_config.get("cache_version", "2024.1"),
                "timestamp": time.time(),
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è (–Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                "created_with_gpu": self.use_gpu,
                "creator_device": (
                    torch.cuda.get_device_name(0)
                    if self.use_gpu and torch.cuda.is_available()
                    else "CPU"
                ),
            }

            with open(cache_file, "wb") as f:
                pickle.dump(cache_data, f)

            logger.info(f"‚úÖ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {cache_file}")
            logger.info(f"   –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(self.cache)} –∫–ª–µ—Ç–æ–∫")
            logger.info(f"   Adaptive radius: {self.adaptive_radius}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")

    def precompute_all_connections(self, force_rebuild: bool = False):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤—è–∑–µ–π.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPU –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ.
        """
        if self.is_precomputed and not force_rebuild:
            logger.info("‚úÖ –ö—ç—à —É–∂–µ –≤ –ø–∞–º—è—Ç–∏, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.")
            return

        if not force_rebuild and self._load_cache_from_disk():
            self.is_precomputed = True
            return

        # --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞ ---
        logger.info("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π...")
        rebuild_start_time = time.time()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
        all_neighbors = self._compute_all_neighbors()

        # Pre-compute –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
        for cell_idx in range(self.total_cells):
            neighbors = all_neighbors[cell_idx]
            if not neighbors:
                continue

            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –¥–ª—è —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏
            cell_connections = self._precompute_cell_connections(cell_idx, neighbors)
            self.cache[cell_idx] = cell_connections

            # –ü—Ä–æ–≥—Ä–µ—Å—Å –ª–æ–≥
            if cell_idx % 1000 == 0:
                logger.debug(f"Pre-computed {cell_idx}/{self.total_cells} –∫–ª–µ—Ç–æ–∫")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –Ω–∞ –¥–∏—Å–∫
        self._save_cache_to_disk()

        self.is_precomputed = True
        logger.info(f"‚úÖ Pre-compute –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(self.cache)} –∫–ª–µ—Ç–æ–∫")
        logger.info(
            f"   –í—Ä–µ–º—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è: {time.time() - rebuild_start_time:.2f} —Å–µ–∫—É–Ω–¥"
        )

    def _compute_all_neighbors(self) -> Dict[int, List[int]]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ adaptive_radius"""
        if hasattr(self, "_all_neighbors_cache"):
            return self._all_neighbors_cache

        if self.use_gpu and self.total_cells > 5000:
            logger.info("üöÄ –í—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –Ω–∞ GPU...")
            return self._compute_all_neighbors_gpu()
        else:
            logger.info("üîç –í—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –Ω–∞ CPU...")
            return self._compute_all_neighbors_cpu()

    def _compute_all_neighbors_cpu(self) -> Dict[int, List[int]]:
        """CPU –≤–µ—Ä—Å–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π"""
        all_neighbors = {}
        x_dim, y_dim, z_dim = self.lattice_dimensions

        for cell_idx in range(self.total_cells):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –≤ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x = cell_idx % x_dim
            y = (cell_idx // x_dim) % y_dim
            z = cell_idx // (x_dim * y_dim)

            neighbors = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
            for dx in range(
                -int(self.adaptive_radius) - 1, int(self.adaptive_radius) + 2
            ):
                for dy in range(
                    -int(self.adaptive_radius) - 1, int(self.adaptive_radius) + 2
                ):
                    for dz in range(
                        -int(self.adaptive_radius) - 1, int(self.adaptive_radius) + 2
                    ):
                        if dx == 0 and dy == 0 and dz == 0:
                            continue

                        nx, ny, nz = x + dx, y + dy, z + dz

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                        if 0 <= nx < x_dim and 0 <= ny < y_dim and 0 <= nz < z_dim:
                            neighbor_idx = nx + ny * x_dim + nz * (x_dim * y_dim)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                            distance = np.sqrt(dx * dx + dy * dy + dz * dz)
                            if distance <= self.adaptive_radius:
                                neighbors.append(neighbor_idx)

            all_neighbors[cell_idx] = neighbors

        self._all_neighbors_cache = all_neighbors
        logger.info(f"‚úÖ –í—ã—á–∏—Å–ª–µ–Ω—ã —Å–æ—Å–µ–¥–∏ –¥–ª—è {len(all_neighbors)} –∫–ª–µ—Ç–æ–∫")
        return all_neighbors

    def _compute_all_neighbors_gpu(self) -> Dict[int, List[int]]:
        """GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π"""
        try:
            x_dim, y_dim, z_dim = self.lattice_dimensions

            # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –Ω–∞ GPU
            all_indices = torch.arange(self.total_cells, device=self.device)

            x_coords = all_indices % x_dim
            y_coords = (all_indices // x_dim) % y_dim
            z_coords = all_indices // (x_dim * y_dim)

            all_coords = torch.stack([x_coords, y_coords, z_coords], dim=1).float()

            logger.info(
                f"üíæ GPU memory –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {all_coords.numel() * 4 / 1024**2:.1f}MB"
            )

            all_neighbors = {}
            batch_size = min(self.gpu_batch_size, self.total_cells)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            for start_idx in range(0, self.total_cells, batch_size):
                end_idx = min(start_idx + batch_size, self.total_cells)
                batch_coords = all_coords[start_idx:end_idx]

                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∫–ª–µ—Ç–æ–∫
                # batch_coords: [batch_size, 3], all_coords: [total_cells, 3]
                distances = torch.cdist(
                    batch_coords, all_coords
                )  # [batch_size, total_cells]

                # –ù–∞—Ö–æ–¥–∏–º —Å–æ—Å–µ–¥–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ (–∏—Å–∫–ª—é—á–∞—è —Å–∞–º—É –∫–ª–µ—Ç–∫—É)
                for i, cell_idx in enumerate(range(start_idx, end_idx)):
                    # –ú–∞—Å–∫–∞ –¥–ª—è —Å–æ—Å–µ–¥–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ (–∏—Å–∫–ª—é—á–∞—è —Å–∞–º—É –∫–ª–µ—Ç–∫—É)
                    neighbor_mask = (distances[i] <= self.adaptive_radius) & (
                        distances[i] > 0
                    )
                    neighbor_indices = torch.where(neighbor_mask)[0].cpu().tolist()
                    all_neighbors[cell_idx] = neighbor_indices

                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º GPU –ø–∞–º—è—Ç—å
                del distances
                torch.cuda.empty_cache()

                if start_idx % (batch_size * 10) == 0:
                    logger.info(
                        f"üöÄ GPU: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {end_idx}/{self.total_cells} –∫–ª–µ—Ç–æ–∫"
                    )

            self._all_neighbors_cache = all_neighbors
            logger.info(f"‚úÖ GPU: –í—ã—á–∏—Å–ª–µ–Ω—ã —Å–æ—Å–µ–¥–∏ –¥–ª—è {len(all_neighbors)} –∫–ª–µ—Ç–æ–∫")
            return all_neighbors

        except Exception as e:
            logger.warning(f"GPU computation failed, falling back to CPU: {e}")
            return self._compute_all_neighbors_cpu()

    def _precompute_cell_connections(
        self, cell_idx: int, neighbor_indices: List[int]
    ) -> Dict[str, List[CachedConnectionInfo]]:
        """Pre-compute –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–≤—è–∑–µ–π –¥–ª—è –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏"""
        connections = {
            "local": [],
            "functional_candidates": [],  # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            "distant": [],
        }

        for neighbor_idx in neighbor_indices:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            euclidean_dist = self.distance_calculator.euclidean_distance(
                cell_idx, neighbor_idx
            )
            manhattan_dist = self.distance_calculator.manhattan_distance(
                cell_idx, neighbor_idx
            )

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            self.distance_cache[(cell_idx, neighbor_idx)] = {
                "euclidean": euclidean_dist,
                "manhattan": manhattan_dist,
            }

            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            if euclidean_dist <= self.local_threshold:
                category = ConnectionCategory.LOCAL
                connections["local"].append(
                    CachedConnectionInfo(
                        target_idx=neighbor_idx,
                        euclidean_distance=euclidean_dist,
                        manhattan_distance=manhattan_dist,
                        category=category,
                    )
                )

            elif euclidean_dist >= self.distant_threshold:
                category = ConnectionCategory.DISTANT
                connections["distant"].append(
                    CachedConnectionInfo(
                        target_idx=neighbor_idx,
                        euclidean_distance=euclidean_dist,
                        manhattan_distance=manhattan_dist,
                        category=category,
                    )
                )

            else:
                # –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                connections["functional_candidates"].append(
                    CachedConnectionInfo(
                        target_idx=neighbor_idx,
                        euclidean_distance=euclidean_dist,
                        manhattan_distance=manhattan_dist,
                        category=ConnectionCategory.FUNCTIONAL,  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ
                    )
                )

        return connections

    def get_cached_connections(
        self,
        cell_idx: int,
        neighbor_indices: List[int],
        states: Optional[torch.Tensor] = None,
        functional_similarity_threshold: float = 0.3,
    ) -> Dict[ConnectionCategory, List[ConnectionInfo]]:
        """
        –ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞

        Args:
            cell_idx: –ò–Ω–¥–µ–∫—Å –∫–ª–µ—Ç–∫–∏
            neighbor_indices: –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ—Å–µ–¥–µ–π
            states: –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            functional_similarity_threshold: –ü–æ—Ä–æ–≥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏

        Returns:
            –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        if cell_idx not in self.cache:
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º —Å–ø–∞–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            # logger.warning(f"–ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–µ—Ç–∫–∏ {cell_idx}")
            return {cat: [] for cat in ConnectionCategory}

        cached_data = self.cache[cell_idx]
        result = {cat: [] for cat in ConnectionCategory}

        # –°–æ–∑–¥–∞–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        neighbor_set = set(neighbor_indices)

        # LOCAL —Å–≤—è–∑–∏ - –ø—Ä—è–º–æ –∏–∑ –∫—ç—à–∞
        for conn in cached_data["local"]:
            if conn.target_idx in neighbor_set:
                result[ConnectionCategory.LOCAL].append(
                    ConnectionInfo(
                        source_idx=cell_idx,
                        target_idx=conn.target_idx,
                        euclidean_distance=conn.euclidean_distance,
                        manhattan_distance=conn.manhattan_distance,
                        category=ConnectionCategory.LOCAL,
                    )
                )

        # DISTANT —Å–≤—è–∑–∏ - –ø—Ä—è–º–æ –∏–∑ –∫—ç—à–∞
        for conn in cached_data["distant"]:
            if conn.target_idx in neighbor_set:
                result[ConnectionCategory.DISTANT].append(
                    ConnectionInfo(
                        source_idx=cell_idx,
                        target_idx=conn.target_idx,
                        euclidean_distance=conn.euclidean_distance,
                        manhattan_distance=conn.manhattan_distance,
                        category=ConnectionCategory.DISTANT,
                    )
                )

        # FUNCTIONAL –∫–∞–Ω–¥–∏–¥–∞—Ç—ã - —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ similarity
        functional_candidates = [
            conn
            for conn in cached_data["functional_candidates"]
            if conn.target_idx in neighbor_set
        ]

        if functional_candidates and states is not None:
            # –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            functional_connections = self._check_functional_similarity(
                cell_idx, functional_candidates, states, functional_similarity_threshold
            )
            result[ConnectionCategory.FUNCTIONAL].extend(functional_connections)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è FUNCTIONAL (–Ω–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è DISTANT)
            # –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            functional_indices = {conn.target_idx for conn in functional_connections}
            for conn in functional_candidates:
                if conn.target_idx not in functional_indices:
                    result[ConnectionCategory.FUNCTIONAL].append(
                        ConnectionInfo(
                            source_idx=cell_idx,
                            target_idx=conn.target_idx,
                            euclidean_distance=conn.euclidean_distance,
                            manhattan_distance=conn.manhattan_distance,
                            category=ConnectionCategory.FUNCTIONAL,
                        )
                    )
        else:
            # –ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ similarity –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è FUNCTIONAL
            for conn in functional_candidates:
                result[ConnectionCategory.FUNCTIONAL].append(
                    ConnectionInfo(
                        source_idx=cell_idx,
                        target_idx=conn.target_idx,
                        euclidean_distance=conn.euclidean_distance,
                        manhattan_distance=conn.manhattan_distance,
                        category=ConnectionCategory.FUNCTIONAL,
                    )
                )

        return result

    def _check_functional_similarity(
        self,
        cell_idx: int,
        candidates: List[CachedConnectionInfo],
        states: torch.Tensor,
        threshold: float,
    ) -> List[ConnectionInfo]:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        if not candidates:
            return []

        functional_connections = []

        try:
            cell_state = states[cell_idx]

            for conn in candidates:
                if conn.target_idx < states.shape[0]:
                    neighbor_state = states[conn.target_idx]

                    # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                    similarity = torch.cosine_similarity(
                        cell_state.unsqueeze(0), neighbor_state.unsqueeze(0), dim=1
                    ).item()

                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π
                    # –ï—Å–ª–∏ similarity > -0.5 (–Ω–µ —Å–∏–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ), —Å—á–∏—Ç–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
                    effective_threshold = min(
                        threshold, -0.3
                    )  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤

                    if similarity >= effective_threshold:
                        functional_connections.append(
                            ConnectionInfo(
                                source_idx=cell_idx,
                                target_idx=conn.target_idx,
                                euclidean_distance=conn.euclidean_distance,
                                manhattan_distance=conn.manhattan_distance,
                                category=ConnectionCategory.FUNCTIONAL,
                                functional_similarity=similarity,
                            )
                        )

        except IndexError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º: {e}")

        return functional_connections

    def get_batch_cached_connections(
        self,
        cell_indices: torch.Tensor,
        neighbor_indices: torch.Tensor,
        states: torch.Tensor,
        functional_similarity_threshold: float = 0.3,
    ) -> Dict[str, torch.Tensor]:
        """
        Batch –≤–µ—Ä—Å–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        Returns:
            Dict —Å –º–∞—Å–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–≤—è–∑–µ–π
        """
        batch_size, max_neighbors = neighbor_indices.shape
        device = cell_indices.device

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å–∫–∏
        local_mask = torch.zeros(
            batch_size, max_neighbors, dtype=torch.bool, device=device
        )
        functional_mask = torch.zeros(
            batch_size, max_neighbors, dtype=torch.bool, device=device
        )
        distant_mask = torch.zeros(
            batch_size, max_neighbors, dtype=torch.bool, device=device
        )
        valid_mask = neighbor_indices >= 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–ª–µ—Ç–∫—É –≤ batch
        for batch_idx in range(batch_size):
            cell_idx = cell_indices[batch_idx].item()
            neighbors = neighbor_indices[batch_idx]
            valid_neighbors = neighbors[neighbors >= 0].tolist()

            if not valid_neighbors:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞
            classifications = self.get_cached_connections(
                cell_idx, valid_neighbors, states, functional_similarity_threshold
            )

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å–∫–∏
            for neighbor_pos, neighbor_idx in enumerate(neighbors):
                if neighbor_idx < 0:
                    continue

                neighbor_idx = neighbor_idx.item()

                # –ò—â–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                for category, connections in classifications.items():
                    for conn in connections:
                        if conn.target_idx == neighbor_idx:
                            if category == ConnectionCategory.LOCAL:
                                local_mask[batch_idx, neighbor_pos] = True
                            elif category == ConnectionCategory.FUNCTIONAL:
                                functional_mask[batch_idx, neighbor_pos] = True
                            elif category == ConnectionCategory.DISTANT:
                                distant_mask[batch_idx, neighbor_pos] = True
                            break

        return {
            "local_mask": local_mask,
            "functional_mask": functional_mask,
            "distant_mask": distant_mask,
            "valid_mask": valid_mask,
        }

    def get_cache_stats(self) -> Dict[str, any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.cache:
            return {"status": "empty"}

        total_connections = 0
        local_count = 0
        functional_candidates_count = 0
        distant_count = 0

        for cell_data in self.cache.values():
            local_count += len(cell_data["local"])
            functional_candidates_count += len(cell_data["functional_candidates"])
            distant_count += len(cell_data["distant"])

        total_connections = local_count + functional_candidates_count + distant_count

        return {
            "status": "active",
            "cached_cells": len(self.cache),
            "total_connections": total_connections,
            "local_connections": local_count,
            "functional_candidates": functional_candidates_count,
            "distant_connections": distant_count,
            "cache_size_mb": len(pickle.dumps(self.cache)) / (1024 * 1024),
            "distance_cache_entries": len(self.distance_cache),
        }

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self.cache.clear()
        self.distance_cache.clear()
        self.neighbor_cache.clear()
        logger.info("–ö—ç—à –æ—á–∏—â–µ–Ω")
