#!/usr/bin/env python3
"""
Connection Cache Manager - Pre-computed –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π
========================================================================

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ pre-compute —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä:
1. Pre-computed —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏ –∫–ª–µ—Ç–æ–∫
2. Pre-computed –±–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (LOCAL/DISTANT)
3. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ candidate —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è FUNCTIONAL —Å–≤—è–∑–µ–π
4. –ë—ã—Å—Ç—Ä–∞—è lookup —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π

–ü–†–ò–ù–¶–ò–ü–´:
- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
- –¢–æ–ª—å–∫–æ functional_similarity –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
- Massive speedup –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π
- Memory-efficient —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å sparse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
"""

import torch
import numpy as np
from typing import Dict, List, Tuple, Optional, Set, Any
from dataclasses import dataclass, asdict
from pathlib import Path
import pickle
import hashlib
import os
import time
import math

from .connection_types import ConnectionCategory, ConnectionInfo
from .distance_calculator import DistanceCalculator
from ...config import get_project_config
from ...utils.logging import get_logger

logger = get_logger(__name__)


@dataclass
class CachedConnectionInfo:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤—è–∑–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""

    target_idx: int
    euclidean_distance: float
    manhattan_distance: float
    category: (
        ConnectionCategory  # LOCAL –∏–ª–∏ DISTANT (FUNCTIONAL –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    )


class ConnectionCacheManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–µ–π —Å pre-computed —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏

    –ö–ª—é—á–µ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
    1. Pre-computed distance matrices (sparse)
    2. Pre-computed –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ LOCAL/DISTANT
    3. Candidate —Å–ø–∏—Å–∫–∏ –¥–ª—è FUNCTIONAL –ø—Ä–æ–≤–µ—Ä–∫–∏
    4. Batch lookup —Ç–∞–±–ª–∏—Ü—ã
    """

    def __init__(
        self,
        lattice_dimensions: Tuple[int, int, int],
        cache_config: Optional[Dict] = None,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à –º–µ–Ω–µ–¥–∂–µ—Ä–∞

        Args:
            lattice_dimensions: –†–∞–∑–º–µ—Ä—ã 3D —Ä–µ—à–µ—Ç–∫–∏ (x, y, z)
            cache_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        logger.debug_init(f"[ConnectionCacheManager.__init__] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–º: {lattice_dimensions}")
        self.lattice_dimensions = lattice_dimensions
        self.total_cells = np.prod(lattice_dimensions)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            config = get_project_config()
            logger.debug_init(f"[ConnectionCacheManager.__init__] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω project config: {config.__class__.__name__}")
        except Exception as e:
            logger.error(f"Failed to get project config: {e}")
            raise
            
        if cache_config is None:
            self.cache_config = asdict(config.cache) if config.cache else {}
        else:
            self.cache_config = cache_config
            
        logger.debug_init(f"[ConnectionCacheManager.__init__] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∞ (–ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–∑ UnifiedConnectionClassifier): {self.cache_config}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π adaptive_radius
        try:
            self.adaptive_radius = config.calculate_adaptive_radius()
            logger.debug_init(f"[ConnectionCacheManager.__init__] –í—ã—á–∏—Å–ª–µ–Ω adaptive_radius –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.adaptive_radius}")
        except Exception as e:
            logger.error(f"Failed to calculate adaptive radius: {e}")
            raise

        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π, –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ adaptive_radius
        try:
            self.local_threshold = (
                self.adaptive_radius * config.lattice.local_distance_ratio
            )
            self.functional_threshold = (
                self.adaptive_radius * config.lattice.functional_distance_ratio
            )
            self.distant_threshold = (
                self.adaptive_radius * config.lattice.distant_distance_ratio
            )
            logger.debug_init(f"[ConnectionCacheManager.__init__] –í—ã—á–∏—Å–ª–µ–Ω—ã –ø–æ—Ä–æ–≥–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ adaptive_radius –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞:")
            logger.debug_init(f"  - LOCAL threshold: {self.local_threshold} (radius * {config.lattice.local_distance_ratio})")
            logger.debug_init(f"  - FUNCTIONAL threshold: {self.functional_threshold} (radius * {config.lattice.functional_distance_ratio})")
            logger.debug_init(f"  - DISTANT threshold: {self.distant_threshold} (radius * {config.lattice.distant_distance_ratio})")
        except Exception as e:
            logger.error(f"Failed to calculate thresholds: {e}")
            raise

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º distance calculator
        self.distance_calculator = DistanceCalculator(lattice_dimensions)

        # GPU –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
        if not torch.cuda.is_available():
            raise RuntimeError("GPU –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! RTX 5090 –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
            
        self.use_gpu = True  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GPU
        self.gpu_batch_size = self.cache_config.get("gpu_batch_size", 10000)
        self.device = torch.device("cuda")  # –í—Å–µ–≥–¥–∞ CUDA –¥–ª—è RTX 5090

        # –ö—ç—à —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.cache: Dict[int, Dict[str, List[CachedConnectionInfo]]] = {}
        self.distance_cache: Dict[Tuple[int, int], Dict[str, float]] = {}
        self.is_precomputed = False
        self._all_neighbors_cache = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ _compute_all_neighbors()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º)
        self.enable_performance_monitoring = self.cache_config.get(
            "enable_performance_monitoring", False
        )
        self.enable_detailed_stats = self.cache_config.get(
            "enable_detailed_stats", False
        )

        if self.enable_performance_monitoring:
            self.cache_hits = 0
            self.cache_misses = 0
            self.total_lookup_time = 0.0
            self.total_rebuild_time = 0.0

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        approx_local_neighbors = config.estimate_neighbors_in_radius(self.local_threshold)
        approx_functional_neighbors = config.estimate_neighbors_in_radius(self.functional_threshold) - approx_local_neighbors
        approx_distant_neighbors = config.estimate_neighbors_in_radius(self.distant_threshold) - approx_local_neighbors - approx_functional_neighbors
        
        logger.info(f"üîß [ConnectionCacheManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"   –†–µ—à–µ—Ç–∫–∞: {lattice_dimensions} ({self.total_cells} –∫–ª–µ—Ç–æ–∫)")
        logger.info(f"   –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–¥–∏—É—Å: {self.adaptive_radius}")
        logger.info(
            f"   –ü–æ—Ä–æ–≥–∏: LOCAL‚â§{self.local_threshold}, FUNCTIONAL‚â§{self.functional_threshold}, DISTANT‚â§{self.distant_threshold}"
        )
        logger.info(f"   –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π:")
        logger.info(f"     - LOCAL: ~{approx_local_neighbors} –∫–ª–µ—Ç–æ–∫ (–≤ —Ä–∞–¥–∏—É—Å–µ {self.local_threshold})")
        logger.info(f"     - FUNCTIONAL: ~{approx_functional_neighbors} –∫–ª–µ—Ç–æ–∫ (–º–µ–∂–¥—É {self.local_threshold} –∏ {self.functional_threshold})")
        logger.info(f"     - DISTANT: ~{approx_distant_neighbors} –∫–ª–µ—Ç–æ–∫ (–º–µ–∂–¥—É {self.functional_threshold} –∏ {self.distant_threshold})")
        logger.info(f"   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {'–≤–∫–ª—é—á–µ–Ω' if self.enable_performance_monitoring else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        logger.info(f"   –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if self.enable_detailed_stats else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")

        # GPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if self.use_gpu:
            gpu_name = torch.cuda.get_device_name(0)
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
            logger.info(f"üöÄ [ConnectionCacheManager] GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {gpu_name} ({gpu_memory:.1f}GB)")
            logger.info(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è GPU –æ–ø–µ—Ä–∞—Ü–∏–π: {self.gpu_batch_size}")
        else:
            logger.info("üíª CPU mode: GPU not available or disabled")

    def _load_cache_from_disk(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ —Å –¥–∏—Å–∫–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        Returns:
            True –µ—Å–ª–∏ –∫—ç—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        try:
            cache_key = self._get_cache_key()
            cache_file = f"cache/connection_cache_{cache_key}.pkl"

            if not os.path.exists(cache_file):
                logger.info(f"–ö—ç—à —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {cache_file}")
                return False

            with open(cache_file, "rb") as f:
                cache_data = pickle.load(f)

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            is_compatible = True
            checks = {
                "lattice_dimensions": self.lattice_dimensions,
                "adaptive_radius": self.adaptive_radius,
                "local_threshold": self.local_threshold,
                "functional_threshold": self.functional_threshold,
                "distant_threshold": self.distant_threshold,
                "cache_version": self.cache_config.get("cache_version", "2024.1"),
            }
            if logger.isEnabledFor(10):
                logger.debug_cache("--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫—ç—à–∞ ---")

            for key, expected_value in checks.items():
                cached_value = cache_data.get(key)
                if isinstance(expected_value, float):
                    if not math.isclose(
                        cached_value if isinstance(cached_value, float) else -1.0,
                        expected_value,
                        rel_tol=1e-9,
                        abs_tol=1e-9,
                    ):
                        if logger.isEnabledFor(10):
                            logger.debug_cache(
                                f"‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢ (float): {key} | –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_value} | –í –∫—ç—à–µ: {cached_value}"
                            )
                        is_compatible = False
                elif cached_value != expected_value:
                    if logger.isEnabledFor(10):
                        logger.debug_cache(
                            f"‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢: {key} | –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_value} | –í –∫—ç—à–µ: {cached_value}"
                        )
                    is_compatible = False
                else:
                    if logger.isEnabledFor(10):
                        logger.debug_cache(f"‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç: {key} = {cached_value}")

            if not is_compatible:
                logger.info("–ö—ç—à –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ.")
                return False

            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.cache = cache_data["cache"]
            self.distance_cache = cache_data["distance_cache"]
            self.total_cells = cache_data["total_cells"]
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º _all_neighbors_cache –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞
            self._restore_all_neighbors_cache_from_cache()
            
            logger.info(f"‚úÖ –ö—ç—à —Å–æ–≤–º–µ—Å—Ç–∏–º –∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å –¥–∏—Å–∫–∞: {cache_file}")
            logger.info(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª–µ—Ç–æ–∫ –≤ –∫—ç—à–µ: {len(self.cache)}")
            logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–π –∫—ç—à–∞: {list(self.cache.keys())[:10]}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            return False

    def _restore_all_neighbors_cache_from_cache(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç _all_neighbors_cache –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—ç—à–∞"""
        if not self.cache:
            logger.warning("–û—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à –ø—É—Å—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å _all_neighbors_cache")
            return
            
        self._all_neighbors_cache = {}
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å–æ—Å–µ–¥–µ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—ç—à–∞
        for cell_idx, connections in self.cache.items():
            neighbors = set()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ—Å–µ–¥–µ–π –∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π
            for conn_type in ["local", "functional_candidates", "distant"]:
                if conn_type in connections:
                    for conn_info in connections[conn_type]:
                        neighbors.add(conn_info.target_idx)
            
            self._all_neighbors_cache[cell_idx] = list(neighbors)
        
        total_neighbors = sum(len(neighbors) for neighbors in self._all_neighbors_cache.values())
        avg_neighbors = total_neighbors / len(self._all_neighbors_cache) if self._all_neighbors_cache else 0
        
        logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω _all_neighbors_cache –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—ç—à–∞:")
        logger.info(f"   –ö–ª–µ—Ç–æ–∫: {len(self._all_neighbors_cache)}")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –Ω–∞ –∫–ª–µ—Ç–∫—É: {avg_neighbors:.1f}")

    def _get_cache_key(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        key_data = {
            "lattice_dimensions": self.lattice_dimensions,
            "adaptive_radius": self.adaptive_radius,
            "local_threshold": self.local_threshold,
            "functional_threshold": self.functional_threshold,
            "distant_threshold": self.distant_threshold,
            "cache_version": self.cache_config.get("cache_version", "2024.1"),
            # GPU/CPU –∫—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º, —É–±–∏—Ä–∞–µ–º GPU –∏–∑ –∫–ª—é—á–∞
        }
        if logger.isEnabledFor(10):
            logger.debug_cache(f"üîë Cache key data: {key_data}")

        key_str = str(sorted(key_data.items()))
        return hashlib.md5(key_str.encode()).hexdigest()

    def _save_cache_to_disk(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞ –¥–∏—Å–∫ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        try:
            os.makedirs("cache", exist_ok=True)
            cache_key = self._get_cache_key()
            cache_file = f"cache/connection_cache_{cache_key}.pkl"

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
            cache_data = {
                "cache": self.cache,
                "distance_cache": self.distance_cache,
                "adaptive_radius": self.adaptive_radius,
                "lattice_dimensions": self.lattice_dimensions,
                "local_threshold": self.local_threshold,
                "functional_threshold": self.functional_threshold,
                "distant_threshold": self.distant_threshold,
                "total_cells": self.total_cells,
                "cache_version": self.cache_config.get("cache_version", "2024.1"),
                "timestamp": time.time(),
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è (–Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                "created_with_gpu": self.use_gpu,
                "creator_device": (
                    torch.cuda.get_device_name(0)
                    if self.use_gpu and torch.cuda.is_available()
                    else "CPU"
                ),
            }

            with open(cache_file, "wb") as f:
                pickle.dump(cache_data, f)

            logger.info(f"‚úÖ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {cache_file}")
            logger.info(f"   –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(self.cache)} –∫–ª–µ—Ç–æ–∫")
            logger.info(f"   Adaptive radius: {self.adaptive_radius}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")

    def precompute_all_connections(self, force_rebuild: bool = False):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤—è–∑–µ–π.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPU –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ.
        """
        if self.is_precomputed and not force_rebuild:
            logger.info("‚úÖ –ö—ç—à —É–∂–µ –≤ –ø–∞–º—è—Ç–∏, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.")
            return

        if not force_rebuild and self._load_cache_from_disk():
            self.is_precomputed = True
            return

        # --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞ ---
        logger.info("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π...")
        rebuild_start_time = time.time()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
        all_neighbors = self._compute_all_neighbors()

        # Pre-compute –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
        for cell_idx in range(self.total_cells):
            neighbors = all_neighbors[cell_idx]
            if not neighbors:
                continue

            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –¥–ª—è —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏
            cell_connections = self._precompute_cell_connections(cell_idx, neighbors)
            self.cache[cell_idx] = cell_connections

            # –ü—Ä–æ–≥—Ä–µ—Å—Å –ª–æ–≥
            if cell_idx % 1000 == 0:
                logger.debug_cache(f"Pre-computed {cell_idx}/{self.total_cells} –∫–ª–µ—Ç–æ–∫")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –Ω–∞ –¥–∏—Å–∫
        self._save_cache_to_disk()

        self.is_precomputed = True
        logger.info(f"‚úÖ Pre-compute –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(self.cache)} –∫–ª–µ—Ç–æ–∫")
        logger.info(
            f"   –í—Ä–µ–º—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è: {time.time() - rebuild_start_time:.2f} —Å–µ–∫—É–Ω–¥"
        )

    def _compute_all_neighbors(self) -> Dict[int, List[int]]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ adaptive_radius"""
        if self._all_neighbors_cache is not None:
            return self._all_neighbors_cache

        if self.use_gpu:
            logger.info("üöÄ –í—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –Ω–∞ GPU...")
            self._all_neighbors_cache = self._compute_all_neighbors_gpu()
            return self._all_neighbors_cache
        else:
            logger.error("‚ùå GPU –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π")
            raise RuntimeError("GPU –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å RTX 5090")

    def _compute_all_neighbors_cpu(self) -> Dict[int, List[int]]:
        """CPU –≤–µ—Ä—Å–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π"""
        all_neighbors = {}
        x_dim, y_dim, z_dim = self.lattice_dimensions

        for cell_idx in range(self.total_cells):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –≤ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x = cell_idx % x_dim
            y = (cell_idx // x_dim) % y_dim
            z = cell_idx // (x_dim * y_dim)

            neighbors = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
            for dx in range(
                -int(self.adaptive_radius) - 1, int(self.adaptive_radius) + 2
            ):
                for dy in range(
                    -int(self.adaptive_radius) - 1, int(self.adaptive_radius) + 2
                ):
                    for dz in range(
                        -int(self.adaptive_radius) - 1, int(self.adaptive_radius) + 2
                    ):
                        if dx == 0 and dy == 0 and dz == 0:
                            continue

                        nx, ny, nz = x + dx, y + dy, z + dz

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                        if 0 <= nx < x_dim and 0 <= ny < y_dim and 0 <= nz < z_dim:
                            neighbor_idx = nx + ny * x_dim + nz * (x_dim * y_dim)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                            distance = np.sqrt(dx * dx + dy * dy + dz * dz)
                            if distance <= self.adaptive_radius:
                                neighbors.append(neighbor_idx)

            all_neighbors[cell_idx] = neighbors

        self._all_neighbors_cache = all_neighbors
        logger.info(f"‚úÖ –í—ã—á–∏—Å–ª–µ–Ω—ã —Å–æ—Å–µ–¥–∏ –¥–ª—è {len(all_neighbors)} –∫–ª–µ—Ç–æ–∫")
        return all_neighbors

    def _compute_all_neighbors_gpu(self) -> Dict[int, List[int]]:
        """GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π"""
        try:
            x_dim, y_dim, z_dim = self.lattice_dimensions

            # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –Ω–∞ GPU
            all_indices = torch.arange(self.total_cells, device=self.device)

            x_coords = all_indices % x_dim
            y_coords = (all_indices // x_dim) % y_dim
            z_coords = all_indices // (x_dim * y_dim)

            all_coords = torch.stack([x_coords, y_coords, z_coords], dim=1).float()

            logger.info(
                f"üíæ GPU memory –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {all_coords.numel() * 4 / 1024**2:.1f}MB"
            )

            all_neighbors = {}
            batch_size = min(self.gpu_batch_size, self.total_cells)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            for start_idx in range(0, self.total_cells, batch_size):
                end_idx = min(start_idx + batch_size, self.total_cells)
                batch_coords = all_coords[start_idx:end_idx]

                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∫–ª–µ—Ç–æ–∫
                # batch_coords: [batch_size, 3], all_coords: [total_cells, 3]
                distances = torch.cdist(
                    batch_coords, all_coords
                )  # [batch_size, total_cells]

                # –ù–∞—Ö–æ–¥–∏–º —Å–æ—Å–µ–¥–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ (–∏—Å–∫–ª—é—á–∞—è —Å–∞–º—É –∫–ª–µ—Ç–∫—É)
                for i, cell_idx in enumerate(range(start_idx, end_idx)):
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º distant_threshold –≤–º–µ—Å—Ç–æ adaptive_radius
                    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ—Å–µ–¥–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    neighbor_mask = (distances[i] <= self.distant_threshold) & (
                        distances[i] > 0
                    )
                    neighbor_indices = torch.where(neighbor_mask)[0].cpu().tolist()
                    all_neighbors[cell_idx] = neighbor_indices

                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º GPU –ø–∞–º—è—Ç—å
                del distances
                torch.cuda.empty_cache()

                if start_idx % (batch_size * 10) == 0:
                    logger.info(
                        f"üöÄ GPU: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {end_idx}/{self.total_cells} –∫–ª–µ—Ç–æ–∫"
                    )

            self._all_neighbors_cache = all_neighbors
            logger.info(f"‚úÖ GPU: –í—ã—á–∏—Å–ª–µ–Ω—ã —Å–æ—Å–µ–¥–∏ –¥–ª—è {len(all_neighbors)} –∫–ª–µ—Ç–æ–∫")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            total_neighbors = sum(len(neighbors) for neighbors in all_neighbors.values())
            avg_neighbors = total_neighbors / len(all_neighbors) if all_neighbors else 0
            logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –Ω–∞ –∫–ª–µ—Ç–∫—É: {avg_neighbors:.1f}")
            logger.info(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–æ—Ä–æ–≥: {self.distant_threshold} (distant_threshold)")
            
            return all_neighbors

        except Exception as e:
            logger.warning(f"GPU computation failed, falling back to CPU: {e}")
            return self._compute_all_neighbors_cpu()

    def _precompute_cell_connections(
        self, cell_idx: int, neighbor_indices: List[int]
    ) -> Dict[str, List[CachedConnectionInfo]]:
        """Pre-compute –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–≤—è–∑–µ–π –¥–ª—è –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏"""
        connections = {
            "local": [],
            "functional_candidates": [],  # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            "distant": [],
        }

        for neighbor_idx in neighbor_indices:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            euclidean_dist = self.distance_calculator.euclidean_distance(
                cell_idx, neighbor_idx
            )
            manhattan_dist = self.distance_calculator.manhattan_distance(
                cell_idx, neighbor_idx
            )

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            self.distance_cache[(cell_idx, neighbor_idx)] = {
                "euclidean": euclidean_dist,
                "manhattan": manhattan_dist,
            }

            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            # LOCAL: 0 < distance < local_threshold
            if euclidean_dist < self.local_threshold:
                category = ConnectionCategory.LOCAL
                connections["local"].append(
                    CachedConnectionInfo(
                        target_idx=neighbor_idx,
                        euclidean_distance=euclidean_dist,
                        manhattan_distance=manhattan_dist,
                        category=category,
                    )
                )

            # FUNCTIONAL: local_threshold ‚â§ distance ‚â§ functional_threshold
            elif euclidean_dist <= self.functional_threshold:
                # –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                connections["functional_candidates"].append(
                    CachedConnectionInfo(
                        target_idx=neighbor_idx,
                        euclidean_distance=euclidean_dist,
                        manhattan_distance=manhattan_dist,
                        category=ConnectionCategory.FUNCTIONAL,  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ
                    )
                )

            # DISTANT: functional_threshold < distance ‚â§ distant_threshold
            else:
                category = ConnectionCategory.DISTANT
                connections["distant"].append(
                    CachedConnectionInfo(
                        target_idx=neighbor_idx,
                        euclidean_distance=euclidean_dist,
                        manhattan_distance=manhattan_dist,
                        category=category,
                    )
                )

        return connections

    def get_neighbors_and_classification(
        self, 
        cell_idx: int, 
        states: Optional[torch.Tensor] = None,
        functional_similarity_threshold: float = 0.3
    ) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å–µ–¥–µ–π –ò –∏—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
        
        Args:
            cell_idx: –ò–Ω–¥–µ–∫—Å –∫–ª–µ—Ç–∫–∏
            states: –°–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            functional_similarity_threshold: –ü–æ—Ä–æ–≥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏
            
        Returns:
            {
                "local": {"indices": [...], "states": tensor, "connections": [ConnectionInfo]},
                "functional": {"indices": [...], "states": tensor, "connections": [ConnectionInfo]},
                "distant": {"indices": [...], "states": tensor, "connections": [ConnectionInfo]}
            }
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –∏–∑ –∫—ç—à–∞
        if self._all_neighbors_cache is None:
            logger.warning("‚ö†Ô∏è _all_neighbors_cache not initialized, computing neighbors now...")
            self._all_neighbors_cache = self._compute_all_neighbors()
            
        if cell_idx not in self._all_neighbors_cache:
            logger.warning(f"Cell {cell_idx} not found in cache, returning empty neighbors")
            return {
                "local": {"indices": [], "states": torch.empty(0, self.state_size), "connections": []},
                "functional": {"indices": [], "states": torch.empty(0, self.state_size), "connections": []},
                "distant": {"indices": [], "states": torch.empty(0, self.state_size), "connections": []}
            }
            
        neighbor_indices = self._all_neighbors_cache[cell_idx]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        classified_connections = self.get_cached_connections(
            cell_idx=cell_idx,
            neighbor_indices=neighbor_indices,
            states=states,
            functional_similarity_threshold=functional_similarity_threshold
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        result = {}
        for category in [ConnectionCategory.LOCAL, ConnectionCategory.FUNCTIONAL, ConnectionCategory.DISTANT]:
            connections = classified_connections.get(category, [])
            indices = [conn.target_idx for conn in connections]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å–µ–¥–µ–π –µ—Å–ª–∏ states –ø–µ—Ä–µ–¥–∞–Ω—ã
            if states is not None and indices:
                if states.dim() == 3:  # [batch, num_cells, state_size]
                    neighbor_states = states[0, indices, :]
                elif states.dim() == 2:  # [num_cells, state_size]
                    neighbor_states = states[indices]
                else:
                    raise RuntimeError(f"Unexpected states dimension: {states.shape}")
            else:
                neighbor_states = torch.empty(0, self.state_size if hasattr(self, 'state_size') else states.shape[-1] if states is not None else 0)
                
            category_name = category.value.lower()
            result[category_name] = {
                "indices": indices,
                "states": neighbor_states,
                "connections": connections
            }
            
        return result

    def get_cached_connections(
        self,
        cell_idx: int,
        neighbor_indices: List[int],
        states: Optional[torch.Tensor] = None,
        functional_similarity_threshold: float = 0.3,
    ) -> Dict[ConnectionCategory, List[ConnectionInfo]]:
        """
        –ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞

        Args:
            cell_idx: –ò–Ω–¥–µ–∫—Å –∫–ª–µ—Ç–∫–∏
            neighbor_indices: –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ—Å–µ–¥–µ–π
            states: –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            functional_similarity_threshold: –ü–æ—Ä–æ–≥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏

        Returns:
            –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫—ç—à–∞
        if not self.is_precomputed:
            logger.warning("‚ö†Ô∏è Cache not precomputed, initializing now...")
            self.precompute_all_connections(force_rebuild=False)
            
        if cell_idx not in self.cache:
            logger.warning(f"–ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–µ—Ç–∫–∏ {cell_idx}")
            logger.debug_cache(f"Cache size: {len(self.cache)}, Cache keys sample: {list(self.cache.keys())[:10] if self.cache else 'Empty'}")
            logger.debug_cache(f"Looking for cell_idx: {cell_idx}, type: {type(cell_idx)}")
            return {cat: [] for cat in ConnectionCategory}

        cached_data = self.cache[cell_idx]
        result = {cat: [] for cat in ConnectionCategory}

        # –°–æ–∑–¥–∞–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        neighbor_set = set(neighbor_indices)
        
        # DEBUG: Log cache contents and neighbor indices
        logger.debug_cache(f"üîç get_cached_connections for cell {cell_idx}:")
        logger.debug_cache(f"   neighbor_indices: {list(neighbor_indices)[:10]}... (len={len(neighbor_indices)})")
        logger.debug_cache(f"   cached_data type: {type(cached_data)}")
        logger.debug_cache(f"   cached_data keys: {list(cached_data.keys()) if isinstance(cached_data, dict) else 'Not a dict!'}")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if isinstance(cached_data, dict):
            if ConnectionCategory.LOCAL in cached_data:
                local_count = len(cached_data.get(ConnectionCategory.LOCAL, []))
                functional_count = len(cached_data.get(ConnectionCategory.FUNCTIONAL, []))
                distant_count = len(cached_data.get(ConnectionCategory.DISTANT, []))
            else:
                local_count = len(cached_data.get('local', []))
                functional_count = len(cached_data.get('functional_candidates', []))
                distant_count = len(cached_data.get('distant', []))
        else:
            local_count = 'N/A'
            functional_count = 'N/A'
            distant_count = 'N/A'
            
        logger.debug_cache(f"   cached local connections: {local_count}")
        logger.debug_cache(f"   cached functional_candidates: {functional_count}")
        logger.debug_cache(f"   cached distant connections: {distant_count}")
        
        # Check first few cached connections
        if isinstance(cached_data, dict) and cached_data.get('local'):
            first_local = cached_data['local'][0]
            if hasattr(first_local, 'target_idx'):
                logger.debug_cache(f"   First local connection target_idx: {first_local.target_idx}")
            else:
                logger.debug_cache(f"   First local connection target_idx: {first_local.get('target_idx', 'N/A')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—ç—à–∞
        if not isinstance(cached_data, dict):
            logger.error(f"‚ùå Cache data for cell {cell_idx} is not a dict: {type(cached_data)}")
            return {cat: [] for cat in ConnectionCategory}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (string –∏ enum)
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏, –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç enum
        has_string_keys = "local" in cached_data
        has_enum_keys = ConnectionCategory.LOCAL in cached_data
        
        if not has_string_keys and not has_enum_keys:
            logger.error(f"‚ùå Cache data for cell {cell_idx} has unexpected format")
            logger.error(f"   Available keys: {list(cached_data.keys())}")
            return {cat: [] for cat in ConnectionCategory}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        if has_enum_keys:
            local_key = ConnectionCategory.LOCAL
            functional_key = ConnectionCategory.FUNCTIONAL
            distant_key = ConnectionCategory.DISTANT
        else:
            local_key = "local"
            functional_key = "functional_candidates"
            distant_key = "distant"
        
        # LOCAL —Å–≤—è–∑–∏ - –ø—Ä—è–º–æ –∏–∑ –∫—ç—à–∞
        for conn in cached_data.get(local_key, []):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –æ–±—ä–µ–∫—Ç CachedConnectionInfo –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
            if hasattr(conn, 'target_idx'):
                target_idx = conn.target_idx
                euclidean_distance = conn.euclidean_distance
                manhattan_distance = conn.manhattan_distance
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞)
                target_idx = conn['target_idx']
                euclidean_distance = conn['euclidean_distance']
                manhattan_distance = conn['manhattan_distance']
                
            if target_idx in neighbor_set:
                result[ConnectionCategory.LOCAL].append(
                    ConnectionInfo(
                        source_idx=cell_idx,
                        target_idx=target_idx,
                        euclidean_distance=euclidean_distance,
                        manhattan_distance=manhattan_distance,
                        category=ConnectionCategory.LOCAL,
                    )
                )

        # DISTANT —Å–≤—è–∑–∏ - –ø—Ä—è–º–æ –∏–∑ –∫—ç—à–∞
        for conn in cached_data.get(distant_key, []):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –æ–±—ä–µ–∫—Ç CachedConnectionInfo –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
            if hasattr(conn, 'target_idx'):
                target_idx = conn.target_idx
                euclidean_distance = conn.euclidean_distance
                manhattan_distance = conn.manhattan_distance
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞)
                target_idx = conn['target_idx']
                euclidean_distance = conn['euclidean_distance']
                manhattan_distance = conn['manhattan_distance']
                
            if target_idx in neighbor_set:
                result[ConnectionCategory.DISTANT].append(
                    ConnectionInfo(
                        source_idx=cell_idx,
                        target_idx=target_idx,
                        euclidean_distance=euclidean_distance,
                        manhattan_distance=manhattan_distance,
                        category=ConnectionCategory.DISTANT,
                    )
                )

        # FUNCTIONAL –∫–∞–Ω–¥–∏–¥–∞—Ç—ã - —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ similarity
        functional_candidates = []
        for conn in cached_data.get(functional_key, []):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –æ–±—ä–µ–∫—Ç CachedConnectionInfo –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
            if hasattr(conn, 'target_idx'):
                target_idx = conn.target_idx
            else:
                target_idx = conn['target_idx']
                
            if target_idx in neighbor_set:
                functional_candidates.append(conn)

        if functional_candidates and states is not None:
            # –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            functional_connections = self._check_functional_similarity(
                cell_idx, functional_candidates, states, functional_similarity_threshold
            )
            result[ConnectionCategory.FUNCTIONAL].extend(functional_connections)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è FUNCTIONAL (–Ω–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è DISTANT)
            # –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            functional_indices = {conn.target_idx for conn in functional_connections}
            for conn in functional_candidates:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                if hasattr(conn, 'target_idx'):
                    target_idx = conn.target_idx
                    euclidean_distance = conn.euclidean_distance
                    manhattan_distance = conn.manhattan_distance
                else:
                    target_idx = conn['target_idx']
                    euclidean_distance = conn['euclidean_distance']
                    manhattan_distance = conn['manhattan_distance']
                    
                if target_idx not in functional_indices:
                    result[ConnectionCategory.FUNCTIONAL].append(
                        ConnectionInfo(
                            source_idx=cell_idx,
                            target_idx=target_idx,
                            euclidean_distance=euclidean_distance,
                            manhattan_distance=manhattan_distance,
                            category=ConnectionCategory.FUNCTIONAL,
                        )
                    )
        else:
            # –ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ similarity –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è FUNCTIONAL
            for conn in functional_candidates:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                if hasattr(conn, 'target_idx'):
                    target_idx = conn.target_idx
                    euclidean_distance = conn.euclidean_distance
                    manhattan_distance = conn.manhattan_distance
                else:
                    target_idx = conn['target_idx']
                    euclidean_distance = conn['euclidean_distance']
                    manhattan_distance = conn['manhattan_distance']
                    
                result[ConnectionCategory.FUNCTIONAL].append(
                    ConnectionInfo(
                        source_idx=cell_idx,
                        target_idx=target_idx,
                        euclidean_distance=euclidean_distance,
                        manhattan_distance=manhattan_distance,
                        category=ConnectionCategory.FUNCTIONAL,
                    )
                )

        return result

    def _check_functional_similarity(
        self,
        cell_idx: int,
        candidates: List[CachedConnectionInfo],
        states: torch.Tensor,
        threshold: float,
    ) -> List[ConnectionInfo]:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        if not candidates:
            return []

        functional_connections = []

        try:
            cell_state = states[cell_idx]

            for conn in candidates:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                if hasattr(conn, 'target_idx'):
                    target_idx = conn.target_idx
                    euclidean_distance = conn.euclidean_distance
                    manhattan_distance = conn.manhattan_distance
                else:
                    target_idx = conn['target_idx']
                    euclidean_distance = conn['euclidean_distance']
                    manhattan_distance = conn['manhattan_distance']
                    
                if target_idx < states.shape[0]:
                    neighbor_state = states[target_idx]

                    # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (keep on GPU)
                    similarity_tensor = torch.cosine_similarity(
                        cell_state.unsqueeze(0), neighbor_state.unsqueeze(0), dim=1
                    )
                    similarity = similarity_tensor.squeeze().cpu().item()

                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π
                    # –ï—Å–ª–∏ similarity > -0.5 (–Ω–µ —Å–∏–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ), —Å—á–∏—Ç–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
                    effective_threshold = min(
                        threshold, -0.3
                    )  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤

                    if similarity >= effective_threshold:
                        functional_connections.append(
                            ConnectionInfo(
                                source_idx=cell_idx,
                                target_idx=target_idx,
                                euclidean_distance=euclidean_distance,
                                manhattan_distance=manhattan_distance,
                                category=ConnectionCategory.FUNCTIONAL,
                                functional_similarity=similarity,
                            )
                        )

        except IndexError as e:
            logger.warning(f"‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º: {e}")

        return functional_connections

    def get_batch_cached_connections(
        self,
        cell_indices: torch.Tensor,
        neighbor_indices: torch.Tensor,
        states: torch.Tensor,
        functional_similarity_threshold: float = 0.3,
    ) -> Dict[str, torch.Tensor]:
        """
        Batch –≤–µ—Ä—Å–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        Returns:
            Dict —Å –º–∞—Å–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–≤—è–∑–µ–π
        """
        batch_size, max_neighbors = neighbor_indices.shape
        device = cell_indices.device

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å–∫–∏
        local_mask = torch.zeros(
            batch_size, max_neighbors, dtype=torch.bool, device=device
        )
        functional_mask = torch.zeros(
            batch_size, max_neighbors, dtype=torch.bool, device=device
        )
        distant_mask = torch.zeros(
            batch_size, max_neighbors, dtype=torch.bool, device=device
        )
        valid_mask = neighbor_indices >= 0

        # Convert to CPU once for batch processing - avoid repeated .item() calls
        cell_indices_cpu = cell_indices.cpu().numpy()
        neighbor_indices_cpu = neighbor_indices.cpu().numpy()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–ª–µ—Ç–∫—É –≤ batch
        for batch_idx in range(batch_size):
            cell_idx = int(cell_indices_cpu[batch_idx])
            neighbors = neighbor_indices_cpu[batch_idx]
            valid_neighbors = neighbors[neighbors >= 0].tolist()

            if not valid_neighbors:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞
            classifications = self.get_cached_connections(
                cell_idx, valid_neighbors, states, functional_similarity_threshold
            )

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å–∫–∏
            for neighbor_pos, neighbor_idx in enumerate(neighbors):
                if neighbor_idx < 0:
                    continue

                neighbor_idx_val = int(neighbor_idx)

                # –ò—â–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                for category, connections in classifications.items():
                    for conn in connections:
                        if conn.target_idx == neighbor_idx_val:
                            if category == ConnectionCategory.LOCAL:
                                local_mask[batch_idx, neighbor_pos] = True
                            elif category == ConnectionCategory.FUNCTIONAL:
                                functional_mask[batch_idx, neighbor_pos] = True
                            elif category == ConnectionCategory.DISTANT:
                                distant_mask[batch_idx, neighbor_pos] = True
                            break

        return {
            "local_mask": local_mask,
            "functional_mask": functional_mask,
            "distant_mask": distant_mask,
            "valid_mask": valid_mask,
        }

    def get_cache_stats(self) -> Dict[str, any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.cache:
            return {"status": "empty"}

        total_connections = 0
        local_count = 0
        functional_candidates_count = 0
        distant_count = 0

        for cell_data in self.cache.values():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫—ç—à–∞ - —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –∏–ª–∏ enum
            if cell_data and isinstance(next(iter(cell_data.keys()), None), str):
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏
                local_count += len(cell_data.get("local", []))
                functional_candidates_count += len(cell_data.get("functional_candidates", []))
                distant_count += len(cell_data.get("distant", []))
            else:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å enum –∫–ª—é—á–∞–º–∏ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ)
                from .connection_types import ConnectionCategory
                local_count += len(cell_data.get(ConnectionCategory.LOCAL, []))
                functional_candidates_count += len(cell_data.get(ConnectionCategory.FUNCTIONAL, []))
                distant_count += len(cell_data.get(ConnectionCategory.DISTANT, []))

        total_connections = local_count + functional_candidates_count + distant_count

        return {
            "status": "active",
            "cached_cells": len(self.cache),
            "total_connections": total_connections,
            "local_connections": local_count,
            "functional_candidates": functional_candidates_count,
            "distant_connections": distant_count,
            "cache_size_mb": len(pickle.dumps(self.cache)) / (1024 * 1024),
            "distance_cache_entries": len(self.distance_cache),
        }

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self.cache.clear()
        self.distance_cache.clear()
        self.neighbor_cache.clear()
        logger.info("–ö—ç—à –æ—á–∏—â–µ–Ω")
