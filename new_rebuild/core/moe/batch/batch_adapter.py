#!/usr/bin/env python3
"""
Batch Processing Adapter
=======================

–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É per-cell –∏ batch –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å batch –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥.
"""

import torch
from typing import Dict, Optional, Any, List
import time

from .batch_moe_processor import BatchMoEProcessor
from ....utils.logging import get_logger
from ....config import get_project_config

logger = get_logger(__name__)


class BatchProcessingAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É per-cell –∏ batch —Ä–µ–∂–∏–º–∞–º–∏.
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç:
    - –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ batch –æ–±—Ä–∞–±–æ—Ç–∫—É
    - Fallback –Ω–∞ per-cell –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    - A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    """
    
    def __init__(
        self,
        moe_processor,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π MoEConnectionProcessor
        enable_batch: bool = True,
        batch_size_threshold: int = 4,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        enable_profiling: bool = True,
        fallback_on_error: bool = True
    ):
        self.moe_processor = moe_processor
        self.enable_batch = enable_batch
        self.batch_size_threshold = batch_size_threshold
        self.enable_profiling = enable_profiling
        self.fallback_on_error = fallback_on_error
        
        # –°–æ–∑–¥–∞–µ–º batch –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.enable_batch:
            try:
                self.batch_processor = BatchMoEProcessor(
                    moe_processor=moe_processor,
                    profile_performance=enable_profiling
                )
                logger.info("‚úÖ Batch processing adapter initialized successfully")
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize batch processor: {e}")
                self.enable_batch = False
                self.batch_processor = None
        else:
            self.batch_processor = None
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ batch –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            "batch_calls": 0,
            "batch_time_ms": 0.0,
            "cells_processed": 0,
        }
    
    # –£–î–ê–õ–ï–ù: should_use_batch - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º batch –æ–±—Ä–∞–±–æ—Ç–∫—É
    
    def process_cells(
        self,
        cell_indices: List[int],
        full_lattice_states: torch.Tensor,
        external_inputs: Optional[torch.Tensor] = None
    ) -> Dict[int, torch.Tensor]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–±–æ—Ä –∫–ª–µ—Ç–æ–∫, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞—è —Ä–µ–∂–∏–º
        
        Args:
            cell_indices: —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–ª–µ—Ç–æ–∫
            full_lattice_states: —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫
            external_inputs: –≤–Ω–µ—à–Ω–∏–µ –≤—Ö–æ–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict[cell_idx -> new_state] –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏
        """
        # –¢–û–õ–¨–ö–û BATCH –û–ë–†–ê–ë–û–¢–ö–ê - —É–±—Ä–∞–Ω–∞ fallback –ª–æ–≥–∏–∫–∞
        logger.debug_spatial(f"üîÑ Batch processing {len(cell_indices)} cells")
        return self._process_batch(cell_indices, full_lattice_states, external_inputs)
    
    def _process_batch(
        self,
        cell_indices: List[int],
        full_lattice_states: torch.Tensor,
        external_inputs: Optional[torch.Tensor] = None
    ) -> Dict[int, torch.Tensor]:
        """Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–æ–∫"""
        start_time = time.time()
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ —Ç–µ–Ω–∑–æ—Ä (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
            if isinstance(cell_indices, torch.Tensor):
                indices_tensor = cell_indices.detach().clone().to(
                    device=full_lattice_states.device, dtype=torch.long
                )
            else:
                indices_tensor = torch.tensor(
                    cell_indices,
                    device=full_lattice_states.device,
                    dtype=torch.long
                )
            
            # –í—ã–∑—ã–≤–∞–µ–º batch –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            new_states = self.batch_processor.forward(
                cell_indices=indices_tensor,
                full_lattice_states=full_lattice_states,
                external_inputs=external_inputs
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            result = {}
            for i, cell_idx in enumerate(cell_indices):
                result[cell_idx] = new_states[i]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            elapsed_ms = (time.time() - start_time) * 1000
            self.performance_stats["batch_calls"] += 1
            self.performance_stats["batch_time_ms"] += elapsed_ms
            self.performance_stats["cells_processed"] += len(cell_indices)
            
            if self.enable_profiling:
                logger.debug(
                    f"üöÄ Batch processed {len(cell_indices)} cells in {elapsed_ms:.1f}ms "
                    f"({elapsed_ms/len(cell_indices):.2f}ms per cell)"
                )
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Batch processing failed: {e}")
            logger.error(f"   cell_indices: {cell_indices}")
            logger.error(f"   full_lattice_states shape: {full_lattice_states.shape}")
            # –£–ë–†–ê–õ–ò FALLBACK - —Å—Ä–∞–∑—É –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            raise
    
    # –£–î–ê–õ–ï–ù: _process_per_cell –º–µ—Ç–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ batch –æ–±—Ä–∞–±–æ—Ç–∫—É
    
    def get_batch_performance(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É batch –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        stats = self.performance_stats.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç batch –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        if self.batch_processor:
            stats["batch_processor_stats"] = self.batch_processor.get_performance_summary()
        
        return stats
    
    def set_batch_enabled(self, enabled: bool):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å batch –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        self.enable_batch = enabled and self.batch_processor is not None
        logger.info(f"Batch processing {'enabled' if self.enable_batch else 'disabled'}")