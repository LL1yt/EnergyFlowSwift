#!/usr/bin/env python3
"""
Batch MoE Processor
==================

–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
–ó–∞–º–µ–Ω—è–µ—Ç per-cell –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é batch –æ–±—Ä–∞–±–æ—Ç–∫—É.
"""

import torch
import torch.nn as nn
from typing import Dict, Optional, Tuple, Any
import time

from .batch_neighbor_extractor import BatchNeighborExtractor
from .batch_expert_processor import BatchExpertProcessor
from ....utils.logging import get_logger
from ....utils.device_manager import get_device_manager

logger = get_logger(__name__)


class BatchMoEProcessor(nn.Module):
    """
    Batch –≤–µ—Ä—Å–∏—è MoE –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–ª–µ—Ç–æ–∫.
    
    –ö–ª—é—á–µ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
    - Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ per-cell
    - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    - –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–æ—Å–µ–¥—è–º–∏
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∞–ª–ª–æ–∫–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
    """
    
    def __init__(
        self,
        moe_processor,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π MoEConnectionProcessor
        enable_cuda_streams: bool = True,
        profile_performance: bool = False
    ):
        super().__init__()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        self.moe_processor = moe_processor
        
        # –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        self.state_size = moe_processor.state_size
        self.local_expert = moe_processor.local_expert
        self.functional_expert = moe_processor.functional_expert
        self.distant_expert = moe_processor.distant_expert
        self.gating_network = moe_processor.gating_network
        self.connection_classifier = moe_processor.connection_classifier
        self.enable_cnf = moe_processor.enable_cnf
        
        # Device management
        self.device_manager = get_device_manager()
        self.device = self.device_manager.get_device()
        
        # Batch processing –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.neighbor_extractor = BatchNeighborExtractor()
        self.expert_processor = BatchExpertProcessor(
            local_expert=self.local_expert,
            functional_expert=self.functional_expert,
            distant_expert=self.distant_expert,
            state_size=self.state_size,
            enable_cuda_streams=enable_cuda_streams
        )
        
        self.profile_performance = profile_performance
        self.performance_stats = {
            "batch_sizes": [],
            "processing_times_ms": [],
            "neighbor_extraction_ms": [],
            "expert_processing_ms": [],
            "gating_ms": [],
        }
    
    def forward(
        self,
        cell_indices: torch.Tensor,  # [batch_size] - –∏–Ω–¥–µ–∫—Å—ã –∫–ª–µ—Ç–æ–∫
        full_lattice_states: torch.Tensor,  # [total_cells, state_size]
        external_inputs: Optional[torch.Tensor] = None,  # [batch_size, state_size]
    ) -> torch.Tensor:
        """
        Batch forward pass —á–µ—Ä–µ–∑ MoE
        
        Args:
            cell_indices: –∏–Ω–¥–µ–∫—Å—ã –∫–ª–µ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            full_lattice_states: —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ —Ä–µ—à–µ—Ç–∫–∏
            external_inputs: –≤–Ω–µ—à–Ω–∏–µ –≤—Ö–æ–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            torch.Tensor: [batch_size, state_size] - –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        start_time = time.time()
        batch_size = cell_indices.shape[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
        if full_lattice_states.dim() != 2:
            raise ValueError(f"Expected 2D full_lattice_states, got {full_lattice_states.dim()}D")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        device = self.device_manager.get_device()
        cell_indices = cell_indices.to(device)
        full_lattice_states = full_lattice_states.to(device)
        if external_inputs is not None:
            external_inputs = external_inputs.to(device)
        
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_states = full_lattice_states[cell_indices]  # [batch_size, state_size]
        
        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å–µ–¥—è—Ö –¥–ª—è batch'–∞
        neighbor_start = time.time()
        batch_neighbors = self.neighbor_extractor.extract_batch_neighbors(
            cell_indices=cell_indices,
            connection_classifier=self.connection_classifier,
            full_states=full_lattice_states
        )
        neighbor_time_ms = (time.time() - neighbor_start) * 1000
        
        # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        neighbor_states_dict = {}
        
        if batch_neighbors.local_mask.any():
            neighbor_states_dict["local"] = self.neighbor_extractor.extract_neighbor_states(
                full_states=full_lattice_states,
                neighbor_indices=batch_neighbors.local_indices,
                neighbor_counts=batch_neighbors.local_counts,
                mask=batch_neighbors.local_mask
            )
        
        if batch_neighbors.functional_mask.any():
            neighbor_states_dict["functional"] = self.neighbor_extractor.extract_neighbor_states(
                full_states=full_lattice_states,
                neighbor_indices=batch_neighbors.functional_indices,
                neighbor_counts=batch_neighbors.functional_counts,
                mask=batch_neighbors.functional_mask
            )
        
        if batch_neighbors.distant_mask.any():
            neighbor_states_dict["distant"] = self.neighbor_extractor.extract_neighbor_states(
                full_states=full_lattice_states,
                neighbor_indices=batch_neighbors.distant_indices,
                neighbor_counts=batch_neighbors.distant_counts,
                mask=batch_neighbors.distant_mask
            )
        
        # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        expert_start = time.time()
        expert_outputs = self.expert_processor.process_batch(
            current_states=current_states,
            neighbor_states_dict=neighbor_states_dict,
            masks={
                "local": batch_neighbors.local_mask,
                "functional": batch_neighbors.functional_mask,
                "distant": batch_neighbors.distant_mask,
            },
            enable_cnf=self.enable_cnf
        )
        expert_time_ms = (time.time() - expert_start) * 1000
        
        # 5. –ü—Ä–∏–º–µ–Ω—è–µ–º gating network
        gating_start = time.time()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥ –¥–ª—è gating network
        if external_inputs is not None:
            gating_input = torch.cat([current_states, external_inputs], dim=-1)
        else:
            gating_input = current_states
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –æ—Ç gating network
        gating_weights = self.gating_network(gating_input)  # [batch_size, 3]
        
        # 6. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        # Stack expert outputs: [batch_size, 3, state_size]
        expert_stack = torch.stack([
            expert_outputs.local_outputs,
            expert_outputs.functional_outputs,
            expert_outputs.distant_outputs
        ], dim=1)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å–∞: [batch_size, 3, 1] * [batch_size, 3, state_size]
        gating_weights_expanded = gating_weights.unsqueeze(-1)
        weighted_outputs = expert_stack * gating_weights_expanded
        
        # –°—É–º–º–∏—Ä—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –≤—ã—Ö–æ–¥—ã
        combined_output = weighted_outputs.sum(dim=1)  # [batch_size, state_size]
        
        # 7. Residual connection
        final_output = combined_output + current_states
        
        gating_time_ms = (time.time() - gating_start) * 1000
        
        # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if self.profile_performance:
            total_time_ms = (time.time() - start_time) * 1000
            self.performance_stats["batch_sizes"].append(batch_size)
            self.performance_stats["processing_times_ms"].append(total_time_ms)
            self.performance_stats["neighbor_extraction_ms"].append(neighbor_time_ms)
            self.performance_stats["expert_processing_ms"].append(expert_time_ms)
            self.performance_stats["gating_ms"].append(gating_time_ms)
            
            logger.info(
                f"üìä Batch MoE Performance: batch_size={batch_size}, "
                f"total={total_time_ms:.1f}ms, neighbors={neighbor_time_ms:.1f}ms, "
                f"experts={expert_time_ms:.1f}ms, gating={gating_time_ms:.1f}ms"
            )
        
        return final_output
    
    def process_chunk(
        self,
        chunk_indices: torch.Tensor,
        full_lattice_states: torch.Tensor,
        external_inputs: Optional[torch.Tensor] = None
    ) -> Dict[str, torch.Tensor]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç chunk –∫–ª–µ—Ç–æ–∫ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º)
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        new_states = self.forward(
            cell_indices=chunk_indices,
            full_lattice_states=full_lattice_states,
            external_inputs=external_inputs
        )
        
        return {
            "new_states": new_states,
            "cell_indices": chunk_indices,
        }
    
    def get_performance_summary(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.performance_stats["batch_sizes"]:
            return {}
            
        import numpy as np
        
        return {
            "avg_batch_size": np.mean(self.performance_stats["batch_sizes"]),
            "avg_total_time_ms": np.mean(self.performance_stats["processing_times_ms"]),
            "avg_neighbor_time_ms": np.mean(self.performance_stats["neighbor_extraction_ms"]),
            "avg_expert_time_ms": np.mean(self.performance_stats["expert_processing_ms"]),
            "avg_gating_time_ms": np.mean(self.performance_stats["gating_ms"]),
            "total_batches_processed": len(self.performance_stats["batch_sizes"]),
        }