#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Unified Spatial Optimizer
==========================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

–ê–≤—Ç–æ—Ä: 3D Cellular Neural Network Project
–í–µ—Ä—Å–∏—è: 3.0.0 (2024-12-27)
"""

import torch
import logging
from typing import Any, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_imports():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç (DEPRECATED)
        from core.lattice.spatial_optimization import (
            SpatialOptimizer,
            MoESpatialOptimizer,
            create_spatial_optimizer,
            create_moe_spatial_optimizer
        )
        logger.info("‚úÖ DEPRECATED –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        from core.lattice.spatial_optimization import (
            UnifiedSpatialOptimizer,
            create_unified_spatial_optimizer,
            OptimizationConfig,
            OptimizationMode
        )
        logger.info("‚úÖ –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ lattice
        from core.lattice import (
            Lattice3D,
            create_lattice,
            UnifiedSpatialOptimizer,
            OptimizationConfig
        )
        logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∏–∑ lattice —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_lattice_with_unified_optimizer():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Lattice3D —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–º"""
    logger.info("üß™ –¢–µ—Å—Ç 2: Lattice3D —Å UnifiedSpatialOptimizer")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from core.lattice import create_lattice
        from config.project_config import get_project_config
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_project_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ MoE
        if config.architecture_type != "moe":
            logger.warning(f"‚ö†Ô∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–µ MoE: {config.architecture_type}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É
        logger.info(f"   üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ—Ç–∫–∏ {config.lattice_dimensions}")
        lattice = create_lattice()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UnifiedSpatialOptimizer
        optimizer_type = type(lattice.spatial_optimizer).__name__
        logger.info(f"   üîß Spatial Optimizer: {optimizer_type}")
        
        if optimizer_type != "UnifiedSpatialOptimizer":
            logger.error(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è UnifiedSpatialOptimizer, –ø–æ–ª—É—á–µ–Ω {optimizer_type}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        if hasattr(lattice.spatial_optimizer, 'config'):
            opt_config = lattice.spatial_optimizer.config
            logger.info(f"   ‚öôÔ∏è MoE –≤–∫–ª—é—á–µ–Ω: {opt_config.enable_moe}")
            logger.info(f"   üî¢ Morton –≤–∫–ª—é—á–µ–Ω: {opt_config.enable_morton_encoding}")
            logger.info(f"   üéØ –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: {lattice.spatial_optimizer.active_mode.value}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
        logger.info("   üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ forward pass...")
        initial_states = lattice.states.clone()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ forward passes
        for i in range(3):
            output_states = lattice.forward()
            logger.info(f"     –®–∞–≥ {i+1}: —Å–æ—Å—Ç–æ—è–Ω–∏—è {output_states.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        state_diff = torch.norm(lattice.states - initial_states)
        logger.info(f"   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {state_diff:.4f}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = lattice.validate_lattice()
        if "spatial_optimizer" in stats:
            spatial_stats = stats["spatial_optimizer"]
            logger.info(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {len(spatial_stats)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if hasattr(lattice, 'perf_stats') and "spatial_optimization" in lattice.perf_stats:
            perf = lattice.perf_stats["spatial_optimization"]
            logger.info(f"   ‚è±Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {perf['processing_time_ms']:.1f}ms")
            logger.info(f"   üéØ –†–µ–∂–∏–º: {perf['mode_used']}")
            logger.info(f"   üíæ –ü–∞–º—è—Ç—å: {perf['memory_usage_mb']:.1f}MB")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        lattice.cleanup()
        logger.info("   üßπ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Lattice3D: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_backward_compatibility():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    logger.info("üß™ –¢–µ—Å—Ç 3: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å DEPRECATED –∫–ª–∞—Å—Å–∞–º–∏")
    
    try:
        from core.lattice.spatial_optimization import (
            SpatialOptimizer,
            MoESpatialOptimizer,
            create_spatial_optimizer,
            create_moe_spatial_optimizer
        )
        
        dimensions = (4, 4, 4)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        logger.info("   üîß –°–æ–∑–¥–∞–Ω–∏–µ SpatialOptimizer...")
        spatial_opt = create_spatial_optimizer(dimensions)
        logger.info(f"     ‚úÖ SpatialOptimizer —Å–æ–∑–¥–∞–Ω: {type(spatial_opt).__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π
        neighbors = spatial_opt.find_neighbors_optimized((2, 2, 2), radius=1.5)
        logger.info(f"     üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ—Å–µ–¥–µ–π: {len(neighbors)}")
        
        spatial_opt.cleanup()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º MoE –≤–µ—Ä—Å–∏—é
        logger.info("   ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ MoESpatialOptimizer...")
        moe_opt = create_moe_spatial_optimizer(dimensions)
        logger.info(f"     ‚úÖ MoESpatialOptimizer —Å–æ–∑–¥–∞–Ω: {type(moe_opt).__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º MoE –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π
        moe_neighbors = moe_opt.find_neighbors_by_radius_safe(20)  # —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞
        logger.info(f"     üîç MoE –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Å–µ–¥–µ–π: {len(moe_neighbors)}")
        
        moe_opt.cleanup()
        
        logger.info("   ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False


def test_performance_comparison():
    """–¢–µ—Å—Ç 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    logger.info("üß™ –¢–µ—Å—Ç 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Unified vs Legacy")
    
    try:
        import time
        import numpy as np
        
        from core.lattice.spatial_optimization import (
            create_spatial_optimizer,
            create_unified_spatial_optimizer,
            OptimizationConfig,
            OptimizationMode
        )
        
        dimensions = (6, 6, 6)
        total_cells = dimensions[0] * dimensions[1] * dimensions[2]
        state_size = 32
        states = torch.randn(total_cells, state_size)
        
        results = {}
        
        # –¢–µ—Å—Ç Legacy SpatialOptimizer
        logger.info("   üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Legacy SpatialOptimizer...")
        legacy_opt = create_spatial_optimizer(dimensions)
        
        def simple_processor(current_state, neighbor_states, cell_idx, neighbors):
            if len(neighbors) == 0:
                return current_state
            return 0.7 * current_state + 0.3 * neighbor_states.mean(dim=0)
        
        start_time = time.time()
        legacy_result = legacy_opt.optimize_lattice_forward(states, simple_processor)
        legacy_time = time.time() - start_time
        
        results["legacy"] = {
            "time_s": legacy_time,
            "type": "CPU Legacy"
        }
        logger.info(f"     ‚è±Ô∏è Legacy: {legacy_time:.3f}s")
        legacy_opt.cleanup()
        
        # –¢–µ—Å—Ç Unified SpatialOptimizer
        logger.info("   üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UnifiedSpatialOptimizer...")
        config = OptimizationConfig(mode=OptimizationMode.AUTO)
        unified_opt = create_unified_spatial_optimizer(dimensions, config)
        
        start_time = time.time()
        unified_result = unified_opt.optimize_lattice_forward(states)
        unified_time = time.time() - start_time
        
        results["unified"] = {
            "time_s": unified_time,
            "mode_used": unified_result.mode_used.value,
            "processing_time_ms": unified_result.processing_time_ms,
            "memory_mb": unified_result.memory_usage_mb
        }
        logger.info(f"     ‚è±Ô∏è Unified: {unified_time:.3f}s")
        logger.info(f"     üéØ –†–µ–∂–∏–º: {unified_result.mode_used.value}")
        logger.info(f"     üíæ –ü–∞–º—è—Ç—å: {unified_result.memory_usage_mb:.1f}MB")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        speedup = legacy_time / unified_time if unified_time > 0 else 1.0
        logger.info(f"   üìà –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")
        
        unified_opt.cleanup()
        
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return {}


def run_migration_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Unified Spatial Optimizer")
    logger.info("=" * 70)
    
    test_results = {}
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
    test_results["imports"] = test_imports()
    
    # –¢–µ—Å—Ç 2: Lattice3D —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–º
    test_results["lattice_unified"] = test_lattice_with_unified_optimizer()
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    test_results["backward_compatibility"] = test_backward_compatibility()
    
    # –¢–µ—Å—Ç 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_results["performance"] = test_performance_comparison()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    logger.info("=" * 70)
    logger.info("üìã –û–¢–ß–ï–¢ –û –ú–ò–ì–†–ê–¶–ò–ò")
    logger.info("=" * 70)
    
    successful_tests = sum(1 for result in test_results.values() if 
                          isinstance(result, (bool, dict)) and 
                          (result is True or (isinstance(result, dict) and result)))
    
    total_tests = len(test_results)
    
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã: {successful_tests}/{total_tests}")
    
    if successful_tests == total_tests:
        logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        logger.info("üöÄ Unified Spatial Optimizer –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        logger.info("üìñ –°—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ DEPRECATED")
        logger.info("üîÑ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    else:
        logger.warning(f"‚ö†Ô∏è {total_tests - successful_tests} —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
    
    return test_results


if __name__ == "__main__":
    results = run_migration_tests()