#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Unified Spatial Optimizer
==============================================

–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π
–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á 3D —Ä–µ—à–µ—Ç–æ–∫.

–ê–≤—Ç–æ—Ä: 3D Cellular Neural Network Project
–í–µ—Ä—Å–∏—è: 3.0.0 (2024-12-27)
"""

import torch
import numpy as np
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def example_1_basic_usage():
    """–ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"""
    logger.info("üìù –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UnifiedSpatialOptimizer")
    
    from core.lattice.spatial_optimization.unified_spatial_optimizer import (
        create_unified_spatial_optimizer
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    dimensions = (8, 8, 8)
    optimizer = create_unified_spatial_optimizer(dimensions)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]
    states = torch.randn(total_cells, 32)  # 32-–º–µ—Ä–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    logger.info(f"   üîß –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ä–µ—à–µ—Ç–∫–∏ {dimensions}")
    logger.info(f"   üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {states.shape}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    result = optimizer.optimize_lattice_forward(states)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    logger.info(f"     ‚è±Ô∏è –í—Ä–µ–º—è: {result.processing_time_ms:.1f}ms")
    logger.info(f"     üéØ –†–µ–∂–∏–º: {result.mode_used.value}")
    logger.info(f"     üíæ –ü–∞–º—è—Ç—å: {result.memory_usage_mb:.1f}MB")
    logger.info(f"     üîç –°–æ—Å–µ–¥–µ–π: {result.neighbors_found}")
    
    # –û—á–∏—Å—Ç–∫–∞
    optimizer.cleanup()
    logger.info("   üßπ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


def example_2_custom_configuration():
    """–ü—Ä–∏–º–µ—Ä 2: –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    logger.info("üìù –ü—Ä–∏–º–µ—Ä 2: –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    
    from core.lattice.spatial_optimization.unified_spatial_optimizer import (
        create_unified_spatial_optimizer,
        OptimizationConfig,
        OptimizationMode
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = OptimizationConfig(
        mode=OptimizationMode.HYBRID,  # –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º
        enable_moe=False,              # –ë–µ–∑ MoE –ø–æ–∫–∞
        enable_morton_encoding=True,   # –° Morton encoding
        enable_adaptive_chunking=True, # –° adaptive chunking
        max_memory_gb=4.0,            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        target_performance_ms=20.0,   # –¶–µ–ª–µ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        fallback_enabled=True          # –° fallback
    )
    
    dimensions = (12, 12, 12)
    optimizer = create_unified_spatial_optimizer(dimensions, config)
    
    logger.info(f"   ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"     üéØ –†–µ–∂–∏–º: {config.mode.value}")
    logger.info(f"     üî¢ Morton: {config.enable_morton_encoding}")
    logger.info(f"     üì¶ Chunking: {config.enable_adaptive_chunking}")
    logger.info(f"     üíæ –ú–∞–∫—Å –ø–∞–º—è—Ç—å: {config.max_memory_gb}GB")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π
    test_coords = (6, 6, 6)
    neighbors = optimizer.find_neighbors_optimized(test_coords, radius=3.0)
    
    logger.info(f"   üîç –ü–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π –¥–ª—è {test_coords}:")
    logger.info(f"     üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ—Å–µ–¥–µ–π: {len(neighbors)}")
    logger.info(f"     üéØ –ü–µ—Ä–≤—ã–µ 10: {neighbors[:10]}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = optimizer.get_comprehensive_stats()
    unified_stats = stats['unified_optimizer']
    
    logger.info(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    logger.info(f"     üéØ –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: {unified_stats['active_mode']}")
    logger.info(f"     üî¢ Morton –≤–∫–ª—é—á–µ–Ω: {unified_stats['morton_enabled']}")
    logger.info(f"     üìù –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {unified_stats['performance_history_length']}")
    
    optimizer.cleanup()


def example_3_moe_integration():
    """–ü—Ä–∏–º–µ—Ä 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    logger.info("üìù –ü—Ä–∏–º–µ—Ä 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
    
    from core.lattice.spatial_optimization.unified_spatial_optimizer import (
        create_unified_spatial_optimizer,
        OptimizationConfig,
        OptimizationMode
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π MoE processor
    class SimpleMoEProcessor(torch.nn.Module):
        def __init__(self, state_size, num_experts=3):
            super().__init__()
            self.num_experts = num_experts
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (–ø—Ä–æ—Å—Ç—ã–µ –ª–∏–Ω–µ–π–Ω—ã–µ —Å–ª–æ–∏)
            self.experts = torch.nn.ModuleList([
                torch.nn.Linear(state_size, state_size) for _ in range(num_experts)
            ])
            
            # Gating network
            self.gate = torch.nn.Linear(state_size, num_experts)
            self.softmax = torch.nn.Softmax(dim=-1)
        
        def forward(self, current_state, neighbor_states, cell_idx, neighbor_indices, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            gate_weights = self.softmax(self.gate(current_state))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            expert_outputs = []
            for expert in self.experts:
                expert_output = expert(current_state)
                expert_outputs.append(expert_output)
            
            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            expert_outputs = torch.stack(expert_outputs, dim=-1)  # [batch, state_size, num_experts]
            gate_weights = gate_weights.unsqueeze(1)  # [batch, 1, num_experts]
            
            new_state = (expert_outputs * gate_weights).sum(dim=-1)
            
            return {"new_state": new_state}
    
    # –°–æ–∑–¥–∞–µ–º MoE processor
    state_size = 64
    moe_processor = SimpleMoEProcessor(state_size)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å MoE
    config = OptimizationConfig(
        mode=OptimizationMode.AUTO,
        enable_moe=True,                    # –í–∫–ª—é—á–∞–µ–º MoE
        enable_morton_encoding=True,
        target_performance_ms=50.0
    )
    
    dimensions = (6, 6, 6)
    optimizer = create_unified_spatial_optimizer(dimensions, config, moe_processor)
    
    logger.info(f"   ü§ñ MoE Processor —Å–æ–∑–¥–∞–Ω:")
    logger.info(f"     üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {moe_processor.num_experts}")
    logger.info(f"     üìä –†–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state_size}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]
    states = torch.randn(total_cells, state_size)
    
    logger.info(f"   üîÑ –ó–∞–ø—É—Å–∫ MoE –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    start_time = time.time()
    result = optimizer.optimize_lattice_forward(states)
    moe_time = time.time() - start_time
    
    logger.info(f"   ‚úÖ MoE –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    logger.info(f"     ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {moe_time:.3f}s")
    logger.info(f"     üèÉ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.processing_time_ms:.1f}ms")
    logger.info(f"     üéØ –†–µ–∂–∏–º: {result.mode_used.value}")
    logger.info(f"     üíæ –ü–∞–º—è—Ç—å: {result.memory_usage_mb:.1f}MB")
    logger.info(f"     üèéÔ∏è GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {result.gpu_utilization:.1%}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ MoE –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_diff = torch.norm(result.new_states - states)
    logger.info(f"     üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {state_diff:.3f}")
    
    optimizer.cleanup()


def example_4_performance_comparison():
    """–ü—Ä–∏–º–µ—Ä 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
    logger.info("üìù –ü—Ä–∏–º–µ—Ä 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤")
    
    from core.lattice.spatial_optimization.unified_spatial_optimizer import (
        create_unified_spatial_optimizer,
        OptimizationConfig,
        OptimizationMode
    )
    
    dimensions = (10, 10, 10)
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]
    state_size = 32
    states = torch.randn(total_cells, state_size)
    
    # –†–µ–∂–∏–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    modes_to_test = [
        ("CPU_ONLY", OptimizationMode.CPU_ONLY),
        ("HYBRID", OptimizationMode.HYBRID),
        ("AUTO", OptimizationMode.AUTO),
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º GPU —Ä–µ–∂–∏–º –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if torch.cuda.is_available():
        modes_to_test.append(("GPU_ONLY", OptimizationMode.GPU_ONLY))
    
    results = {}
    
    for mode_name, mode in modes_to_test:
        logger.info(f"   üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º: {mode_name}")
        
        try:
            config = OptimizationConfig(mode=mode)
            optimizer = create_unified_spatial_optimizer(dimensions, config)
            
            # –ü—Ä–æ–≥—Ä–µ–≤
            _ = optimizer.optimize_lattice_forward(states)
            
            # –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            times = []
            for i in range(5):
                start_time = time.time()
                result = optimizer.optimize_lattice_forward(states)
                elapsed = time.time() - start_time
                times.append(elapsed)
            
            avg_time = np.mean(times)
            std_time = np.std(times)
            
            results[mode_name] = {
                "avg_time_s": avg_time,
                "std_time_s": std_time,
                "mode_used": result.mode_used.value,
                "memory_mb": result.memory_usage_mb,
                "neighbors_found": result.neighbors_found
            }
            
            logger.info(f"     ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f}¬±{std_time:.3f}s")
            logger.info(f"     üéØ –†–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {result.mode_used.value}")
            logger.info(f"     üíæ –ü–∞–º—è—Ç—å: {result.memory_usage_mb:.1f}MB")
            
            optimizer.cleanup()
            
        except Exception as e:
            logger.warning(f"     ‚ö†Ô∏è –†–µ–∂–∏–º {mode_name} –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            results[mode_name] = {"error": str(e)}
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("   üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    successful_results = {k: v for k, v in results.items() if "error" not in v}
    
    if len(successful_results) > 1:
        fastest = min(successful_results.items(), key=lambda x: x[1]["avg_time_s"])
        logger.info(f"     üèÜ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π: {fastest[0]} ({fastest[1]['avg_time_s']:.3f}s)")
        
        for mode_name, result in successful_results.items():
            if mode_name != fastest[0]:
                slowdown = result["avg_time_s"] / fastest[1]["avg_time_s"]
                logger.info(f"     üìà {mode_name}: {slowdown:.2f}x –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
    
    return results


def example_5_memory_estimation():
    """–ü—Ä–∏–º–µ—Ä 5: –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏"""
    logger.info("üìù –ü—Ä–∏–º–µ—Ä 5: –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏")
    
    from core.lattice.spatial_optimization.unified_spatial_optimizer import (
        estimate_unified_memory_requirements,
        OptimizationConfig,
        OptimizationMode
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–æ–∫
    test_cases = [
        ("–ú–∞–ª–µ–Ω—å–∫–∞—è", (5, 5, 5)),
        ("–°—Ä–µ–¥–Ω—è—è", (20, 20, 20)),
        ("–ë–æ–ª—å—à–∞—è", (50, 50, 50)),
        ("–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è", (100, 100, 100))
    ]
    
    for case_name, dimensions in test_cases:
        logger.info(f"   üìè {case_name} —Ä–µ—à–µ—Ç–∫–∞ {dimensions}:")
        
        # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config_basic = OptimizationConfig(mode=OptimizationMode.CPU_ONLY)
        estimates_basic = estimate_unified_memory_requirements(dimensions, config_basic)
        
        # GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config_gpu = OptimizationConfig(mode=OptimizationMode.GPU_ONLY)
        estimates_gpu = estimate_unified_memory_requirements(dimensions, config_gpu)
        
        # GPU + MoE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config_moe = OptimizationConfig(
            mode=OptimizationMode.GPU_ONLY,
            enable_moe=True,
            enable_morton_encoding=True
        )
        estimates_moe = estimate_unified_memory_requirements(dimensions, config_moe)
        
        logger.info(f"     üíª CPU —Ç–æ–ª—å–∫–æ: {estimates_basic['total_memory_gb']:.2f}GB")
        logger.info(f"     üöÄ GPU: {estimates_gpu['total_memory_gb']:.2f}GB")
        logger.info(f"     ü§ñ GPU+MoE: {estimates_moe['total_memory_gb']:.2f}GB")
        logger.info(f"     üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è GPU –ø–∞–º—è—Ç—å: {estimates_moe['recommended_gpu_memory_gb']:.2f}GB")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å
        if estimates_moe['recommended_gpu_memory_gb'] > 16:
            logger.warning(f"     ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç >16GB GPU –ø–∞–º—è—Ç–∏ - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–∫—Ç–∏—á–Ω–æ")
        elif estimates_moe['recommended_gpu_memory_gb'] > 8:
            logger.info(f"     üí° –¢—Ä–µ–±—É–µ—Ç –≤—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω—É—é GPU (>8GB)")
        else:
            logger.info(f"     ‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö GPU")


def example_6_adaptive_optimization():
    """–ü—Ä–∏–º–µ—Ä 6: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    logger.info("üìù –ü—Ä–∏–º–µ—Ä 6: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    from core.lattice.spatial_optimization.unified_spatial_optimizer import (
        create_unified_spatial_optimizer,
        OptimizationConfig,
        OptimizationMode
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≤ AUTO —Ä–µ–∂–∏–º–µ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    config = OptimizationConfig(
        mode=OptimizationMode.AUTO,
        target_performance_ms=30.0  # –¶–µ–ª–µ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    )
    
    dimensions = (8, 8, 8)
    optimizer = create_unified_spatial_optimizer(dimensions, config)
    
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]
    state_size = 32
    
    logger.info(f"   üéØ –¶–µ–ª–µ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config.target_performance_ms}ms")
    logger.info(f"   üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    for iteration in range(10):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑
        states = torch.randn(total_cells, state_size)
        
        result = optimizer.optimize_lattice_forward(states)
        
        logger.info(
            f"     üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}: "
            f"{result.processing_time_ms:.1f}ms, "
            f"—Ä–µ–∂–∏–º: {result.mode_used.value}"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏
        if (iteration + 1) % 3 == 0:
            stats = optimizer.get_comprehensive_stats()
            if 'performance_analysis' in stats:
                perf = stats['performance_analysis']
                logger.info(
                    f"       üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {perf['avg_time_ms']:.1f}ms"
                )
                logger.info(
                    f"       üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤: {perf['mode_distribution']}"
                )
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_stats = optimizer.get_comprehensive_stats()
    logger.info("   üìã –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:")
    
    if 'performance_analysis' in final_stats:
        perf = final_stats['performance_analysis']
        logger.info(f"     ‚è±Ô∏è –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {perf['avg_time_ms']:.1f}ms")
        
        target_achieved = perf['avg_time_ms'] <= config.target_performance_ms
        logger.info(f"     üéØ –¶–µ–ª–µ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: {'‚úÖ' if target_achieved else '‚ùå'}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    logger.info("   üîß –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    optimizer.optimize_performance()
    
    optimizer.cleanup()


def run_all_examples():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Unified Spatial Optimizer")
    logger.info("=" * 80)
    
    examples = [
        ("–ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", example_1_basic_usage),
        ("–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", example_2_custom_configuration),
        ("MoE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", example_3_moe_integration),
        ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", example_4_performance_comparison),
        ("–û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏", example_5_memory_estimation),
        ("–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", example_6_adaptive_optimization),
    ]
    
    for example_name, example_func in examples:
        try:
            logger.info(f"\n{'=' * 60}")
            example_func()
            logger.info(f"‚úÖ {example_name} - –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå {example_name} - –æ—à–∏–±–∫–∞: {e}")
    
    logger.info("\n" + "=" * 80)
    logger.info("üéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    logger.info("üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ SPATIAL_OPTIMIZATION_MIGRATION_GUIDE.md")


if __name__ == "__main__":
    run_all_examples()