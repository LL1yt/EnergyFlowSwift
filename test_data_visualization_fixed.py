#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è data_visualization

–£–¥–∞–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ConfigManager –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã fallback —Ä–µ—à–µ–Ω–∏—è.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir  # –ú—ã —É–∂–µ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.insert(0, project_root)

import traceback
from typing import Dict, Any

def test_module_imports():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è data_visualization"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è data_visualization...")
    
    try:
        from data.data_visualization import (
            VisualizationConfig,
            load_visualization_config,
            create_visualizer,
            create_io_visualizer,
            quick_visualize_lattice,
            quick_visualize_io_strategy
        )
        print("  ‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —É—Å–ø–µ—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        traceback.print_exc()
        return False

def test_configuration():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from data.data_visualization import VisualizationConfig, load_visualization_config
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_visualization_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        assert hasattr(config, 'title'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ title"
        assert hasattr(config, 'width'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ width"
        assert hasattr(config, 'height'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ height"
        assert hasattr(config, 'background_color'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ background_color"
        
        print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.title}")
        print(f"  üìê –†–∞–∑–º–µ—Ä—ã: {config.width}x{config.height}")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False

def create_mock_lattice_config():
    """–°–æ–∑–¥–∞–µ—Ç mock –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–µ—à–µ—Ç–∫–∏"""
    class MockLatticeConfig:
        def __init__(self):
            self.dimensions = (8, 8, 8)
            self.cell_type = "standard"
            
    return MockLatticeConfig()

def create_mock_lattice():
    """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç —Ä–µ—à–µ—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import torch
    
    class MockLattice:
        def __init__(self):
            self.config = create_mock_lattice_config()
            self._states = torch.randn(512)  # 8*8*8 = 512 –∫–ª–µ—Ç–æ–∫
            
        def get_states(self):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–æ–∫"""
            return self._states
            
        def get_io_point_info(self):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ I/O —Ç–æ—á–∫–∞—Ö"""
            return {
                'input_points': [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1)],
                'output_points': [(7, 7, 7), (7, 7, 6), (7, 6, 7)],
                'strategy': 'proportional',
                'coverage_percentage': 12.5
            }
            
        def forward(self, input_signal):
            """Mock forward pass"""
            return torch.randn(64)
            
    return MockLattice()

def test_core_integration():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å core –º–æ–¥—É–ª—è–º–∏ (—Å mock –æ–±—ä–µ–∫—Ç–∞–º–∏)"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å core –º–æ–¥—É–ª—è–º–∏...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –æ–±—ä–µ–∫—Ç—ã –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö core –º–æ–¥—É–ª–µ–π
        lattice = create_mock_lattice()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        states = lattice.get_states()
        io_info = lattice.get_io_point_info()
        
        print(f"  üßä Mock —Ä–µ—à–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {lattice.config.dimensions}")
        print(f"  üìä –°–æ—Å—Ç–æ—è–Ω–∏—è: {states.shape}")
        print(f"  üìç I/O —Ç–æ—á–∫–∏: {len(io_info['input_points'])} –≤—Ö–æ–¥–Ω—ã—Ö, {len(io_info['output_points'])} –≤—ã—Ö–æ–¥–Ω—ã—Ö")
        print("  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å mock core —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å core: {e}")
        traceback.print_exc()
        return False

def test_visualization_creation():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    try:
        from data.data_visualization import create_visualizer, create_io_visualizer, load_visualization_config
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_visualization_config()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        visualizer = create_visualizer(config)
        io_visualizer = create_io_visualizer(config)
        
        print(f"  üé® –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä: {type(visualizer).__name__}")
        print(f"  üìç I/O –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä: {type(io_visualizer).__name__}")
        print("  ‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False

def test_quick_functions():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        from data.data_visualization import quick_visualize_lattice, load_visualization_config
        
        # –°–æ–∑–¥–∞–µ–º mock —Ä–µ—à–µ—Ç–∫—É
        lattice = create_mock_lattice()
        config = load_visualization_config()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ—à–µ—Ç–∫–∏
        fig = quick_visualize_lattice(lattice, config)
        
        print(f"  ‚ö° quick_visualize_lattice: {type(fig).__name__}")
        print(f"  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ traces: {len(fig.data)}")
        print("  ‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        traceback.print_exc()
        return False

def test_dependencies():
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = {
        'plotly': False,
        'numpy': False,
        'torch': False,
        'yaml': False
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ plotly
    try:
        import plotly.graph_objects as go
        dependencies['plotly'] = True
        print("  ‚úÖ plotly –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("  ‚ùå plotly –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ numpy
    try:
        import numpy as np
        dependencies['numpy'] = True
        print("  ‚úÖ numpy –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("  ‚ùå numpy –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ torch
    try:
        import torch
        dependencies['torch'] = True
        print("  ‚úÖ torch –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("  ‚ùå torch –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ yaml
    try:
        import yaml
        dependencies['yaml'] = True
        print("  ‚úÖ yaml –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("  ‚ùå yaml –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –í—Å–µ –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã?
    all_available = all(dependencies.values())
    return all_available

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–æ–¥—É–ª—è data_visualization")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è", test_module_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å core", test_core_integration),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", test_visualization_creation),
        ("–ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", test_quick_functions),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", test_dependencies),
    ]
    
    results = {}
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = "PASS" if result else "FAIL"
        except Exception as e:
            print(f"  üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = "ERROR"
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, result in results.items():
        if result == "PASS":
            print(f"  ‚úÖ {result} {test_name}")
            passed += 1
        elif result == "FAIL":
            print(f"  ‚ùå {result} {test_name}")
        else:
            print(f"  üí• {result} {test_name}")
    
    total = len(tests)
    print(f"\nüéØ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ú–æ–¥—É–ª—å data_visualization –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/total*100:.1f}%")

if __name__ == "__main__":
    main() 