#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è adaptive max_steps —Å convergence detection
"""

import torch
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from energy_flow.config import create_debug_config, set_energy_config
from energy_flow.utils.logging import setup_logging
from energy_flow.core import create_flow_processor

def test_adaptive_convergence():
    """–¢–µ—Å—Ç adaptive max_steps –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å convergence –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    setup_logging(debug_mode=True, debug_categories=['convergence'])
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    config = create_debug_config()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
    config.convergence_enabled = True
    config.convergence_threshold = 0.8  # 80% –ø–æ—Ç–æ–∫–æ–≤ –¥–æ–ª–∂–Ω—ã –¥–æ—Å—Ç–∏—á—å –≤—ã—Ö–æ–¥–∞
    config.convergence_min_steps = 3    # –ú–∏–Ω–∏–º—É–º 3 —à–∞–≥–∞
    config.convergence_patience = 2     # –¢–µ—Ä–ø–µ–Ω–∏–µ 2 —à–∞–≥–∞
    config.lattice_depth = 15           # –ú–∞–∫—Å–∏–º—É–º 15 —à–∞–≥–æ–≤
    
    set_energy_config(config)
    
    print(f"üß™ Testing adaptive max_steps with convergence detection")
    print(f"   Lattice: {config.lattice_width}x{config.lattice_height}x{config.lattice_depth}")
    print(f"   Convergence: threshold={config.convergence_threshold}, patience={config.convergence_patience}")
    print(f"   Max steps: {config.lattice_depth}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º FlowProcessor
    processor = create_flow_processor(config)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 4
    input_embeddings = torch.randn(batch_size, config.input_embedding_dim_from_teacher, device=config.device)
    
    print(f"üöÄ Starting forward pass with {batch_size} inputs...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º forward pass
    output_embeddings = processor.forward(input_embeddings, max_steps=config.lattice_depth)
    
    print(f"‚úÖ Forward pass completed")
    print(f"   Input shape: {input_embeddings.shape}")
    print(f"   Output shape: {output_embeddings.shape}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    perf_stats = processor.get_performance_stats()
    
    print("üìä Performance Statistics:")
    print(f"   Average step time: {perf_stats.get('avg_step_time', 0)*1000:.2f}ms")
    print(f"   Max flows per step: {perf_stats.get('max_flows_per_step', 0)}")
    
    if 'convergence_stats' in perf_stats:
        conv_stats = perf_stats['convergence_stats']
        print(f"   Best completion count: {conv_stats['best_completion_count']}")
        print(f"   Final completion count: {conv_stats['final_completion_count']}")
        print(f"   Convergence trend steps: {conv_stats['completion_trend']}")
    
    lattice_stats = perf_stats.get('lattice_stats', {})
    if lattice_stats:
        print(f"   Total completed flows: {lattice_stats.get('total_completed', 0)}")
        print(f"   Total died flows: {lattice_stats.get('total_died', 0)}")
    
    print()
    print("üéØ Test completed successfully!")

if __name__ == "__main__":
    test_adaptive_convergence()