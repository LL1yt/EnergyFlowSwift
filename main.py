#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞: 3D –ö–ª–µ—Ç–æ—á–Ω–∞—è –ù–µ–π—Ä–æ–Ω–Ω–∞—è –°–µ—Ç—å

–≠—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç "—É–º–Ω—É—é 3D —Ç–∫–∞–Ω—å" –∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–ª–µ—Ç–æ–∫-–Ω–µ–π—Ä–æ–Ω–æ–≤.
–ö–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —Å–æ—Å–µ–¥–µ–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–ª—å—à–µ.

–ê–Ω–∞–ª–æ–≥–∏—è: –ö–∞–∫ –≤ –∫–æ—Ä–µ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞ - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–µ–π—Ä–æ–Ω—ã, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É,
–≥–¥–µ –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —Å–æ—Å–µ–¥–µ–π –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–ª—å—à–µ.

–ê–≤—Ç–æ—Ä: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞
–î–∞—Ç–∞: 2024
"""

import os
import sys
import argparse
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# === –ò–ú–ü–û–†–¢–´ –ú–û–î–£–õ–ï–ô (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ) ===
try:
    # ‚úÖ –ú–æ–¥—É–ª—å cell_prototype –≥–æ—Ç–æ–≤!
    from core import CellPrototype, create_cell_from_config
    
    # ‚úÖ –ú–æ–¥—É–ª—å lattice_3d –≥–æ—Ç–æ–≤ —Å I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π!
    from core.lattice_3d import (
        Lattice3D, LatticeConfig, PlacementStrategy, IOPointPlacer, Face,
        load_lattice_config, create_lattice_from_config
    )
    
    # from core.signal_propagation import SignalPropagator
    # from data.embedding_loader import EmbeddingLoader
    # from data.data_visualization import Visualizer
    # from training.training_loop import TrainingLoop
    # from inference.prediction import Predictor
    # from utils.config_manager import ConfigManager
    # from utils.logger import setup_logger
    
    print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    print("‚úÖ –ú–æ–¥—É–ª—å cell_prototype –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("‚úÖ –ú–æ–¥—É–ª—å lattice_3d —Å I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("‚ö†Ô∏è  –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
    
except ImportError as e:
    print(f"‚ö†Ô∏è  –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")


def setup_project_structure():
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    
    –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–æ–≥–∏—è: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º "–ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Å—Ä–µ–¥—É" –¥–ª—è —Ä–æ—Å—Ç–∞ –Ω–∞—à–µ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Ç–∫–∞–Ω–∏
    """
    print("üèóÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    directories = [
        "logs",           # –î–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        "checkpoints",    # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        "data/train",     # –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        "data/test",      # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        "data/embeddings", # –í—Ö–æ–¥–Ω—ã–µ —ç–º–±–µ–¥–∏–Ω–≥–∏
        "outputs",        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã
        "visualizations", # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    ]
    
    for dir_path in directories:
        os.makedirs(dir_path, exist_ok=True)
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")


def load_configuration(config_path="config/main_config.yaml"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ ConfigManager
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        config_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        ConfigManager: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    print(f"‚öôÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConfigManager –∏–∑ {config_path}...")
    
    try:
        from utils.config_manager import create_config_manager, set_global_config_manager
        
        # –°–æ–∑–¥–∞–µ–º ConfigManager
        config = create_config_manager(
            base_config=config_path,
            environment="development",
            enable_hot_reload=True
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π
        set_global_config_manager(config)
        
        print("  ‚úÖ ConfigManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"  üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ–∫—Ü–∏–π: {len(config.get_config())}")
        print(f"  üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {config.get_stats()['config_loads']}")
        
        return config
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ConfigManager: {e}")
        return None


def setup_logging(config):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        config (ConfigManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    """
    print("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ ConfigManager
    log_level = config.get_config('logging', 'level', 'INFO')
    log_to_file = config.get_config('logging', 'log_to_file', True)
    log_file = config.get_config('logging', 'log_file', 'logs/main.log')
    log_to_console = config.get_config('logging', 'log_to_console', True)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
    handlers = []
    
    if log_to_file:
        handlers.append(logging.FileHandler(log_file, encoding='utf-8'))
    
    if log_to_console:
        handlers.append(logging.StreamHandler(sys.stdout))
    
    logging.basicConfig(
        level=getattr(logging, log_level.upper(), logging.INFO),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=handlers
    )
    
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level}")
    logger.info(f"üìÅ –§–∞–π–ª –ª–æ–≥–æ–≤: {log_file if log_to_file else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    
    return logger


def demonstrate_concept():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    
    –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–æ–≥–∏—è: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –æ–¥–Ω–∞ –∫–ª–µ—Ç–∫–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ç–∫–∞–Ω—å
    """
    print("\nüß¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–û–ù–¶–ï–ü–¶–ò–ò")
    print("=" * 50)
    
    print("""
    üÜï –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π!
    
    –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å 3D –∫—É–± —Ä–∞–∑–º–µ—Ä–æ–º 8x8x8 = 512 –∫–ª–µ—Ç–æ–∫.
    
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ  –≠–ú–ë–ï–î–ò–ù–ì ‚Üí I/O –¢–û–ß–ö–ò (—Ç–æ–ª—å–∫–æ ~10%) ‚îÇ
    ‚îÇ                                     ‚îÇ
    ‚îÇ  ‚óè ‚óã ‚óã ‚óè ‚óã ‚óã ‚óè ‚óã  ‚Üê –í—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏  ‚îÇ
    ‚îÇ  ‚óã ‚îå‚îÄ‚îê ‚îå‚îÄ‚îê ‚îå‚îÄ‚îê ‚óã  (–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏    ‚îÇ
    ‚îÇ  ‚óè ‚îÇ ‚îÇ‚Üí‚îÇ ‚îÇ‚Üí‚îÇ ‚îÇ ‚óè    –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ   ‚îÇ
    ‚îÇ  ‚óã ‚îî‚îÄ‚îò ‚îî‚îÄ‚îò ‚îî‚îÄ‚îò ‚óã    –ø–æ–∫—Ä—ã—Ç–∏–µ)      ‚îÇ
    ‚îÇ   ‚Üì   ‚Üì   ‚Üì   ‚Üì                    ‚îÇ
    ‚îÇ  ‚îå‚îÄ‚îê ‚îå‚îÄ‚îê ‚îå‚îÄ‚îê ‚îå‚îÄ‚îê   –°–ª–æ–π 2          ‚îÇ
    ‚îÇ  ‚îÇ ‚îÇ‚Üí‚îÇ ‚îÇ‚Üí‚îÇ ‚îÇ‚Üí‚îÇ ‚îÇ                   ‚îÇ
    ‚îÇ  ‚îî‚îÄ‚îò ‚îî‚îÄ‚îò ‚îî‚îÄ‚îò ‚îî‚îÄ‚îò                   ‚îÇ
    ‚îÇ   ‚Üì   ‚Üì   ‚Üì   ‚Üì                    ‚îÇ
    ‚îÇ  ...  ...  ...  ...               ‚îÇ
    ‚îÇ   ‚Üì   ‚Üì   ‚Üì   ‚Üì                    ‚îÇ
    ‚îÇ  ‚óè ‚óã ‚óã ‚óè ‚óã ‚óã ‚óè ‚óã  ‚Üê –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ ‚îÇ
    ‚îÇ                                     ‚îÇ
    ‚îÇ  I/O –¢–û–ß–ö–ò ‚Üí –î–ï–ö–û–î–ï–† ‚Üí –¢–û–ö–ï–ù–´       ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    
    üÜï –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ I/O —Ç–æ—á–µ–∫ (7.8-15.6%)
    ‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç–æ—Ä–æ–≤ –∫–∞–∫ –≤ –º–æ–∑–≥–µ  
    ‚Ä¢ 5 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, —Å–ª—É—á–∞–π–Ω–∞—è, —É–≥–ª—ã, —Ü–µ–Ω—Ç—Ä, –ø–æ–ª–Ω–æ–µ
    ‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    –ö–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ (‚ñ°):
    ‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —Å–æ—Å–µ–¥–µ–π
    ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö —Å–≤–æ–µ–π –º–∏–Ω–∏-–Ω–µ–π—Ä–æ—Å–µ—Ç—å—é  
    ‚Ä¢ –ü–µ—Ä–µ–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–ª—å—à–µ
    ‚Ä¢ –í—Å–µ –∫–ª–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –û–î–ò–ù–ê–ö–û–í–´–ï –≤–µ—Å–∞!
    """)
    
    print("\nüí° –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    print("  üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —É—á–∏–º —Ç–æ–ª—å–∫–æ 1 –ø—Ä–æ—Ç–æ—Ç–∏–ø")
    print("  üîπ –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å: –∫–∞–∫ –≤ –∫–æ—Ä–µ –º–æ–∑–≥–∞")
    print("  üîπ –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º: –≤—Å–µ –∫–ª–µ—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
    print("  üîπ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å: –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ä–µ—à–µ—Ç–∫–∏ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
    print("  üÜï –£–º–Ω–∞—è I/O —Å–∏—Å—Ç–µ–º–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–µ–∫")
    print("  üÜï –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ I/O —Ç–æ—á–µ–∫ –≤ 5-10 —Ä–∞–∑")


def demonstrate_io_strategy():
    """
    üÜï –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    print("\nüÜï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø I/O –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("=" * 40)
    
    try:
        import torch
        
        print("üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–æ–∫
        sizes = [(8, 8, 8), (16, 16, 16), (32, 32, 32)]
        strategies = [
            ("–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è", PlacementStrategy.PROPORTIONAL),
            ("–£–≥–ª—ã", PlacementStrategy.CORNERS),
            ("–°–ª—É—á–∞–π–Ω–∞—è", PlacementStrategy.RANDOM),
            ("–ü–æ–ª–Ω–∞—è –≥—Ä–∞–Ω—å", PlacementStrategy.FULL_FACE),
        ]
        
        print(f"\n{'–†–∞–∑–º–µ—Ä':>12} | {'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':>15} | {'I/O —Ç–æ—á–µ–∫':>10} | {'–ü–æ–∫—Ä—ã—Ç–∏–µ':>9}")
        print("-" * 60)
        
        for size in sizes:
            face_area = size[0] * size[1]
            
            for name, strategy in strategies:
                try:
                    placer = IOPointPlacer(
                        lattice_dimensions=size,
                        strategy=strategy,
                        config={
                            'coverage_ratio': {'min_percentage': 8.0, 'max_percentage': 12.0},
                            'absolute_limits': {'min_points': 5, 'max_points': 0}
                        },
                        seed=42
                    )
                    
                    input_points = placer.get_input_points(Face.FRONT)
                    coverage = len(input_points) / face_area * 100
                    
                    size_str = f"{size[0]}√ó{size[1]}√ó{size[2]}"
                    print(f"{size_str:>12} | {name:>15} | {len(input_points):>8}   | {coverage:>6.1f}%")
                    
                except Exception as e:
                    print(f"{size[0]}√ó{size[1]}√ó{size[2]:>12} | {name:>15} | {'ERROR':>10} | {'---':>9}")
        
        print("\nüß¨ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π 3D —Ä–µ—à–µ—Ç–∫–∏ —Å I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        config = LatticeConfig(
            dimensions=(8, 8, 8),
            boundary_conditions="walls",
            placement_strategy=PlacementStrategy.PROPORTIONAL,
            io_strategy_config={
                'coverage_ratio': {'min_percentage': 8.0, 'max_percentage': 12.0},
                'absolute_limits': {'min_points': 5, 'max_points': 25},
                'seed': 42
            }
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ—Ç–∫—É
        lattice = create_lattice_from_config()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç default config
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ I/O —Ç–æ—á–∫–∞—Ö
        io_info = lattice.get_io_point_info()
        
        print(f"  ‚úÖ 3D —Ä–µ—à–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {config.dimensions}")
        print(f"  üìä –í—Å–µ–≥–æ –∫–ª–µ—Ç–æ–∫: {config.total_cells}")
        print(f"  üìç –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: {io_info['input_points']['count']} ({io_info['input_points']['coverage_percentage']:.1f}%)")
        print(f"  üìç –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: {io_info['output_points']['count']} ({io_info['output_points']['coverage_percentage']:.1f}%)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
        num_input_points = io_info['input_points']['count']
        input_size = lattice.cell_prototype.input_size
        external_inputs = torch.randn(num_input_points, input_size)
        
        print(f"  üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass...")
        print(f"  üì• –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {external_inputs.shape}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
        with torch.no_grad():
            output_states = lattice.forward(external_inputs)
            io_output = lattice.get_output_states()
        
        print(f"  üì§ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {output_states.shape}")
        print(f"  üì§ I/O –≤—ã—Ö–æ–¥—ã: {io_output.shape}")
        print(f"  üéØ –î–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Ö–æ–¥–æ–≤: [{io_output.min():.3f}, {io_output.max():.3f}]")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –≥—Ä–∞–Ω—å—é
        full_face_points = 8 * 8  # 64 —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –≥—Ä–∞–Ω–∏
        efficiency_gain = full_face_points / num_input_points
        
        print(f"\nüí° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
        print(f"  üî∏ –ü–æ–ª–Ω–∞—è –≥—Ä–∞–Ω—å: {full_face_points} —Ç–æ—á–µ–∫")
        print(f"  üî∏ –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è: {num_input_points} —Ç–æ—á–µ–∫")
        print(f"  üî∏ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {efficiency_gain:.1f}x –º–µ–Ω—å—à–µ I/O —Ç–æ—á–µ–∫")
        print(f"  üî∏ –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏: {(1 - num_input_points/full_face_points)*100:.1f}%")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def run_simple_test():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    """
    print("\nüß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PyTorch
    try:
        import torch
        print(f"  ‚úÖ PyTorch –¥–æ—Å—Ç—É–ø–µ–Ω (–≤–µ—Ä—Å–∏—è: {torch.__version__})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
        if torch.cuda.is_available():
            print(f"  ‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
        else:
            print("  ‚ÑπÔ∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU")
            
    except ImportError:
        print("  ‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    libraries = ['numpy', 'matplotlib', 'yaml']
    for lib in libraries:
        try:
            __import__(lib)
            print(f"  ‚úÖ {lib} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            print(f"  ‚ùå {lib} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –†–ï–ê–õ–¨–ù–´–ô –º–æ–¥—É–ª—å cell_prototype
    print("\nüß¨ –¢–ï–°–¢–ò–†–£–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –ö–õ–ï–¢–ö–£ CELL_PROTOTYPE...")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ConfigManager
        from utils.config_manager import get_global_config_manager
        config_manager = get_global_config_manager()
        
        if config_manager:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é cell_prototype
            cell_config = config_manager.get_config('cell_prototype')
            if cell_config:
                real_cell = create_cell_from_config(cell_config)
                print(f"  ‚úÖ –†–µ–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {real_cell}")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                batch_size = 2
                neighbor_states = torch.randn(batch_size, 6, cell_config['state_size'])
                own_state = torch.randn(batch_size, cell_config['state_size'])
                external_input = torch.randn(batch_size, cell_config['input_size'])
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
                with torch.no_grad():
                    new_state = real_cell(neighbor_states, own_state, external_input)
                
                print(f"  üìä –í—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {own_state[0].numpy()}")
                print(f"  üìä –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:   {new_state[0].numpy()}")
                print(f"  üìä –î–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Ö–æ–¥–∞:   [{new_state.min():.3f}, {new_state.max():.3f}]")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
                info = real_cell.get_info()
                print(f"  üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –º–æ–¥–µ–ª–∏: {info['total_parameters']}")
                print(f"  üìã –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {info['model_size_mb']:.2f} MB")
                
                print("  ‚úÖ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("  ‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è cell_prototype –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        else:
            print("  ‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É")
            
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π –∫–ª–µ—Ç–∫–µ –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            import torch.nn as nn
            
            class SimpleCell(nn.Module):
                def __init__(self):
                    super().__init__()
                    self.layer = nn.Linear(3, 2)
                    self.activation = nn.Tanh()
                    
                def forward(self, x):
                    return self.activation(self.layer(x))
            
            cell = SimpleCell()
            test_input = torch.randn(1, 3)
            output = cell(test_input)
            
            print(f"  ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
            print(f"  üìä –í—Ö–æ–¥: {test_input.detach().numpy().flatten()}")
            print(f"  üìä –í—ã—Ö–æ–¥: {output.detach().numpy().flatten()}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–µ—Ç–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏  
    3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    4. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
    """
    print("üöÄ –ó–ê–ü–£–°–ö 3D –ö–õ–ï–¢–û–ß–ù–û–ô –ù–ï–ô–†–û–ù–ù–û–ô –°–ï–¢–ò")
    print("=" * 50)
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="3D Cellular Neural Network")
    parser.add_argument("--config", default="config/main_config.yaml", 
                       help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--mode", choices=["demo", "train", "test"], default="demo",
                       help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: demo/train/test")
    parser.add_argument("--debug", action="store_true", 
                       help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    setup_project_structure()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_configuration(args.config)
    if config is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return 1
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger = setup_logging(config)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—é
    demonstrate_concept()
    
    # üÜï –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    if not demonstrate_io_strategy():
        print("\n‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    if not run_simple_test():
        print("\n‚ùå –¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
        return 1
    
    print(f"\nüéØ –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´: {args.mode.upper()}")
    print("=" * 30)
    
    if args.mode == "demo":
        print("üìã –†–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        print("  ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏")
        print("  ‚Ä¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º I/O —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        print("  ‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã")
        print("  ‚Ä¢ –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å signal_propagation –º–æ–¥—É–ª–µ–º")
        
    elif args.mode == "train":
        print("üéì –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)")
        print("  ‚Ä¢ –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("  ‚Ä¢ –ë—É–¥–µ—Ç –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å")
        print("  ‚Ä¢ –ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç—ã")
        
    elif args.mode == "test":
        print("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)")
        print("  ‚Ä¢ –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å")
        print("  ‚Ä¢ –ë—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        print("  ‚Ä¢ –ë—É–¥–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ")
    
    print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ó–†–ê–ë–û–¢–ö–ï!")
    print("üìñ –°–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –≤ PROJECT_PLAN.md")
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config/main_config.yaml")
    
    return 0


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è)
    """
    exit_code = main()
    sys.exit(exit_code)
