#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Clean 3D Cellular Neural Network
============================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
2. –ö–ª–µ—Ç–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç forward pass
3. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
"""

import torch
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ new_rebuild
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "new_rebuild"))

from new_rebuild import (
    ProjectConfig,
    get_project_config,
    set_project_config,
    NCACell,
    GMLPCell,
    CellFactory,
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def test_project_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("=== –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")

    config = get_project_config()
    logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config.architecture_type}")
    logger.info(
        f"‚úÖ –†–µ—à–µ—Ç–∫–∞: {config.lattice_dimensions} = {config.total_cells} –∫–ª–µ—Ç–æ–∫"
    )
    logger.info(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {config.device}")
    logger.info(
        f"‚úÖ –¶–µ–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: NCA={config.nca_target_params}, gMLP={config.gmlp_target_params}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞
    nca_config = config.get_nca_config()
    gmlp_config = config.get_gmlp_config()

    assert nca_config["state_size"] == 4
    assert gmlp_config["state_size"] == 32
    assert nca_config["neighbor_count"] == gmlp_config["neighbor_count"]

    logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    return True


def test_nca_cell():
    """–¢–µ—Å—Ç NCA –∫–ª–µ—Ç–∫–∏"""
    logger.info("=== –¢–ï–°–¢ NCA –ö–õ–ï–¢–ö–ò ===")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–µ—Ç–∫—É
    cell = NCACell()
    logger.info(f"‚úÖ NCA –∫–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cell.state_size} —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    total_params = sum(p.numel() for p in cell.parameters())
    logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {total_params:,} (—Ü–µ–ª—å: {cell.target_params:,})")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
    batch_size = 2
    neighbor_count = cell.neighbor_count
    state_size = cell.state_size

    neighbor_states = torch.randn(batch_size, neighbor_count, state_size)
    own_state = torch.randn(batch_size, state_size)
    external_input = torch.randn(batch_size, cell.external_input_size)

    with torch.no_grad():
        output = cell(neighbor_states, own_state, external_input)

    assert output.shape == (batch_size, state_size)
    logger.info(f"‚úÖ Forward pass: {output.shape}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã—Ö–æ–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤—Ö–æ–¥–∞ (–∫–ª–µ—Ç–∫–∞ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—Ç)
    assert not torch.allclose(output, own_state, atol=1e-6)
    logger.info("‚úÖ –ö–ª–µ—Ç–∫–∞ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

    return True


def test_gmlp_cell():
    """–¢–µ—Å—Ç gMLP –∫–ª–µ—Ç–∫–∏"""
    logger.info("=== –¢–ï–°–¢ gMLP –ö–õ–ï–¢–ö–ò ===")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–µ—Ç–∫—É
    cell = GMLPCell()
    logger.info(f"‚úÖ gMLP –∫–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cell.state_size} —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    total_params = sum(p.numel() for p in cell.parameters())
    logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {total_params:,} (—Ü–µ–ª—å: {cell.target_params:,})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–±—Ä–∞–ª–∏ bottleneck
    bottleneck_found = any("bottleneck" in name for name, _ in cell.named_parameters())
    assert not bottleneck_found, "‚ùå –ù–∞–π–¥–µ–Ω bottleneck –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ!"
    logger.info("‚úÖ Bottleneck –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
    batch_size = 2
    neighbor_count = cell.neighbor_count
    state_size = cell.state_size

    neighbor_states = torch.randn(batch_size, neighbor_count, state_size)
    own_state = torch.randn(batch_size, state_size)
    external_input = torch.randn(batch_size, cell.external_input_size)

    with torch.no_grad():
        output = cell(neighbor_states, own_state, external_input)

    assert output.shape == (batch_size, state_size)
    logger.info(f"‚úÖ Forward pass: {output.shape}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã—Ö–æ–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤—Ö–æ–¥–∞
    assert not torch.allclose(output, own_state, atol=1e-6)
    logger.info("‚úÖ –ö–ª–µ—Ç–∫–∞ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

    return True


def test_cell_factory():
    """–¢–µ—Å—Ç —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–µ—Ç–æ–∫"""
    logger.info("=== –¢–ï–°–¢ –§–ê–ë–†–ò–ö–ò –ö–õ–ï–¢–û–ö ===")

    config = get_project_config()

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è NCA
    nca_config = config.get_nca_config()
    nca_cell = CellFactory.create_cell("nca", nca_config)
    assert isinstance(nca_cell, NCACell)
    logger.info("‚úÖ NCA —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É")

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è gMLP
    gmlp_config = config.get_gmlp_config()
    gmlp_cell = CellFactory.create_cell("gmlp", gmlp_config)
    assert isinstance(gmlp_cell, GMLPCell)
    logger.info("‚úÖ gMLP —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É")

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í CLEAN –ê–†–•–ò–¢–ï–ö–¢–£–†–´")

    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º debug_mode –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤
        config = ProjectConfig()
        config.debug_mode = False
        set_project_config(config)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        test_project_config()
        test_nca_cell()
        test_gmlp_cell()
        test_cell_factory()

        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("‚úÖ Clean –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        config = get_project_config()
        logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   –û–±—â–∏–µ —Ü–µ–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {config.total_target_params:,}")
        logger.info(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {config.device}")
        logger.info(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {config.architecture_type}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
