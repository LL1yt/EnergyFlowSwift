#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Clean 3D Cellular Neural Network
============================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
1. –ù–æ–≤–∞—è –º–æ–¥—É–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
2. MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (—ç–∫—Å–ø–µ—Ä—Ç—ã, gating) —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
3. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ –∫–æ–Ω—Ñ–∏–≥–µ
"""

import torch
import logging
import sys
import os
import unittest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ new_rebuild
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

from new_rebuild.config import (
    get_project_config,
    set_project_config,
    reset_global_config,
    ProjectConfig,
)
from new_rebuild.core.moe import (
    GatingNetwork,
    SimpleLinearExpert,
    HybridGNN_CNF_Expert,
    MoEConnectionProcessor,
)
from new_rebuild.core.cells import GNNCell  # GNNCell —è–≤–ª—è–µ—Ç—Å—è –±–∞–∑–æ–≤–æ–π

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class TestCleanArchitecture(unittest.TestCase):

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        reset_global_config()
        config = ProjectConfig()
        config.logging.debug_mode = False
        set_project_config(config)
        logger.info(f"--- –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {self._testMethodName} ---")

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        reset_global_config()
        logger.info(f"--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {self._testMethodName} ---\n")

    def test_project_config_new_structure(self):
        """–¢–µ—Å—Ç –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É ProjectConfig")
        config = get_project_config()

        self.assertTrue(hasattr(config, "lattice"))
        self.assertTrue(hasattr(config, "gnn"))
        self.assertTrue(hasattr(config, "expert"))
        self.assertTrue(hasattr(config.expert, "gating"))
        self.assertTrue(hasattr(config.expert, "local"))
        self.assertTrue(hasattr(config.expert, "functional"))
        self.assertTrue(hasattr(config.expert, "distant"))

        self.assertEqual(config.lattice.dimensions, (5, 5, 5))
        self.assertEqual(config.expert.gating.params, 808)
        self.assertEqual(config.expert.local.params, 2059)
        self.assertTrue(config.expert.enabled)

        logger.info("‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_gnn_base_cell(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π GNN –∫–ª–µ—Ç–∫–∏"""
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç—É –±–∞–∑–æ–≤–æ–π GNN –∫–ª–µ—Ç–∫–∏")
        config = get_project_config()
        cell = GNNCell(
            state_size=config.gnn.state_size,
            neighbor_count=config.neighbors.base_neighbor_count,
            message_dim=config.gnn.message_dim,
            hidden_dim=config.gnn.hidden_dim,
            external_input_size=config.gnn.external_input_size,
        )
        total_params = sum(p.numel() for p in cell.parameters())
        logger.info(f"‚úÖ GNN –∫–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {total_params}")

        # Forward pass
        batch_size = 2
        neighbor_states = torch.randn(
            batch_size, config.neighbors.base_neighbor_count, config.gnn.state_size
        )
        own_state = torch.randn(batch_size, config.gnn.state_size)
        external_input = torch.randn(batch_size, config.gnn.external_input_size)

        output = cell(neighbor_states, own_state, external_input)
        self.assertEqual(output.shape, (batch_size, config.gnn.state_size))
        logger.info("‚úÖ Forward pass GNN –∫–ª–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    def test_moe_architecture_components(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ MoE")
        config = get_project_config()

        # Gating Network
        gating = GatingNetwork(state_size=config.gnn.state_size, num_experts=3)
        gating_params = sum(p.numel() for p in gating.parameters())
        self.assertAlmostEqual(gating_params, config.expert.gating.params, delta=100)
        logger.info(
            f"‚úÖ GatingNetwork —Å–æ–∑–¥–∞–Ω: {gating_params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ü–µ–ª—å: {config.expert.gating.params})"
        )

        # Local Expert
        local_expert = SimpleLinearExpert(state_size=config.gnn.state_size)
        local_params = sum(p.numel() for p in local_expert.parameters())
        self.assertAlmostEqual(local_params, config.expert.local.params, delta=150)
        logger.info(
            f"‚úÖ LocalExpert —Å–æ–∑–¥–∞–Ω: {local_params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ü–µ–ª—å: {config.expert.local.params})"
        )

        # Functional Expert
        functional_expert = HybridGNN_CNF_Expert(state_size=config.gnn.state_size)
        functional_params = sum(p.numel() for p in functional_expert.parameters())
        self.assertAlmostEqual(
            functional_params, config.expert.functional.params, delta=500
        )
        logger.info(
            f"‚úÖ FunctionalExpert —Å–æ–∑–¥–∞–Ω: {functional_params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ü–µ–ª—å: {config.expert.functional.params})"
        )

    def test_moe_processor_forward_pass(self):
        """–¢–µ—Å—Ç forward pass —á–µ—Ä–µ–∑ MoE Connection Processor"""
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π forward pass —á–µ—Ä–µ–∑ MoE –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä")
        config = get_project_config()
        moe_processor = MoEConnectionProcessor(
            state_size=config.gnn.state_size,
            lattice_dimensions=config.lattice.dimensions,
        )
        moe_processor.to(config.current_device)

        batch_size = 1
        num_neighbors = 10
        state_size = config.gnn.state_size

        current_state = torch.randn(state_size).to(config.current_device)
        neighbor_states = torch.randn(num_neighbors, state_size).to(
            config.current_device
        )

        result = moe_processor(
            current_state=current_state,
            neighbor_states=neighbor_states,
            cell_idx=0,
            neighbor_indices=list(range(1, num_neighbors + 1)),
        )

        self.assertIn("new_state", result)
        self.assertEqual(result["new_state"].shape, (state_size,))
        self.assertIn("expert_weights", result)
        self.assertEqual(result["expert_weights"].shape, (3,))
        logger.info("‚úÖ Forward pass MoE –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")


if __name__ == "__main__":
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í CLEAN –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –° –ù–û–í–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô")
    unittest.main()
