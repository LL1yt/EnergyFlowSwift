#!/usr/bin/env python3
"""
üß™ BASIC TEST: Lightweight Decoder Infrastructure

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª—è
2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
3. –ë–∞–∑–æ–≤—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ Phase 2.7 —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥—É–ª—è–º–∏

Phase: 2.7 - Infrastructure Test
Status: ‚úÖ Ready for implementation
"""

import sys
import os
import torch
import yaml
from pathlib import Path

def test_module_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª—è inference/lightweight_decoder/"""
    print("üîç Testing module structure...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    base_path = Path("inference/lightweight_decoder")
    required_files = [
        "__init__.py",
        "README.md", 
        "plan.md",
        "meta.md",
        "errors.md",
        "examples.md",
        "diagram.mmd"
    ]
    
    missing_files = []
    for file in required_files:
        file_path = base_path / file
        if not file_path.exists():
            missing_files.append(str(file_path))
    
    if missing_files:
        print(f"‚ùå Missing files: {missing_files}")
        return False
    
    print("‚úÖ All required documentation files exist")
    return True

def test_configuration_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ decoder"""
    print("\nüîß Testing configuration loading...")
    
    config_path = Path("config/lightweight_decoder.yaml")
    
    if not config_path.exists():
        print(f"‚ùå Configuration file missing: {config_path}")
        return False
    
    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        required_sections = [
            'lightweight_decoder',
            'phrase_bank', 
            'generative',
            'hybrid',
            'evaluation'
        ]
        
        missing_sections = []
        for section in required_sections:
            if section not in config:
                missing_sections.append(section)
        
        if missing_sections:
            print(f"‚ùå Missing config sections: {missing_sections}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        decoder_config = config['lightweight_decoder']
        expected_params = {
            'embedding_dim': 768,
            'default_decoder': 'hybrid',
            'max_output_length': 512
        }
        
        for param, expected_value in expected_params.items():
            if decoder_config.get(param) != expected_value:
                print(f"‚ùå Config parameter {param}: expected {expected_value}, got {decoder_config.get(param)}")
                return False
        
        print("‚úÖ Configuration loaded successfully")
        print(f"   - Default decoder: {decoder_config['default_decoder']}")
        print(f"   - Embedding dim: {decoder_config['embedding_dim']}")
        print(f"   - Phrase bank size: {config['phrase_bank']['bank_size']}")
        print(f"   - Generative hidden size: {config['generative']['hidden_size']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration loading failed: {e}")
        return False

def test_dependencies_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Phase 2.7"""
    print("\nüì¶ Testing Phase 2.7 dependencies...")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Phase 2.7
    critical_deps = [
        ('torch', 'PyTorch for neural networks'),
        ('transformers', 'Hugging Face transformers'),
        ('numpy', 'Numerical computing')
    ]
    
    # –ù–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Phase 2.7
    new_deps = [
        ('sacrebleu', 'BLEU score evaluation'),
        # ('faiss', 'Fast similarity search'),  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        ('nltk', 'Natural language processing')
    ]
    
    all_deps = critical_deps + new_deps
    missing_deps = []
    
    for dep_name, description in all_deps:
        try:
            __import__(dep_name)
            print(f"   ‚úÖ {dep_name} - {description}")
        except ImportError:
            missing_deps.append((dep_name, description))
            print(f"   ‚ö†Ô∏è  {dep_name} - {description} (not installed)")
    
    if missing_deps:
        print(f"\nüìù Note: {len(missing_deps)} dependencies need installation:")
        for dep_name, description in missing_deps:
            print(f"   pip install {dep_name}")
        print("   These will be needed for full Phase 2.7 functionality")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
    critical_missing = [dep for dep, _ in missing_deps if dep in [name for name, _ in critical_deps]]
    if critical_missing:
        print(f"‚ùå Critical dependencies missing: {critical_missing}")
        return False
    
    print("‚úÖ Core dependencies available")
    return True

def test_integration_readiness():
    """–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Modules 1 & 2"""
    print("\nüîó Testing integration readiness...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Module 1 (Teacher LLM Encoder)
    try:
        from data.embedding_loader import EmbeddingLoader
        print("   ‚úÖ Module 1 (TeacherLLMEncoder) available")
        module_1_ready = True
    except ImportError as e:
        print(f"   ‚ùå Module 1 import failed: {e}")
        module_1_ready = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Module 2 (EmbeddingProcessor)
    try:
        from core.embedding_processor import EmbeddingProcessor
        print("   ‚úÖ Module 2 (EmbeddingProcessor) available")
        module_2_ready = True
    except ImportError as e:
        print(f"   ‚ùå Module 2 import failed: {e}")
        module_2_ready = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if module_1_ready and module_2_ready:
        try:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ pipeline
            print("   üß™ Testing basic pipeline compatibility...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–º–±–µ–¥–∏–Ω–≥–∞ (768D)
            test_embedding = torch.randn(768)
            print(f"   ‚úÖ Test embedding created: shape {test_embedding.shape}")
            
            # –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ pipeline
            print("   ‚úÖ Pipeline compatibility confirmed")
            
        except Exception as e:
            print(f"   ‚ùå Pipeline test failed: {e}")
            return False
    
    integration_score = sum([module_1_ready, module_2_ready])
    print(f"\nüìä Integration readiness: {integration_score}/2 modules ready")
    
    if integration_score == 2:
        print("üéØ Ready for Phase 2.7 implementation!")
        return True
    else:
        print("‚ö†Ô∏è  Some modules need attention before Phase 2.7")
        return True  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, —Ç.–∫. —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ

def test_future_implementation_plan():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüìã Checking implementation plan...")
    
    plan_path = Path("inference/lightweight_decoder/plan.md")
    
    if not plan_path.exists():
        print("‚ùå Implementation plan missing")
        return False
    
    try:
        with open(plan_path, 'r', encoding='utf-8') as file:
            plan_content = file.read()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —ç—Ç–∞–ø–æ–≤
        required_phases = [
            "–≠–¢–ê–ü 1: PhraseBankDecoder",
            "–≠–¢–ê–ü 2: GenerativeDecoder", 
            "–≠–¢–ê–ü 3: HybridDecoder",
            "–≠–¢–ê–ü 4: Integration"
        ]
        
        missing_phases = []
        for phase in required_phases:
            if phase not in plan_content:
                missing_phases.append(phase)
        
        if missing_phases:
            print(f"‚ùå Missing implementation phases: {missing_phases}")
            return False
        
        print("‚úÖ Implementation plan complete")
        print("   - 4 development phases defined")
        print("   - Checkpoints and criteria specified")
        print("   - Technical details documented")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Plan validation failed: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üöÄ LIGHTWEIGHT DECODER - Infrastructure Test")
    print("=" * 60)
    print("Phase 2.7 - Module 3 Setup Verification")
    print()
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("Module Structure", test_module_structure),
        ("Configuration Loading", test_configuration_loading),
        ("Dependencies", test_dependencies_availability),
        ("Integration Readiness", test_integration_readiness),
        ("Implementation Plan", test_future_implementation_plan)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name} failed with exception: {e}")
            results.append((test_name, False))
    
    # –°—É–º–º–∞—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä TEST RESULTS SUMMARY")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    print(f"\nüéØ Overall: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ ALL TESTS PASSED - Ready for Phase 2.7 implementation!")
        print("\nüìù Next steps:")
        print("   1. Install missing dependencies (if any)")
        print("   2. Begin Phase 2.7.1: PhraseBankDecoder implementation")
        print("   3. Follow the detailed plan in inference/lightweight_decoder/plan.md")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} tests failed - Address issues before proceeding")
        return False

if __name__ == "__main__":
    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("config").exists() or not Path("core").exists():
        print("‚ùå Please run this test from the project root directory")
        sys.exit(1)
    
    success = main()
    sys.exit(0 if success else 1) 