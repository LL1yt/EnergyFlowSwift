#!/usr/bin/env python3
"""
Simple Batch Processing Test
============================

–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ batch processing.
–ë–µ–∑ pytest, —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import torch
import time
import traceback
from new_rebuild.config import create_debug_config, set_project_config
from new_rebuild.utils.logging import get_logger

logger = get_logger(__name__)


def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    logger.info("üîç Testing imports...")
    
    try:
        from new_rebuild.core.moe.batch import BatchMoEProcessor, BatchProcessingAdapter
        logger.info("‚úÖ MoE batch imports OK")
        
        from new_rebuild.core.lattice.spatial_optimization.batch_integration import (
            create_batch_optimized_spatial_optimizer,
            upgrade_lattice_to_batch
        )
        logger.info("‚úÖ Spatial optimization batch imports OK")
        
        from new_rebuild.core.lattice import Lattice3D
        logger.info("‚úÖ Lattice imports OK")
        
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå Import failed: {e}")
        traceback.print_exc()
        return False


def test_basic_batch_adapter():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ BatchProcessingAdapter"""
    logger.info("üß™ Testing basic batch adapter...")
    
    try:
        from new_rebuild.core.moe.batch import BatchProcessingAdapter
        from new_rebuild.core.moe.moe_processor import MoEConnectionProcessor
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π MoE –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        dimensions = (8, 8, 8)
        moe = MoEConnectionProcessor(lattice_dimensions=dimensions)
        logger.info(f"‚úÖ MoE processor created: state_size={moe.state_size}")
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        adapter = BatchProcessingAdapter(
            moe_processor=moe,
            enable_batch=True,
            fallback_on_error=True
        )
        logger.info("‚úÖ Batch adapter created successfully")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –í–ê–ñ–ù–û: –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        total_cells = 8 * 8 * 8
        device = moe.device if hasattr(moe, 'device') else torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        states = torch.randn(total_cells, moe.state_size, device=device)
        cell_indices = [0, 10, 20, 30, 40]
        
        logger.info(f"Created test data: {len(cell_indices)} cells, states shape: {states.shape}")
        
        # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        result = adapter.process_cells(
            cell_indices=cell_indices,
            full_lattice_states=states
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert len(result) == len(cell_indices), f"Expected {len(cell_indices)} results, got {len(result)}"
        
        for idx in cell_indices:
            assert idx in result, f"Missing result for cell {idx}"
            assert result[idx].shape == (moe.state_size,), f"Wrong shape for cell {idx}: {result[idx].shape}"
        
        logger.info("‚úÖ Batch adapter test passed!")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = adapter.get_performance_comparison()
        logger.info(f"üìä Performance stats: {stats}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Batch adapter test failed: {e}")
        traceback.print_exc()
        return False


def test_lattice_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Lattice3D"""
    logger.info("üß™ Testing lattice integration...")
    
    try:
        from new_rebuild.core.lattice import Lattice3D
        from new_rebuild.core.lattice.spatial_optimization.batch_integration import upgrade_lattice_to_batch
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ—à–µ—Ç–∫—É
        dimensions = (8, 8, 8)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        lattice = Lattice3D()
        logger.info(f"‚úÖ Lattice created: {dimensions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π forward pass
        logger.info("Testing standard forward pass...")
        start_time = time.time()
        result1 = lattice.forward()
        standard_time = (time.time() - start_time) * 1000
        logger.info(f"Standard forward: {standard_time:.1f}ms, result shape: {result1.shape}")
        
        # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.info("Upgrading to batch processing...")
        lattice_batch = upgrade_lattice_to_batch(lattice)
        
        # –í–∫–ª—é—á–∞–µ–º batch —Ä–µ–∂–∏–º
        if hasattr(lattice_batch, 'set_batch_enabled'):
            lattice_batch.set_batch_enabled(True)
            logger.info("‚úÖ Batch mode enabled")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º batch forward pass
        logger.info("Testing batch forward pass...")
        start_time = time.time()
        result2 = lattice_batch.forward()
        batch_time = (time.time() - start_time) * 1000
        logger.info(f"Batch forward: {batch_time:.1f}ms, result shape: {result2.shape}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if result1.shape == result2.shape:
            diff = torch.mean(torch.abs(result1 - result2)).item()
            logger.info(f"Mean difference between standard and batch: {diff:.6f}")
            
            if diff < 1e-4:
                logger.info("‚úÖ Results are very similar!")
            else:
                logger.warning(f"‚ö†Ô∏è Results differ: {diff:.6f}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        if batch_time > 0 and standard_time > 0:
            speedup = standard_time / batch_time
            logger.info(f"üöÄ Potential speedup: {speedup:.2f}x")
        
        logger.info("‚úÖ Lattice integration test passed!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Lattice integration test failed: {e}")
        traceback.print_exc()
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("=" * 60)
    logger.info("üèÅ SIMPLE BATCH PROCESSING TEST")
    logger.info("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = create_debug_config()
    set_project_config(config)
    logger.info("‚úÖ Debug configuration set")
    
    tests = [
        ("Import Test", test_imports),
        ("Batch Adapter Test", test_basic_batch_adapter),
        ("Lattice Integration Test", test_lattice_integration),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n" + "=" * 40)
        logger.info(f"Running: {test_name}")
        logger.info("=" * 40)
        
        try:
            success = test_func()
            results.append((test_name, success))
            
            if success:
                logger.info(f"‚úÖ {test_name} PASSED")
            else:
                logger.error(f"‚ùå {test_name} FAILED")
                
        except Exception as e:
            logger.error(f"üí• {test_name} CRASHED: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 60)
    logger.info("üìä TEST RESULTS SUMMARY")
    logger.info("=" * 60)
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        logger.info(f"{test_name:<30} {status}")
        if success:
            passed += 1
    
    logger.info(f"\nPassed: {passed}/{len(results)} tests")
    
    if passed == len(results):
        logger.info("üéâ ALL TESTS PASSED!")
        return True
    else:
        logger.error("‚ùå SOME TESTS FAILED!")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)