#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Connection Cache - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
=====================================================
"""

import torch
import numpy as np
from new_rebuild.core.moe.connection_classifier import UnifiedConnectionClassifier
from new_rebuild.config.project_config import (
    get_project_config,
    reset_global_config,
    set_project_config,
    ProjectConfig,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
reset_global_config()
config = ProjectConfig()
config.lattice.dimensions = (15, 15, 15)
set_project_config(config)


def test_cache_final():
    print("üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ CONNECTION CACHE")
    print("=" * 50)

    lattice_dimensions = (15, 15, 15)
    total_cells = np.prod(lattice_dimensions)
    config = get_project_config()

    print(f"üìê –†–µ—à–µ—Ç–∫–∞: {lattice_dimensions}")
    print(f"üîç Adaptive radius: {config.calculate_adaptive_radius()}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    classifier_no_cache = UnifiedConnectionClassifier(
        lattice_dimensions, enable_cache=False
    )
    classifier_with_cache = UnifiedConnectionClassifier(
        lattice_dimensions, enable_cache=True
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    classifier_no_cache.reset_stats()
    classifier_with_cache.reset_stats()

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    all_states = torch.randn(total_cells, config.gnn.state_size)
    cell_idx = 1000

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ—Å–µ–¥–µ–π
    from new_rebuild.core.moe.distance_calculator import DistanceCalculator

    calc = DistanceCalculator(lattice_dimensions)

    neighbor_indices = []
    for potential_neighbor in range(
        max(0, cell_idx - 100), min(total_cells, cell_idx + 100)
    ):
        if potential_neighbor == cell_idx:
            continue
        distance = calc.euclidean_distance(cell_idx, potential_neighbor)
        if distance <= config.calculate_adaptive_radius():
            neighbor_indices.append(potential_neighbor)

    print(f"üîó –ù–∞–π–¥–µ–Ω–æ {len(neighbor_indices)} —Å–æ—Å–µ–¥–µ–π –¥–ª—è –∫–ª–µ—Ç–∫–∏ {cell_idx}")

    if not neighbor_indices:
        print("‚ùå –ù–µ—Ç —Å–æ—Å–µ–¥–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    cell_state = all_states[cell_idx]
    neighbor_states = all_states[neighbor_indices]

    # –¢–µ—Å—Ç –ë–ï–ó –∫—ç—à–∞
    print("\nüîÑ –¢–µ—Å—Ç –ë–ï–ó –∫—ç—à–∞...")
    result_no_cache = classifier_no_cache.classify_connections(
        cell_idx=cell_idx,
        neighbor_indices=neighbor_indices,
        cell_state=cell_state,
        neighbor_states=neighbor_states,
    )

    # –¢–µ—Å—Ç –° –∫—ç—à–µ–º
    print("\nüöÄ –¢–µ—Å—Ç –° –∫—ç—à–µ–º...")
    result_with_cache = classifier_with_cache.classify_connections(
        cell_idx=cell_idx,
        neighbor_indices=neighbor_indices,
        cell_state=cell_state,
        neighbor_states=neighbor_states,
    )

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    from new_rebuild.core.moe.connection_types import ConnectionCategory

    def analyze_result(name, result):
        local_count = len(result[ConnectionCategory.LOCAL])
        functional_count = len(result[ConnectionCategory.FUNCTIONAL])
        distant_count = len(result[ConnectionCategory.DISTANT])
        total = local_count + functional_count + distant_count

        if total > 0:
            print(f"\n{name}:")
            print(f"   LOCAL: {local_count} ({local_count/total*100:.1f}%)")
            print(
                f"   FUNCTIONAL: {functional_count} ({functional_count/total*100:.1f}%)"
            )
            print(f"   DISTANT: {distant_count} ({distant_count/total*100:.1f}%)")
            print(f"   –í–°–ï–ì–û: {total}")
        else:
            print(f"\n{name}: –ù–µ—Ç —Å–≤—è–∑–µ–π")

    analyze_result("–ë–ï–ó –∫—ç—à–∞", result_no_cache)
    analyze_result("–° –∫—ç—à–µ–º", result_with_cache)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–†–û–í")
    print("=" * 50)

    stats_no_cache = classifier_no_cache.get_classification_stats()
    stats_with_cache = classifier_with_cache.get_classification_stats()

    print(f"\n–ë–ï–ó –∫—ç—à–∞:")
    print(f"   LOCAL ratio: {stats_no_cache['local_ratio']:.1%}")
    print(f"   FUNCTIONAL ratio: {stats_no_cache['functional_ratio']:.1%}")
    print(f"   DISTANT ratio: {stats_no_cache['distant_ratio']:.1%}")
    print(f"   –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {stats_no_cache['total_connections']}")

    print(f"\n–° –∫—ç—à–µ–º:")
    print(f"   LOCAL ratio: {stats_with_cache['local_ratio']:.1%}")
    print(f"   FUNCTIONAL ratio: {stats_with_cache['functional_ratio']:.1%}")
    print(f"   DISTANT ratio: {stats_with_cache['distant_ratio']:.1%}")
    print(f"   –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {stats_with_cache['total_connections']}")

    if "cache_performance" in stats_with_cache:
        cache_perf = stats_with_cache["cache_performance"]
        if cache_perf.get("cache_enabled", False):
            print(f"   Cache hit rate: {cache_perf['cache_hit_rate']:.1%}")
            print(f"   Cache hits: {cache_perf['cache_hits']}")
            print(f"   Cache misses: {cache_perf['cache_misses']}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    success = (
        stats_with_cache["total_connections"] > 0
        and stats_with_cache["functional_ratio"] > 0.1
    )

    if success:
        print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
        print("üéØ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ")
        print("üêõ –ü—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–µ–º –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")

    return success


if __name__ == "__main__":
    test_cache_final()
