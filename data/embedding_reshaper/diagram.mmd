```mermaid
graph TB
    %% EmbeddingReshaper Module Architecture
    
    subgraph "INPUT LAYER"
        A1[Text Input] 
        A2[1D Embedding<br/>768 dimensions]
        A3[PyTorch Tensor]
        A4[NumPy Array]
    end
    
    subgraph "EMBEDDING RESHAPER MODULE"
        direction TB
        
        subgraph "Core Components"
            B1[EmbeddingReshaper<br/>Main Class]
            B2[Configuration<br/>Manager]
            B3[Statistics<br/>Tracker]
        end
        
        subgraph "Reshaping Strategies"
            C1[LinearReshaper<br/>Simple reshape]
            C2[AdaptiveReshaper<br/>Enhanced algorithms]
            C3[SemanticReshaper<br/>Clustering-based]
        end
        
        subgraph "Enhanced AdaptiveReshaper"
            D1[Enhanced Variance<br/>PCA + Local variability]
            D2[Importance Weighted<br/>Multi-component analysis]
            D3[Adaptive Placement<br/>Iterative optimization]
        end
        
        subgraph "Utility Functions"
            E1[Similarity Calculator<br/>5 metrics weighted]
            E2[Dimension Validator<br/>Compatibility checker]
            E3[Test Embeddings<br/>Generator]
            E4[Performance<br/>Benchmarker]
        end
        
        subgraph "Caching System"
            F1[Intelligent Cache<br/>SHA256 hashing]
            F2[Placement Maps<br/>Precise restoration]
            F3[Performance<br/>Optimization]
        end
    end
    
    subgraph "OUTPUT LAYER"
        G1[3D Matrix<br/>8√ó8√ó12 format]
        G2[Cube Input<br/>Ready for lattice]
        G3[Restored 1D<br/>768 dimensions]
        G4[Quality Metrics<br/>Similarity scores]
    end
    
    subgraph "INTEGRATION POINTS"
        H1[Teacher LLM<br/>Encoder]
        H2[3D Lattice<br/>Neural Network]
        H3[Lightweight<br/>Decoder]
        H4[Training<br/>Pipeline]
    end
    
    %% Data Flow Connections
    A1 --> H1
    H1 --> A2
    A2 --> B1
    A3 --> B1
    A4 --> B1
    
    B1 --> B2
    B1 --> B3
    B2 --> C1
    B2 --> C2
    B2 --> C3
    
    C2 --> D1
    C2 --> D2
    C2 --> D3
    
    B1 --> E1
    B1 --> E2
    E3 --> B1
    E4 --> B1
    
    B1 --> F1
    F1 --> F2
    F2 --> F3
    
    C1 --> G1
    C2 --> G1
    C3 --> G1
    
    G1 --> G2
    G2 --> H2
    H2 --> G1
    G1 --> G3
    
    E1 --> G4
    G3 --> H3
    
    B1 --> H4
    
    %% Critical Paths (Enhanced Methods)
    D1 -.->|100% Quality| G3
    D2 -.->|~60% Quality| G3
    D3 -.->|Optimized| G3
    
    %% Performance Paths
    F1 -.->|>1000x Speedup| F3
    F2 -.->|Exact Restoration| G3
    
    %% Integration Flows
    H1 -.->|Production Ready| B1
    G2 -.->|Phase 2.5 Ready| H2
    G3 -.->|Phase 2.7 Ready| H3
    
    %% Styling
    classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef coreStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef strategyStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef enhancedStyle fill:#fff3e0,stroke:#e65100,stroke-width:3px
    classDef utilStyle fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    classDef cacheStyle fill:#e0f2f1,stroke:#004d40,stroke-width:2px
    classDef outputStyle fill:#fff8e1,stroke:#f57f17,stroke-width:2px
    classDef integrationStyle fill:#efebe9,stroke:#3e2723,stroke-width:2px
    
    class A1,A2,A3,A4 inputStyle
    class B1,B2,B3 coreStyle
    class C1,C2,C3 strategyStyle
    class D1,D2,D3 enhancedStyle
    class E1,E2,E3,E4 utilStyle
    class F1,F2,F3 cacheStyle
    class G1,G2,G3,G4 outputStyle
    class H1,H2,H3,H4 integrationStyle
```

```mermaid
sequenceDiagram
    participant User
    participant EmbeddingReshaper
    participant Strategy
    participant Validator
    participant Stats
    
    Note over User, Stats: EmbeddingReshaper Workflow
    
    User->>EmbeddingReshaper: vector_to_matrix(embedding_1d)
    EmbeddingReshaper->>Strategy: vector_to_matrix(embedding_1d)
    Strategy->>Strategy: Apply reshaping algorithm
    Strategy-->>EmbeddingReshaper: matrix_3d
    
    opt Semantic Preservation Enabled
        EmbeddingReshaper->>Validator: validate_transformation
        Validator-->>EmbeddingReshaper: quality_score
    end
    
    EmbeddingReshaper->>Stats: update_statistics(operation="1d_to_3d")
    EmbeddingReshaper-->>User: matrix_3d
    
    User->>EmbeddingReshaper: matrix_to_vector(matrix_3d)
    EmbeddingReshaper->>Strategy: matrix_to_vector(matrix_3d)
    Strategy->>Strategy: Apply inverse reshaping
    Strategy-->>EmbeddingReshaper: embedding_1d
    
    opt Semantic Preservation Enabled
        EmbeddingReshaper->>Validator: validate_quality(original, restored)
        Validator-->>EmbeddingReshaper: similarity_score
        
        alt Quality Below Threshold
            EmbeddingReshaper->>EmbeddingReshaper: fallback_strategy()
        end
    end
    
    EmbeddingReshaper->>Stats: update_statistics(operation="3d_to_1d")
    EmbeddingReshaper-->>User: embedding_1d
    
    User->>EmbeddingReshaper: get_statistics()
    EmbeddingReshaper->>Stats: get_stats()
    Stats-->>EmbeddingReshaper: statistics_dict
    EmbeddingReshaper-->>User: statistics_dict
```

```mermaid
graph LR
    subgraph "Three Reshaping Strategies Comparison"
        
        subgraph "LinearReshaper"
            L1[("Input<br/>(768,)")]
            L2["Simple<br/>reshape()"]
            L3[("Output<br/>(8,8,12)")]
            L4["Performance: ‚≠ê‚≠ê‚≠ê<br/>Quality: ‚≠ê‚≠ê<br/>Complexity: ‚≠ê"]
            
            L1 --> L2 --> L3
            L3 --> L4
        end
        
        subgraph "AdaptiveReshaper"
            A1[("Input<br/>(768,)")]
            A2["Variance/Importance<br/>Analysis"]
            A3["Adaptive<br/>Placement"]
            A4[("Output<br/>(8,8,12)")]
            A5["Performance: ‚≠ê‚≠ê<br/>Quality: ‚≠ê‚≠ê‚≠ê<br/>Complexity: ‚≠ê‚≠ê"]
            
            A1 --> A2 --> A3 --> A4
            A4 --> A5
        end
        
        subgraph "SemanticReshaper"
            S1[("Input<br/>(768,)")]
            S2["Clustering<br/>(K-means/Hierarchical)"]
            S3["Semantic<br/>Grouping"]
            S4[("Output<br/>(8,8,12)")]
            S5["Performance: ‚≠ê<br/>Quality: ‚≠ê‚≠ê‚≠ê<br/>Complexity: ‚≠ê‚≠ê‚≠ê"]
            
            S1 --> S2 --> S3 --> S4
            S4 --> S5
        end
        
        %% Quality indicators
        QUALITY["üéØ Quality Comparison:<br/>Linear: >95% preservation<br/>Adaptive: >96% preservation<br/>Semantic: >97% preservation"]
        
        %% Styling
        classDef linear fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
        classDef adaptive fill:#f1f8e9,stroke:#388e3c,stroke-width:2px
        classDef semantic fill:#fce4ec,stroke:#c2185b,stroke-width:2px
        classDef quality fill:#fff3e0,stroke:#f57c00,stroke-width:3px
        
        class L1,L2,L3,L4 linear
        class A1,A2,A3,A4,A5 adaptive
        class S1,S2,S3,S4,S5 semantic
        class QUALITY quality
    end
```

```mermaid
graph TB
    subgraph "Integration with 3D Cellular Neural Network"
        
        %% Phase 2 modules
        subgraph "Phase 2: Data Pipeline"
            TLM["üî¥ Teacher LLM Encoder<br/>‚úÖ –ì–û–¢–û–í<br/>8+ LLM models"]
            ER["üÜï EmbeddingReshaper<br/>‚úÖ –ì–û–¢–û–í<br/>1D‚Üî3D bridge"]
        end
        
        %% Phase 2.5 module  
        subgraph "Phase 2.5: Core Processing"
            EP["üîµ EmbeddingProcessor<br/>üîÑ –í –†–ê–ó–†–ê–ë–û–¢–ö–ï<br/>3D cube processing"]
            L3D["3D Lattice<br/>Core neural network"]
        end
        
        %% Phase 2.7 module
        subgraph "Phase 2.7: Decoding"
            LD["üü° Lightweight Decoder<br/>üÜï –ü–õ–ê–ù–ò–†–£–ï–¢–°–Ø<br/>embedding‚Üítext"]
        end
        
        %% Data flow
        TEXT[("Input Text")]
        EMB1[("Embedding<br/>768D")]
        CUBE[("3D Matrix<br/>8√ó8√ó12")]
        EMB2[("Processed<br/>768D")]
        RESULT[("Output Text")]
        
        %% Full pipeline
        TEXT --> TLM
        TLM --> EMB1
        EMB1 --> ER
        ER --> CUBE
        CUBE --> EP
        EP --> L3D
        L3D --> EP
        EP --> CUBE
        CUBE --> ER
        ER --> EMB2
        EMB2 --> LD
        LD --> RESULT
        
        %% Status indicators
        STATUS1["‚úÖ –ú–û–î–£–õ–¨ 1 –ì–û–¢–û–í<br/>Phase 2 –∑–∞–≤–µ—Ä—à–µ–Ω"]
        STATUS2["üÜï –ú–û–î–£–õ–¨ 2 (–ú–û–°–¢)<br/>Phase 2.3 –≥–æ—Ç–æ–≤"]
        STATUS3["üîÑ –ú–û–î–£–õ–¨ 3 –Ø–î–†–û<br/>Phase 2.5 —Å–ª–µ–¥—É—é—â–∏–π"]
        STATUS4["üü° –ú–û–î–£–õ–¨ 4 –î–ï–ö–û–î–ï–†<br/>Phase 2.7 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"]
        
        TLM -.-> STATUS1
        ER -.-> STATUS2
        EP -.-> STATUS3
        LD -.-> STATUS4
        
        %% Styling
        classDef ready fill:#c8e6c9,stroke:#2e7d32,stroke-width:3px
        classDef inProgress fill:#fff3e0,stroke:#f57c00,stroke-width:2px
        classDef planned fill:#e1f5fe,stroke:#0277bd,stroke-width:2px
        classDef data fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
        classDef status fill:#fce4ec,stroke:#c2185b,stroke-width:1px
        
        class TLM,ER ready
        class EP,L3D inProgress
        class LD planned
        class TEXT,EMB1,CUBE,EMB2,RESULT data
        class STATUS1,STATUS2,STATUS3,STATUS4 status
    end
``` 