"""
EmbeddingReshaper - –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
=============================================================

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 1D‚Üî3D —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫—É–±–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ
—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ >95%.
"""

import torch
import numpy as np
from typing import Tuple, Union, Optional, Dict, Any
import logging

from .utils import validate_semantic_preservation, calculate_similarity_metrics


class EmbeddingReshaper:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —ç–º–±–µ–¥–∏–Ω–≥–æ–≤ –º–µ–∂–¥—É 1D –∏ 3D —Ñ–æ—Ä–º–∞—Ç–∞–º–∏.
    
    –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è 1D ‚Üí 3D: (768,) ‚Üí (8, 8, 12)  
    - –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è 3D ‚Üí 1D: (8, 8, 12) ‚Üí (768,)
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ >95%
    
    Args:
        input_dim (int): –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω–æ–≥–æ —ç–º–±–µ–¥–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 768)
        cube_shape (Tuple[int, int, int]): –§–æ—Ä–º–∞ 3D –∫—É–±–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (8, 8, 12))
        reshaping_method (str): –ú–µ—Ç–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ('linear', 'adaptive', 'semantic')
        preserve_semantics (bool): –í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        semantic_threshold (float): –ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.95)
    """
    
    def __init__(
        self,
        input_dim: int = 768,
        cube_shape: Tuple[int, int, int] = (8, 8, 12),
        reshaping_method: str = "adaptive",
        preserve_semantics: bool = True,
        semantic_threshold: float = 0.95
    ):
        self.input_dim = input_dim
        self.cube_shape = cube_shape
        self.reshaping_method = reshaping_method
        self.preserve_semantics = preserve_semantics
        self.semantic_threshold = semantic_threshold
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
        cube_size = np.prod(cube_shape)
        if cube_size != input_dim:
            raise ValueError(
                f"–†–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: input_dim={input_dim}, "
                f"cube_shape={cube_shape} (–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ={cube_size})"
            )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)
        self.logger.info(
            f"EmbeddingReshaper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {input_dim}D ‚Üî {cube_shape}, "
            f"–º–µ—Ç–æ–¥={reshaping_method}, –ø–æ—Ä–æ–≥={semantic_threshold}"
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.stats = {
            'transformations_1d_to_3d': 0,
            'transformations_3d_to_1d': 0,
            'semantic_quality_avg': [],
            'successful_preservations': 0,
            'failed_preservations': 0
        }
    
    def vector_to_matrix(
        self, 
        embedding_1d: Union[torch.Tensor, np.ndarray]
    ) -> Union[torch.Tensor, np.ndarray]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 1D —ç–º–±–µ–¥–∏–Ω–≥–∞ –≤ 3D –º–∞—Ç—Ä–∏—Ü—É.
        
        Args:
            embedding_1d: –í—Ö–æ–¥–Ω–æ–π —ç–º–±–µ–¥–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ (768,)
            
        Returns:
            3D –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ (8, 8, 12)
            
        Raises:
            ValueError: –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if isinstance(embedding_1d, torch.Tensor):
            if embedding_1d.shape != (self.input_dim,):
                raise ValueError(f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å {self.input_dim}, –ø–æ–ª—É—á–µ–Ω–æ {embedding_1d.shape}")
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è PyTorch
            embedding_3d = embedding_1d.reshape(self.cube_shape)
        elif isinstance(embedding_1d, np.ndarray):
            if embedding_1d.shape != (self.input_dim,):
                raise ValueError(f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å {self.input_dim}, –ø–æ–ª—É—á–µ–Ω–æ {embedding_1d.shape}")
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è NumPy
            embedding_3d = embedding_1d.reshape(self.cube_shape)
        else:
            raise TypeError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ torch.Tensor –∏ np.ndarray")
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if self.preserve_semantics:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
            from .utils import calculate_enhanced_similarity_metrics
            
            try:
                enhanced_metrics = calculate_enhanced_similarity_metrics(embedding_1d, embedding_3d)
                similarity = enhanced_metrics['weighted_similarity']
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                self.logger.debug(f"Enhanced metrics 1D‚Üí3D: {enhanced_metrics}")
                
            except Exception as e:
                # Fallback –∫ –±–∞–∑–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–µ
                self.logger.warning(f"Enhanced metrics failed: {e}, using basic similarity")
                similarity = self._check_semantic_preservation(embedding_1d, embedding_3d)
            
            self.stats['semantic_quality_avg'].append(similarity)
            
            if similarity >= self.semantic_threshold:
                self.stats['successful_preservations'] += 1
                if similarity >= 0.98:
                    self.logger.info(f"üéØ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ 1D‚Üí3D –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: {similarity:.6f}")
            else:
                self.stats['failed_preservations'] += 1
                self.logger.warning(
                    f"–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è 1D‚Üí3D –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞: {similarity:.6f} < {self.semantic_threshold}"
                )
        
        self.stats['transformations_1d_to_3d'] += 1
        return embedding_3d
    
    def matrix_to_vector(
        self, 
        embedding_3d: Union[torch.Tensor, np.ndarray]
    ) -> Union[torch.Tensor, np.ndarray]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 3D –º–∞—Ç—Ä–∏—Ü—ã –≤ 1D —ç–º–±–µ–¥–∏–Ω–≥.
        
        Args:
            embedding_3d: –í—Ö–æ–¥–Ω–∞—è 3D –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ (8, 8, 12)
            
        Returns:
            1D —ç–º–±–µ–¥–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ (768,)
            
        Raises:
            ValueError: –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if isinstance(embedding_3d, torch.Tensor):
            if embedding_3d.shape != self.cube_shape:
                raise ValueError(f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å {self.cube_shape}, –ø–æ–ª—É—á–µ–Ω–æ {embedding_3d.shape}")
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è PyTorch
            embedding_1d = embedding_3d.reshape(self.input_dim)
        elif isinstance(embedding_3d, np.ndarray):
            if embedding_3d.shape != self.cube_shape:
                raise ValueError(f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å {self.cube_shape}, –ø–æ–ª—É—á–µ–Ω–æ {embedding_3d.shape}")
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è NumPy
            embedding_1d = embedding_3d.reshape(self.input_dim)
        else:
            raise TypeError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ torch.Tensor –∏ np.ndarray")
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if self.preserve_semantics:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
            from .utils import calculate_enhanced_similarity_metrics
            
            try:
                enhanced_metrics = calculate_enhanced_similarity_metrics(embedding_1d, embedding_3d)
                similarity = enhanced_metrics['weighted_similarity']
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                self.logger.debug(f"Enhanced metrics 3D‚Üí1D: {enhanced_metrics}")
                
            except Exception as e:
                # Fallback –∫ –±–∞–∑–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–µ
                self.logger.warning(f"Enhanced metrics failed: {e}, using basic similarity")
                similarity = self._check_semantic_preservation(embedding_1d, embedding_3d)
            
            self.stats['semantic_quality_avg'].append(similarity)
            
            if similarity >= self.semantic_threshold:
                self.stats['successful_preservations'] += 1
                if similarity >= 0.98:
                    self.logger.info(f"üéØ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ 3D‚Üí1D –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: {similarity:.6f}")
            else:
                self.stats['failed_preservations'] += 1
                self.logger.warning(
                    f"–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è 3D‚Üí1D –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞: {similarity:.6f} < {self.semantic_threshold}"
                )
        
        self.stats['transformations_3d_to_1d'] += 1
        return embedding_1d
    
    def _check_semantic_preservation(
        self, 
        original: Union[torch.Tensor, np.ndarray],
        reshaped: Union[torch.Tensor, np.ndarray]
    ) -> float:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        
        Args:
            original: –ò—Å—Ö–æ–¥–Ω—ã–π —ç–º–±–µ–¥–∏–Ω–≥
            reshaped: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —ç–º–±–µ–¥–∏–Ω–≥
            
        Returns:
            Cosine similarity –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ (0-1)
        """
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ñ–æ—Ä–º–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if original.shape != reshaped.shape:
            if len(original.shape) == 1:
                # original 1D ‚Üí –ø—Ä–∏–≤–æ–¥–∏–º reshaped –∫ 1D
                reshaped_flat = reshaped.reshape(-1) if hasattr(reshaped, 'reshape') else reshaped.flatten()
            else:
                # original 3D ‚Üí –ø—Ä–∏–≤–æ–¥–∏–º –∫ 1D
                original_flat = original.reshape(-1) if hasattr(original, 'reshape') else original.flatten()
                reshaped_flat = reshaped.reshape(-1) if hasattr(reshaped, 'reshape') else reshaped.flatten()
                original = original_flat
                reshaped = reshaped_flat
        
        # –í—ã—á–∏—Å–ª—è–µ–º cosine similarity
        return calculate_similarity_metrics(original, reshaped)
    
    def get_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        avg_quality = np.mean(self.stats['semantic_quality_avg']) if self.stats['semantic_quality_avg'] else 0.0
        success_rate = (
            self.stats['successful_preservations'] / 
            (self.stats['successful_preservations'] + self.stats['failed_preservations'])
            if (self.stats['successful_preservations'] + self.stats['failed_preservations']) > 0 
            else 0.0
        )
        
        return {
            'total_1d_to_3d': self.stats['transformations_1d_to_3d'],
            'total_3d_to_1d': self.stats['transformations_3d_to_1d'],
            'average_semantic_quality': avg_quality,
            'semantic_preservation_success_rate': success_rate,
            'successful_preservations': self.stats['successful_preservations'],
            'failed_preservations': self.stats['failed_preservations'],
            'semantic_threshold': self.semantic_threshold
        }
    
    def reset_statistics(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
        self.stats = {
            'transformations_1d_to_3d': 0,
            'transformations_3d_to_1d': 0,
            'semantic_quality_avg': [],
            'successful_preservations': 0,
            'failed_preservations': 0
        }
        self.logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ EmbeddingReshaper —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def __repr__(self) -> str:
        return (
            f"EmbeddingReshaper(input_dim={self.input_dim}, "
            f"cube_shape={self.cube_shape}, method={self.reshaping_method})"
        ) 