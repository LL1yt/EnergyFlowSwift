#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π
=====================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ –∏ adaptive_radius
–º—ã –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ LOCAL/FUNCTIONAL/DISTANT —Å–≤—è–∑–µ–π.
"""

import torch
import numpy as np
from typing import Dict, Any

from new_rebuild.core.moe.connection_classifier import UnifiedConnectionClassifier
from new_rebuild.config.project_config import (
    get_project_config,
    reset_global_config,
    set_project_config,
    ProjectConfig,
)
from utils.centralized_config import CentralizedConfig

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
reset_global_config()  # –°–±—Ä–æ—Å —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
config = ProjectConfig()
config.lattice.dimensions = (15, 15, 15)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
set_project_config(config)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ

CentralizedConfig()


def test_fixed_connection_classification():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π"""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –°–í–Ø–ó–ï–ô")
    print("=" * 60)

    lattice_dimensions = (15, 15, 15)
    total_cells = np.prod(lattice_dimensions)

    config = get_project_config()
    state_size = config.gnn.state_size

    print(f"üìê –†–µ—à–µ—Ç–∫–∞: {lattice_dimensions} ({total_cells:,} –∫–ª–µ—Ç–æ–∫)")
    print(f"üîç Adaptive radius: {config.calculate_adaptive_radius()}")
    print(f"üéØ –ü–æ—Ä–æ–≥–∏:")
    print(f"   LOCAL: ‚â§ {config.expert.connections.local_distance_threshold}")
    print(
        f"   FUNCTIONAL: {config.expert.connections.local_distance_threshold} < x ‚â§ {config.expert.connections.functional_distance_threshold}"
    )
    print(f"   DISTANT: ‚â• {config.expert.connections.distant_distance_threshold}")
    print(
        f"   Similarity threshold: {config.expert.connections.functional_similarity_threshold}"
    )

    # === –¢–ï–°–¢ –ë–ï–ó –ö–≠–®–ê ===
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ë–ï–ó –∫—ç—à–∞...")
    classifier_no_cache = UnifiedConnectionClassifier(
        lattice_dimensions=lattice_dimensions, enable_cache=False
    )

    # === –¢–ï–°–¢ –° –ö–≠–®–ï–ú ===
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –° –∫—ç—à–µ–º...")
    classifier_with_cache = UnifiedConnectionClassifier(
        lattice_dimensions=lattice_dimensions, enable_cache=True
    )

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    classifier_no_cache.reset_stats()
    classifier_with_cache.reset_stats()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ü–û–õ–ù–´–ô STATES TENSOR)
    all_states = torch.randn(total_cells, state_size)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–µ—Ç–æ–∫
    test_cells = [1000, 1500, 2000]  # –ö–ª–µ—Ç–∫–∏ –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É —Ä–µ—à–µ—Ç–∫–∏

    for cell_idx in test_cells:
        print(f"\nüìç –ö–ª–µ—Ç–∫–∞ {cell_idx}")
        print("-" * 40)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π –∏–∑ —Ä–µ—à–µ—Ç–∫–∏
        from new_rebuild.core.moe.distance_calculator import DistanceCalculator

        calc = DistanceCalculator(lattice_dimensions)

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ 6.0
        neighbor_indices = []
        adaptive_radius = config.calculate_adaptive_radius()

        for potential_neighbor in range(total_cells):
            if potential_neighbor == cell_idx:
                continue

            distance = calc.euclidean_distance(cell_idx, potential_neighbor)
            if distance <= adaptive_radius:
                neighbor_indices.append(potential_neighbor)

        if not neighbor_indices:
            print("   ‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π")
            continue

        print(f"   üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(neighbor_indices)} —Å–æ—Å–µ–¥–µ–π")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞
        cell_state = all_states[cell_idx]
        neighbor_states = all_states[neighbor_indices]

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ë–ï–ó –∫—ç—à–∞
        classifications_no_cache = classifier_no_cache.classify_connections(
            cell_idx=cell_idx,
            neighbor_indices=neighbor_indices,
            cell_state=cell_state,
            neighbor_states=neighbor_states,
        )

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –∫—ç—à–∞ –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø–æ–ª–Ω—ã–º states tensor
        classifications_with_cache = classifier_with_cache.cache_manager.get_cached_connections(
            cell_idx=cell_idx,
            neighbor_indices=neighbor_indices,
            states=all_states,  # –ü–µ—Ä–µ–¥–∞–µ–º –ü–û–õ–ù–´–ô tensor
            functional_similarity_threshold=config.expert.connections.functional_similarity_threshold,
        )

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for mode_name, classifications in [
            ("–ë–ï–ó –∫—ç—à–∞", classifications_no_cache),
            ("–° –∫—ç—à–µ–º", classifications_with_cache),
        ]:
            from new_rebuild.core.moe.connection_types import ConnectionCategory

            local_count = len(classifications[ConnectionCategory.LOCAL])
            functional_count = len(classifications[ConnectionCategory.FUNCTIONAL])
            distant_count = len(classifications[ConnectionCategory.DISTANT])
            total = local_count + functional_count + distant_count

            if total > 0:
                local_percent = (local_count / total) * 100
                functional_percent = (functional_count / total) * 100
                distant_percent = (distant_count / total) * 100

                print(f"   {mode_name}:")
                print(f"      üéØ LOCAL: {local_count} ({local_percent:.1f}%)")
                print(
                    f"      üéØ FUNCTIONAL: {functional_count} ({functional_percent:.1f}%)"
                )
                print(f"      üéØ DISTANT: {distant_count} ({distant_percent:.1f}%)")
            else:
                print(f"   {mode_name}: –ù–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π")

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)

    for mode_name, classifier in [
        ("–ë–ï–ó –∫—ç—à–∞", classifier_no_cache),
        ("–° –∫—ç—à–µ–º", classifier_with_cache),
    ]:
        stats = classifier.get_classification_stats()
        print(f"\n{mode_name}:")
        print(f"   LOCAL ratio: {stats['local_ratio']:.1%}")
        print(f"   FUNCTIONAL ratio: {stats['functional_ratio']:.1%}")
        print(f"   DISTANT ratio: {stats['distant_ratio']:.1%}")
        print(f"   –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {stats['total_connections']}")

        if "cache_performance" in stats:
            cache_perf = stats["cache_performance"]
            if cache_perf.get("cache_enabled", False):
                print(f"   Cache hit rate: {cache_perf['cache_hit_rate']:.1%}")
                print(f"   Cache hits: {cache_perf['cache_hits']}")
                print(f"   Cache misses: {cache_perf['cache_misses']}")

    return True


def test_distance_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("\nüîç –¢–ï–°–¢ –†–ê–°–ß–ï–¢–ê –†–ê–°–°–¢–û–Ø–ù–ò–ô")
    print("=" * 40)

    lattice_dimensions = (15, 15, 15)
    config = get_project_config()

    from new_rebuild.core.moe.distance_calculator import DistanceCalculator

    calc = DistanceCalculator(lattice_dimensions)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    center_idx = 15 * 15 * 7 + 15 * 7 + 7  # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ü–µ–Ω—Ç—Ä —Ä–µ—à–µ—Ç–∫–∏

    test_indices = [
        center_idx + 1,  # –°–æ—Å–µ–¥–Ω–∏–π (LOCAL)
        center_idx + 15,  # –ù–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É (LOCAL/FUNCTIONAL)
        center_idx + 15 * 15,  # –ù–∞ –æ–¥–∏–Ω —Å–ª–æ–π (FUNCTIONAL)
        center_idx + 15 * 15 * 2,  # –ù–∞ –¥–≤–∞ —Å–ª–æ—è (FUNCTIONAL/DISTANT)
        center_idx + 15 * 15 * 4,  # –ù–∞ —á–µ—Ç—ã—Ä–µ —Å–ª–æ—è (DISTANT)
    ]

    print(f"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞: {center_idx}")
    print(
        f"–ü–æ—Ä–æ–≥–∏: LOCAL‚â§{config.expert.connections.local_distance_threshold}, "
        f"FUNCTIONAL‚â§{config.expert.connections.functional_distance_threshold}, "
        f"DISTANT‚â•{config.expert.connections.distant_distance_threshold}"
    )

    for test_idx in test_indices:
        if 0 <= test_idx < 15 * 15 * 15:
            euclidean = calc.euclidean_distance(center_idx, test_idx)
            manhattan = calc.manhattan_distance(center_idx, test_idx)

            if euclidean <= config.expert.connections.local_distance_threshold:
                category = "LOCAL"
            elif euclidean <= config.expert.connections.functional_distance_threshold:
                category = "FUNCTIONAL candidate"
            elif euclidean >= config.expert.connections.distant_distance_threshold:
                category = "DISTANT"
            else:
                category = "Middle (needs similarity check)"

            print(
                f"   {center_idx} -> {test_idx}: Euclidean={euclidean:.2f}, Manhattan={manhattan:.1f} -> {category}"
            )


def test_cache_configuration():
    """–¢–µ—Å—Ç —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
    print("\n‚öôÔ∏è –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 40)

    config = get_project_config()

    print(f"üìê Lattice dimensions: {config.lattice.dimensions}")
    print(f"üîç Adaptive radius calculation:")

    max_dim = max(config.lattice.dimensions)
    expected_radius = 6.0 if max_dim <= 27 else 8.0
    actual_radius = config.calculate_adaptive_radius()

    print(f"   Max dimension: {max_dim}")
    print(f"   Expected radius: {expected_radius}")
    print(f"   Actual radius: {actual_radius}")

    print(f"üéØ Connection thresholds:")
    print(
        f"   local_distance_threshold: {config.expert.connections.local_distance_threshold}"
    )
    print(
        f"   functional_distance_threshold: {config.expert.connections.functional_distance_threshold}"
    )
    print(
        f"   distant_distance_threshold: {config.expert.connections.distant_distance_threshold}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    if actual_radius == expected_radius:
        print("‚úÖ Adaptive radius –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print(
            f"‚ùå Adaptive radius –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_radius}, –ø–æ–ª—É—á–µ–Ω–æ {actual_radius}"
        )

    if config.expert.connections.local_distance_threshold == 1.8:
        print("‚úÖ Local threshold –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print(
            f"‚ùå Local threshold –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: –æ–∂–∏–¥–∞–ª–æ—Å—å 1.8, –ø–æ–ª—É—á–µ–Ω–æ {config.expert.connections.local_distance_threshold}"
        )


if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –°–í–Ø–ó–ï–ô")
    print("=" * 80)

    try:
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        test_cache_configuration()

        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        test_distance_calculation()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        success = test_fixed_connection_classification()

        if success:
            print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–≤—è–∑–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚ö° –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()
