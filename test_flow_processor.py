"""
–¢–µ—Å—Ç –¥–ª—è FlowProcessor - –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
==========================================================

–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ FlowProcessor:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
- –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª forward (input ‚Üí propagation ‚Üí output)
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É SimpleNeuron, EnergyCarrier –∏ EnergyLattice
- –ì–∏–±—Ä–∏–¥–Ω—ã–π —Å–±–æ—Ä —ç–Ω–µ—Ä–≥–∏–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ + –±—É—Ñ–µ—Ä)
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import torch
import torch.nn as nn
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append('/mnt/c/Users/n0n4a/projects/AA')

from energy_flow.core.flow_processor import FlowProcessor, create_flow_processor
from energy_flow.config import create_debug_config, set_energy_config
from energy_flow.utils.logging import setup_logging

# –í–∫–ª—é—á–∞–µ–º debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging(debug_mode=True, level="DEBUG")

def test_flow_processor_init():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FlowProcessor"""
    print("\n=== –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FlowProcessor ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = create_debug_config()
    set_energy_config(config)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = create_flow_processor(config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print(f"‚úÖ FlowProcessor —Å–æ–∑–¥–∞–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {processor.device}")
    print(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:")
    print(f"   - EnergyLattice: {processor.lattice.width}x{processor.lattice.height}x{processor.lattice.depth}")
    print(f"   - SimpleNeuron: {sum(p.numel() for p in processor.neuron.parameters()):,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"   - EnergyCarrier: {sum(p.numel() for p in processor.carrier.parameters()):,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    lattice_device = processor.lattice.device  # EnergyLattice —Ö—Ä–∞–Ω–∏—Ç device –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç
    neuron_device = next(processor.neuron.parameters()).device
    carrier_device = next(processor.carrier.parameters()).device
    
    same_device = (lattice_device == neuron_device == carrier_device == processor.device)
    print(f"‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {same_device}")
    print(f"   Lattice: {lattice_device}, Neuron: {neuron_device}, Carrier: {carrier_device}, Processor: {processor.device}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = processor.get_performance_stats()
    print(f"‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(stats)} –º–µ—Ç—Ä–∏–∫")
    
    return processor

def test_simple_forward_pass():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞"""
    print("\n=== –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    processor = create_flow_processor(config)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 2
    device = processor.device
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    input_embeddings = torch.randn(batch_size, config.input_embedding_dim, device=device)
    print(f"üìù –í—Ö–æ–¥–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: {input_embeddings.shape}")
    
    # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
    with torch.no_grad():
        output_embeddings = processor.forward(input_embeddings, max_steps=5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∞–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥—ã
    print(f"‚úÖ –í—ã—Ö–æ–¥–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: {output_embeddings.shape}")
    print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: [{batch_size}, {config.input_embedding_dim}]")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    correct_shape = output_embeddings.shape == (batch_size, config.input_embedding_dim)
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞: {correct_shape}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤—Å–µ –Ω—É–ª–∏
    non_zero = torch.any(output_embeddings != 0).item()
    print(f"‚úÖ –í—ã—Ö–æ–¥ –Ω–µ –Ω—É–ª–µ–≤–æ–π: {non_zero}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–¥–∞
    perf_stats = processor.get_performance_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    for key, value in perf_stats.items():
        if isinstance(value, dict):
            print(f"   {key}: {value}")
        else:
            print(f"   {key}: {value:.4f}" if isinstance(value, float) else f"   {key}: {value}")
    
    return processor, output_embeddings

def test_step_by_step_processing():
    """–¢–µ—Å—Ç –ø–æ—à–∞–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –ø–æ—à–∞–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    processor = create_flow_processor(config)
    
    device = processor.device
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    input_embeddings = torch.randn(1, config.input_embedding_dim, device=device)
    
    # –†–∞–∑–º–µ—â–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤—Ä—É—á–Ω—É—é
    processor.lattice.reset()
    flow_ids = processor.lattice.place_initial_energy(input_embeddings)
    print(f"üå± –†–∞–∑–º–µ—â–µ–Ω–æ {len(flow_ids)} –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤—Ä—É—á–Ω—É—é
    max_manual_steps = 3
    for step in range(max_manual_steps):
        active_flows = processor.lattice.get_active_flows()
        buffered_count = processor.lattice.get_buffered_flows_count()
        
        print(f"üîÑ –®–∞–≥ {step}: {len(active_flows)} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {buffered_count} –≤ –±—É—Ñ–µ—Ä–µ")
        
        if not active_flows and buffered_count == 0:
            print("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º")
            break
        
        if active_flows:
            # –û–¥–∏–Ω —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processor.step(active_flows)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
            if step == 0 and len(active_flows) >= 3:
                for i, flow in enumerate(active_flows[:3]):
                    z_pos = flow.position[2].item()
                    print(f"   –ü–æ—Ç–æ–∫ {flow.id}: z={z_pos:.1f}, –≤–æ–∑—Ä–∞—Å—Ç={flow.age}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π —Å–±–æ—Ä
    final_output, collected_ids = processor._collect_final_output()
    
    print(f"üèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ—Ä: {len(collected_ids)} –ø–æ—Ç–æ–∫–æ–≤")
    print(f"üì¶ –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–∞: {final_output.shape}")
    
    return processor, final_output

def test_hybrid_collection():
    """–¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —ç–Ω–µ—Ä–≥–∏–∏"""
    print("\n=== –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —ç–Ω–µ—Ä–≥–∏–∏ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    processor = create_flow_processor(config)
    
    device = processor.device
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
    processor.lattice.reset()
    
    # 1. –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –≤—Ä—É—á–Ω—É—é
    test_scenarios = [
        {"position": [5, 5, config.lattice_depth - 1], "desc": "–Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ"},
        {"position": [8, 8, config.lattice_depth + 1], "desc": "–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–µ—à–µ—Ç–∫–∏"},
        {"position": [12, 12, config.lattice_depth - 2], "desc": "–ø–æ—á—Ç–∏ —É –≤—ã—Ö–æ–¥–∞"},
        {"position": [15, 15, 2], "desc": "–¥–∞–ª–µ–∫–æ –æ—Ç –≤—ã—Ö–æ–¥–∞"}
    ]
    
    created_flows = []
    for i, scenario in enumerate(test_scenarios):
        pos = torch.tensor(scenario["position"], dtype=torch.float32, device=device)
        energy = torch.randn(config.embedding_per_cell, device=device)
        flow_id = processor.lattice._create_flow(pos, energy)
        created_flows.append(flow_id)
        print(f"üå± –ü–æ—Ç–æ–∫ {flow_id} —Å–æ–∑–¥–∞–Ω {scenario['desc']}")
    
    # 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±—É—Ñ–µ—Ä–∏–∑—É–µ–º –ø–æ—Ç–æ–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–µ
    for flow_id in created_flows[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –ø–æ—Ç–æ–∫–∞
        processor.lattice._buffer_output_flow(flow_id)
    
    print(f"üì¶ –ü–æ—Ç–æ–∫–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ: {processor.lattice.get_buffered_flows_count()}")
    print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {len(processor.lattice.get_active_flows())}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π —Å–±–æ—Ä
    final_output, collected_ids = processor._collect_final_output()
    
    print(f"üèÅ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω:")
    print(f"   - –°–æ–±—Ä–∞–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: {len(collected_ids)}")
    print(f"   - ID —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö: {collected_ids}")
    print(f"   - –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–∞: {final_output.shape}")
    print(f"   - –ë—É—Ñ–µ—Ä –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞: {processor.lattice.get_buffered_flows_count()} –ø–æ—Ç–æ–∫–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ (–ø–µ—Ä–≤—ã–µ 3 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω—ã)
    expected_collected = 3  # 2 –∏–∑ –±—É—Ñ–µ—Ä–∞ + 1 –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–æ—á—Ç–∏ —É –≤—ã—Ö–æ–¥–∞
    collection_success = len(collected_ids) >= 2  # –ú–∏–Ω–∏–º—É–º 2 –∏–∑ –±—É—Ñ–µ—Ä–∞
    print(f"‚úÖ –°–±–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {collection_success}")
    
    return processor, final_output, collected_ids

def test_performance_stats():
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n=== –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===")
    
    config = create_debug_config()
    set_energy_config(config)
    processor = create_flow_processor(config)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π forward pass –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    device = processor.device
    input_embeddings = torch.randn(1, config.input_embedding_dim, device=device)
    
    with torch.no_grad():
        output = processor.forward(input_embeddings, max_steps=3)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = processor.get_performance_stats()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    for key, value in stats.items():
        if isinstance(value, dict):
            print(f"   {key}:")
            for sub_key, sub_value in value.items():
                print(f"     {sub_key}: {sub_value}")
        else:
            formatted_value = f"{value:.4f}" if isinstance(value, float) else str(value)
            print(f"   {key}: {formatted_value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—Ä–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ
    has_timing = 'avg_step_time' in stats and stats['avg_step_time'] > 0
    has_flow_stats = 'avg_flows_per_step' in stats
    has_lattice_stats = 'lattice_stats' in stats and isinstance(stats['lattice_stats'], dict)
    
    print(f"‚úÖ –°–æ–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {has_timing}")
    print(f"‚úÖ –°–æ–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤: {has_flow_stats}")
    print(f"‚úÖ –°–æ–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—à–µ—Ç–∫–∏: {has_lattice_stats}")
    
    # –¢–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    viz_data = processor.visualize_flow_state()
    print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:")
    print(f"   - –í—Å–µ–≥–æ –ø–æ—Ç–æ–∫–æ–≤: {viz_data['total_flows']}")
    print(f"   - –†–∞–∑–º–µ—Ä—ã —Ä–µ—à–µ—Ç–∫–∏: {viz_data['lattice_dims']}")
    print(f"   - –ü–æ–∑–∏—Ü–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö: {len(viz_data['positions'])}")
    
    return processor, stats, viz_data

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è FlowProcessor")
    print("=" * 50)
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        processor = test_flow_processor_init()
        processor, simple_output = test_simple_forward_pass()
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        processor, step_output = test_step_by_step_processing()
        processor, hybrid_output, collected = test_hybrid_collection()
        processor, perf_stats, viz_data = test_performance_stats()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã FlowProcessor –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {processor.device}")
        print(f"üìä –†–µ—à–µ—Ç–∫–∞: {processor.config.lattice_width}x{processor.config.lattice_height}x{processor.config.lattice_depth}")
        print(f"üìä –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {processor.config.max_active_flows}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_params = (
            sum(p.numel() for p in processor.neuron.parameters()) +
            sum(p.numel() for p in processor.carrier.parameters())
        )
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)