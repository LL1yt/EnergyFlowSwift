#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - Phase 3 Priority 1
================================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é core/log_utils.py —Å new_rebuild/utils/logging.py
- –†–∞–±–æ—Ç—É —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–ª–µ—Ç–∫–∞—Ö
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
- Legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
"""

import torch
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º new_rebuild –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "new_rebuild"))

from new_rebuild.config import get_project_config
from new_rebuild.utils import (
    setup_logging,
    get_logger,
    log_init,
    _get_caller_info,
    LogContext,
)
from new_rebuild.core.cells import NCACell, GMLPCell


def test_logging_integration():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    print("üß™ –¢–ï–°–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)

    # === STEP 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
    print("\n1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_project_config()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–ë–ï–ó –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏)
    setup_logging(debug_mode=True, enable_context=True)

    logger = get_logger("test_logging")
    logger.info("üöÄ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

    # === STEP 2: –¢–µ—Å—Ç legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ===
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")

    caller_info = _get_caller_info()
    logger.info(f"üìç Caller info: {caller_info}")

    # –¢–µ—Å—Ç log_init —Ñ—É–Ω–∫—Ü–∏–∏
    log_init("TestComponent", version="1.0", mode="testing")

    # === STEP 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NCA –∫–ª–µ—Ç–∫–∏ –° –ö–û–ù–¢–ï–ö–°–¢–û–ú ===
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ NCA –∫–ª–µ—Ç–∫–∏...")

    with LogContext("cell_creation", cell_type="NCA"):
        nca_cell = NCACell()
        logger.info("‚úÖ NCA –∫–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")

        # –¢–µ—Å—Ç forward pass —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º - –ò–°–ü–†–ê–í–õ–ï–ù–´ –†–ê–ó–ú–ï–†–´
        batch_size = 2
        neighbor_states = torch.randn(
            batch_size, 26, 4
        )  # 26 —Å–æ—Å–µ–¥–µ–π, NCA state_size = 4
        own_state = torch.randn(batch_size, 4)  # NCA state_size = 4
        external_input = torch.randn(
            batch_size, 1
        )  # NCA external_input_size = 1 (–ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)

        nca_output = nca_cell.forward(neighbor_states, own_state, external_input)
        logger.info(f"‚úÖ NCA forward pass: {nca_output.shape}")

    # === STEP 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gMLP –∫–ª–µ—Ç–∫–∏ –° –ö–û–ù–¢–ï–ö–°–¢–û–ú ===
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ gMLP –∫–ª–µ—Ç–∫–∏...")

    with LogContext("cell_creation", cell_type="gMLP"):
        gmlp_cell = GMLPCell()
        logger.info("‚úÖ gMLP –∫–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")

        # –¢–µ—Å—Ç forward pass - –†–ê–ó–ú–ï–†–´ –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
        neighbor_states_gmlp = torch.randn(batch_size, 26, 32)  # gMLP state_size = 32
        own_state_gmlp = torch.randn(batch_size, 32)  # gMLP state_size = 32
        external_input_gmlp = torch.randn(batch_size, 8)  # gMLP external_input_size = 8

        gmlp_output = gmlp_cell.forward(
            neighbor_states_gmlp, own_state_gmlp, external_input_gmlp
        )
        logger.info(f"‚úÖ gMLP forward pass: {gmlp_output.shape}")

    # === STEP 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
    print("\n5Ô∏è‚É£ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")

    nca_params = sum(p.numel() for p in nca_cell.parameters())
    gmlp_params = sum(p.numel() for p in gmlp_cell.parameters())
    total_params = nca_params + gmlp_params

    logger.info(f"üìä NCA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {nca_params:,}")
    logger.info(f"üìä gMLP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {gmlp_params:,}")
    logger.info(f"üìä –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {total_params:,}")

    # === STEP 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
    print("\n6Ô∏è‚É£ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...")

    logger.info(f"üîß –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {config.architecture_type}")
    logger.info(f"üîß –†–µ—à–µ—Ç–∫–∞: {config.lattice_dimensions}")
    logger.info(f"üîß –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {config.device}")
    logger.info(f"üîß Debug —Ä–µ–∂–∏–º: {config.debug_mode}")

    # === STEP 7: –¢–ï–°–¢ –ö–û–ù–¢–ï–ö–°–¢–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
    print("\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")

    # –¢–µ—Å—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    with LogContext("outer_context", operation="test"):
        logger.info("–í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")

        with LogContext("inner_context", level="deep"):
            logger.info("–í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")

        logger.info("–°–Ω–æ–≤–∞ –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")

    logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ")

    # === –†–ï–ó–£–õ–¨–¢–ê–¢ ===
    print("\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print("‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: OK")
    print("‚úÖ Legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: OK")
    print("‚úÖ NCA –∫–ª–µ—Ç–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º: OK")
    print("‚úÖ gMLP –∫–ª–µ—Ç–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º: OK")
    print("‚úÖ Caller tracking: OK")
    print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: OK")
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: OK")

    logger.info("üéØ Phase 3 Priority 1 - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")

    return True


def test_clean_logging():
    """–¢–µ—Å—Ç —á–∏—Å—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""

    print("\nüîç –¢–ï–°–¢: –ß–∏—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("-" * 40)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ë–ï–ó –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    setup_logging(debug_mode=False, enable_context=True)

    logger = get_logger("clean_test")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–µ—Ç–∫—É (–≤—Å–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ...")

    with LogContext("test_clean"):
        nca_cell = NCACell()

        # Forward pass
        batch_size = 1
        neighbor_states = torch.randn(batch_size, 26, 4)
        own_state = torch.randn(batch_size, 4)

        result = nca_cell.forward(neighbor_states, own_state)

    logger.info("‚úÖ –¢–µ—Å—Ç —á–∏—Å—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω")

    return True


if __name__ == "__main__":
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        success1 = test_logging_integration()

        # –¢–µ—Å—Ç —á–∏—Å—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        success2 = test_clean_logging()

        if success1 and success2:
            print("\nüèÜ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("Phase 3 Priority 1 - –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø: ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ê")
        else:
            print("\n‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
            sys.exit(1)

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
