#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Unified Spatial Optimizer
======================================

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

–ê–≤—Ç–æ—Ä: 3D Cellular Neural Network Project
–í–µ—Ä—Å–∏—è: 3.0.0 (2024-12-27)
"""

import torch
import numpy as np
import time
import logging
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_imports():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤")

    try:
        from new_rebuild.core.lattice.spatial_optimization.unified_spatial_optimizer import (
            UnifiedSpatialOptimizer,
            OptimizationConfig,
            OptimizationMode,
            ConnectionType,
            create_unified_spatial_optimizer,
            estimate_unified_memory_requirements,
        )

        logger.info("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω—ã")
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_optimization_modes():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    from new_rebuild.core.lattice.spatial_optimization.unified_spatial_optimizer import (
        create_unified_spatial_optimizer,
        OptimizationConfig,
        OptimizationMode,
    )

    dimensions = (8, 8, 8)  # –ù–µ–±–æ–ª—å—à–∞—è —Ä–µ—à–µ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_results = {}

    modes_to_test = [
        OptimizationMode.AUTO,
        OptimizationMode.CPU_ONLY,
        OptimizationMode.HYBRID,
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º GPU —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞
    if torch.cuda.is_available():
        modes_to_test.append(OptimizationMode.GPU_ONLY)

    for mode in modes_to_test:
        try:
            logger.info(f"   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º: {mode.value}")

            config = OptimizationConfig(
                mode=mode,
                enable_moe=False,  # –°–Ω–∞—á–∞–ª–∞ –±–µ–∑ MoE
                target_performance_ms=100.0,
            )

            optimizer = create_unified_spatial_optimizer(dimensions, config)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π
            test_coords = (4, 4, 4)  # –¶–µ–Ω—Ç—Ä —Ä–µ—à–µ—Ç–∫–∏
            neighbors = optimizer.find_neighbors_optimized(test_coords, radius=2.0)

            logger.info(f"     üìä –ù–∞–π–¥–µ–Ω–æ {len(neighbors)} —Å–æ—Å–µ–¥–µ–π")

            test_results[mode.value] = {
                "neighbors_found": len(neighbors),
                "creation_successful": True,
            }

            # –û—á–∏—Å—Ç–∫–∞
            optimizer.cleanup()

        except Exception as e:
            logger.warning(f"     ‚ö†Ô∏è –†–µ–∂–∏–º {mode.value} –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            test_results[mode.value] = {"creation_successful": False, "error": str(e)}

    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤: {test_results}")
    return test_results


def test_lattice_optimization():
    """–¢–µ—Å—Ç 3: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ—Ç–∫–∏"""
    logger.info("üß™ –¢–µ—Å—Ç 3: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ—Ç–∫–∏")

    from new_rebuild.core.lattice.spatial_optimization.unified_spatial_optimizer import (
        create_unified_spatial_optimizer,
        OptimizationConfig,
        OptimizationMode,
    )

    dimensions = (6, 6, 6)
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]
    state_size = 32

    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≤ AUTO —Ä–µ–∂–∏–º–µ
        config = OptimizationConfig(
            mode=OptimizationMode.AUTO, enable_moe=False, target_performance_ms=50.0
        )

        optimizer = create_unified_spatial_optimizer(dimensions, config)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        states = torch.randn(total_cells, state_size, dtype=torch.float32)
        logger.info(f"   üìä –í—Ö–æ–¥–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {states.shape}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        start_time = time.time()
        result = optimizer.optimize_lattice_forward(states)
        optimization_time = time.time() - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert result.new_states.shape == states.shape, "–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
        assert not torch.isnan(result.new_states).any(), "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"
        assert not torch.isinf(result.new_states).any(), "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Inf –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"

        logger.info(f"   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {optimization_time:.3f}s")
        logger.info(f"   üìä –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.processing_time_ms:.1f}ms")
        logger.info(f"   üéØ –†–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π: {result.mode_used.value}")
        logger.info(f"   üíæ –ü–∞–º—è—Ç—å: {result.memory_usage_mb:.1f}MB")
        logger.info(f"   üîç –°–æ—Å–µ–¥–µ–π –Ω–∞–π–¥–µ–Ω–æ: {result.neighbors_found}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = optimizer.get_comprehensive_stats()
        logger.info(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['unified_optimizer']}")

        optimizer.cleanup()

        return {
            "success": True,
            "optimization_time_s": optimization_time,
            "processing_time_ms": result.processing_time_ms,
            "mode_used": result.mode_used.value,
            "memory_usage_mb": result.memory_usage_mb,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        return {"success": False, "error": str(e)}


def test_moe_integration():
    """–¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    logger.info("üß™ –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")

    from new_rebuild.core.lattice.spatial_optimization.unified_spatial_optimizer import (
        create_unified_spatial_optimizer,
        OptimizationConfig,
        OptimizationMode,
    )

    dimensions = (4, 4, 4)
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]
    state_size = 16

    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ MoE processor
        class MockMoEProcessor(torch.nn.Module):
            def __init__(self, state_size):
                super().__init__()
                self.linear = torch.nn.Linear(state_size, state_size)

            def forward(
                self,
                current_state,
                neighbor_states,
                cell_idx,
                neighbor_indices,
                **kwargs,
            ):
                # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–Ω–µ–π–Ω—ã–π —Å–ª–æ–π
                processed = self.linear(current_state)
                return {"new_state": processed}

        moe_processor = MockMoEProcessor(state_size)

        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å MoE
        config = OptimizationConfig(
            mode=OptimizationMode.AUTO, enable_moe=True, enable_morton_encoding=True
        )

        optimizer = create_unified_spatial_optimizer(dimensions, config, moe_processor)

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        states = torch.randn(total_cells, state_size)

        # –í—ã–ø–æ–ª–Ω—è–µ–º MoE –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        start_time = time.time()
        result = optimizer.optimize_lattice_forward(states)
        moe_time = time.time() - start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert result.new_states.shape == states.shape
        assert not torch.isnan(result.new_states).any()

        logger.info(f"   ‚úÖ MoE –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {moe_time:.3f}s")
        logger.info(f"   ü§ñ MoE –æ–±—Ä–∞–±–æ—Ç–∫–∞: {result.processing_time_ms:.1f}ms")
        logger.info(f"   üéØ –†–µ–∂–∏–º: {result.mode_used.value}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = optimizer.get_comprehensive_stats()
        moe_enabled = stats["unified_optimizer"]["moe_enabled"]
        morton_enabled = stats["unified_optimizer"]["morton_enabled"]

        logger.info(f"   ü§ñ MoE –∞–∫—Ç–∏–≤–µ–Ω: {moe_enabled}")
        logger.info(f"   üî¢ Morton –∞–∫—Ç–∏–≤–µ–Ω: {morton_enabled}")

        optimizer.cleanup()

        return {
            "success": True,
            "moe_time_s": moe_time,
            "moe_enabled": moe_enabled,
            "morton_enabled": morton_enabled,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ MoE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return {"success": False, "error": str(e)}


def test_memory_estimation():
    """–¢–µ—Å—Ç 5: –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏"""
    logger.info("üß™ –¢–µ—Å—Ç 5: –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–∞–º—è—Ç–∏")

    from new_rebuild.core.lattice.spatial_optimization.unified_spatial_optimizer import (
        estimate_unified_memory_requirements,
        OptimizationConfig,
        OptimizationMode,
    )

    test_dimensions = [
        (4, 4, 4),  # –ú–∞–ª–∞—è —Ä–µ—à–µ—Ç–∫–∞
        (10, 10, 10),  # –°—Ä–µ–¥–Ω—è—è —Ä–µ—à–µ—Ç–∫–∞
        (20, 20, 20),  # –ë–æ–ª—å—à–∞—è —Ä–µ—à–µ—Ç–∫–∞
    ]

    memory_estimates = {}

    for dimensions in test_dimensions:
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            configs = [
                ("cpu_only", OptimizationConfig(mode=OptimizationMode.CPU_ONLY)),
                ("gpu_only", OptimizationConfig(mode=OptimizationMode.GPU_ONLY)),
                (
                    "gpu_moe",
                    OptimizationConfig(
                        mode=OptimizationMode.GPU_ONLY,
                        enable_moe=True,
                        enable_morton_encoding=True,
                    ),
                ),
            ]

            dimension_results = {}

            for config_name, config in configs:
                estimates = estimate_unified_memory_requirements(dimensions, config)
                dimension_results[config_name] = estimates

                logger.info(f"   üìè {dimensions} ({config_name}):")
                logger.info(
                    f"     üíæ –û–±—â–∞—è –ø–∞–º—è—Ç—å: {estimates['total_memory_gb']:.2f}GB"
                )
                logger.info(
                    f"     üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è GPU: {estimates['recommended_gpu_memory_gb']:.2f}GB"
                )

            memory_estimates[dimensions] = dimension_results

        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è {dimensions}: {e}")

    logger.info("‚úÖ –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return memory_estimates


def test_performance_comparison():
    """–¢–µ—Å—Ç 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å legacy —Å–∏—Å—Ç–µ–º–∞–º–∏"""
    logger.info("üß™ –¢–µ—Å—Ç 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    dimensions = (6, 6, 6)
    total_cells = dimensions[0] * dimensions[1] * dimensions[2]
    state_size = 32

    performance_results = {}

    states = torch.randn(total_cells, state_size)

    # –¢–µ—Å—Ç UnifiedSpatialOptimizer
    try:
        from new_rebuild.core.lattice.spatial_optimization.unified_spatial_optimizer import (
            create_unified_spatial_optimizer,
            OptimizationConfig,
            OptimizationMode,
        )

        config = OptimizationConfig(mode=OptimizationMode.AUTO)
        unified_optimizer = create_unified_spatial_optimizer(dimensions, config)

        # –ü—Ä–æ–≥—Ä–µ–≤
        _ = unified_optimizer.optimize_lattice_forward(states)

        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        start_time = time.time()
        for _ in range(3):
            result = unified_optimizer.optimize_lattice_forward(states)
        unified_time = (time.time() - start_time) / 3

        performance_results["unified"] = {
            "avg_time_s": unified_time,
            "mode_used": result.modeUsed.value,
            "memory_mb": result.memory_usage_mb,
        }

        unified_optimizer.cleanup()

        logger.info(
            f"   üöÄ Unified: {unified_time:.3f}s avg, —Ä–µ–∂–∏–º: {result.modeUsed.value}"
        )

    except Exception as e:
        logger.warning(f"   ‚ö†Ô∏è Unified —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")

    # –¢–µ—Å—Ç legacy SpatialOptimizer –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try:
        from new_rebuild.core.lattice.spatial_optimization.spatial_optimizer import (
            SpatialOptimizer,
        )

        legacy_optimizer = SpatialOptimizer(dimensions)
        legacy_states = torch.randn(total_cells, state_size)  # –°–æ–∑–¥–∞–µ–º states –¥–ª—è legacy —Ç–µ—Å—Ç–∞
        
        def simple_processor(current_state, neighbor_states, cell_idx, neighbors):
            if len(neighbors) == 0:
                return current_state
            return 0.7 * current_state + 0.3 * neighbor_states.mean(dim=0)

        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ legacy
        start_time = time.time()
        for _ in range(3):
            _ = legacy_optimizer.optimize_lattice_forward(legacy_states, simple_processor)
        legacy_time = (time.time() - start_time) / 3

        performance_results["legacy"] = {
            "avg_time_s": legacy_time,
            "mode_used": "cpu_legacy",
        }

        legacy_optimizer.cleanup()

        logger.info(f"   üìä Legacy: {legacy_time:.3f}s avg")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if "unified" in performance_results:
            speedup = legacy_time / performance_results["unified"]["avg_time_s"]
            logger.info(f"   ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")

    except Exception as e:
        logger.warning(f"   ‚ö†Ô∏è Legacy —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")

    return performance_results


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Unified Spatial Optimizer")
    logger.info("=" * 70)

    test_results = {}

    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
    test_results["imports"] = test_imports()

    if not test_results["imports"]:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∏–º–ø–æ—Ä—Ç—ã –Ω–µ —É–¥–∞–ª–∏—Å—å")
        return test_results

    # –¢–µ—Å—Ç 2: –†–µ–∂–∏–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    test_results["modes"] = test_optimization_modes()

    # –¢–µ—Å—Ç 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ—Ç–∫–∏
    test_results["lattice_optimization"] = test_lattice_optimization()

    # –¢–µ—Å—Ç 4: MoE –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    test_results["moe_integration"] = test_moe_integration()

    # –¢–µ—Å—Ç 5: –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏
    test_results["memory_estimation"] = test_memory_estimation()

    # –¢–µ—Å—Ç 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_results["performance_comparison"] = test_performance_comparison()

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    logger.info("=" * 70)
    logger.info("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 70)

    successful_tests = sum(
        1
        for result in test_results.values()
        if isinstance(result, (bool, dict))
        and (
            result is True or (isinstance(result, dict) and result.get("success", True))
        )
    )

    total_tests = len(test_results)

    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã: {successful_tests}/{total_tests}")

    if successful_tests == total_tests:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("üöÄ UnifiedSpatialOptimizer –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        logger.warning(f"‚ö†Ô∏è {total_tests - successful_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        logger.info("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")

    return test_results


if __name__ == "__main__":
    results = run_all_tests()
