#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç EmbeddingProcessor - Phase 2.5
==========================================

–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤.

–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ EmbeddingProcessor –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.
"""

import sys
import os
import torch
import logging
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.embedding_processor import (
    EmbeddingProcessor,
    EmbeddingConfig,
    ProcessingMode,
    create_autoencoder_config,
    create_test_embedding_batch,
    validate_processor_output,
    run_comprehensive_test
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


def test_embedding_processor_initialization():
    """–¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmbeddingProcessor"""
    
    logger.info("üß™ –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmbeddingProcessor")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = EmbeddingConfig(
            processing_mode=ProcessingMode.AUTOENCODER,
            target_similarity=0.90,
            debug_mode=True,
            verbose_logging=True
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = EmbeddingProcessor(config)
        
        logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω: {processor}")
        logger.info(f"üìä –†–µ–∂–∏–º: {processor.config.processing_mode.value}")
        logger.info(f"üéØ –¶–µ–ª–µ–≤–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: {processor.config.target_similarity}")
        
        return True, processor
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False, None


def test_single_embedding_processing(processor):
    """–¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —ç–º–±–µ–¥–∏–Ω–≥–∞"""
    
    logger.info("üß™ –¢–ï–°–¢ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —ç–º–±–µ–¥–∏–Ω–≥–∞")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–∏–Ω–≥
        input_embedding = torch.randn(768)
        logger.info(f"üì• –í—Ö–æ–¥–Ω–æ–π —ç–º–±–µ–¥–∏–Ω–≥: {input_embedding.shape}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        start_time = time.time()
        output_embedding = processor.forward(input_embedding)
        processing_time = time.time() - start_time
        
        logger.info(f"üì§ –í—ã—Ö–æ–¥–Ω–æ–π —ç–º–±–µ–¥–∏–Ω–≥: {output_embedding.shape}")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f}s")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏
        similarity = torch.nn.functional.cosine_similarity(
            input_embedding, output_embedding, dim=0
        ).item()
        
        logger.info(f"üìä Cosine similarity: {similarity:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ Phase 2.5
        target_achieved = similarity >= processor.config.target_similarity
        logger.info(f"üéØ Phase 2.5 —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: {target_achieved} (>{processor.config.target_similarity:.2f})")
        
        return True, similarity
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–±–µ–¥–∏–Ω–≥–∞: {e}")
        return False, 0.0


def test_batch_processing(processor):
    """–¢–µ—Å—Ç 3: –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
    
    logger.info("üß™ –¢–ï–°–¢ 3: –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    
    try:
        batch_size = 4
        
        # –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
        input_batch = create_test_embedding_batch(batch_size, 768, "semantic")
        logger.info(f"üì• –í—Ö–æ–¥–Ω–æ–π –±–∞—Ç—á: {input_batch.shape}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        start_time = time.time()
        output_batch = processor.forward(input_batch)
        processing_time = time.time() - start_time
        
        logger.info(f"üì§ –í—ã—Ö–æ–¥–Ω–æ–π –±–∞—Ç—á: {output_batch.shape}")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f}s")
        logger.info(f"‚ö° –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {batch_size/processing_time:.1f} —ç–º–±/—Å–µ–∫")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation = validate_processor_output(input_batch, output_batch, processor.config)
        
        if validation["all_valid"]:
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞—Ç—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
            similarity = validation["quality_metrics"]["mean_cosine_similarity"]
            logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å –±–∞—Ç—á–∞: {similarity:.3f}")
            return True, similarity
        else:
            logger.warning("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞—Ç—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:")
            for error in validation["errors"]:
                logger.warning(f"  - {error}")
            return False, 0.0
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False, 0.0


def test_multiple_modes(processor):
    """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤"""
    
    logger.info("üß™ –¢–ï–°–¢ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤")
    
    modes_results = {}
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–∏–Ω–≥
    test_embedding = torch.randn(768)
    
    for mode in [ProcessingMode.AUTOENCODER, ProcessingMode.GENERATOR, ProcessingMode.DIALOGUE]:
        try:
            logger.info(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞: {mode.value}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
            processor.set_mode(mode)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞
            output = processor.forward(test_embedding)
            
            # –°—Ö–æ–∂–µ—Å—Ç—å
            similarity = torch.nn.functional.cosine_similarity(
                test_embedding, output, dim=0
            ).item()
            
            modes_results[mode.value] = similarity
            logger.info(f"üìä {mode.value}: similarity = {similarity:.3f}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ {mode.value}: {e}")
            modes_results[mode.value] = 0.0
    
    # –°–≤–æ–¥–∫–∞ –ø–æ —Ä–µ–∂–∏–º–∞–º
    logger.info("=== –°–í–û–î–ö–ê –ü–û –†–ï–ñ–ò–ú–ê–ú ===")
    for mode, similarity in modes_results.items():
        status = "‚úÖ" if similarity >= 0.80 else "‚ö†Ô∏è"
        logger.info(f"{status} {mode}: {similarity:.3f}")
    
    return len(modes_results) == 3, modes_results


def test_metrics_collection(processor):
    """–¢–µ—Å—Ç 5: –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫"""
    
    logger.info("üß™ –¢–ï–°–¢ 5: –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫")
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        processor.reset_metrics()
        
        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫
        for i in range(5):
            test_embedding = torch.randn(768)
            processor.forward(test_embedding)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = processor.get_metrics()
        
        logger.info("=== –°–û–ë–†–ê–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò ===")
        logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å: {metrics['similarity']['mean']:.3f}")
        logger.info(f"üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏: {metrics['quality']['target_achievement_rate']:.1%}")
        logger.info(f"‚≠ê –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: {metrics['quality']['quality_level']}")
        logger.info(f"‚ö° –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {metrics['performance']['throughput_embeddings_per_sec']:.1f} —ç–º–±/—Å–µ–∫")
        logger.info(f"üî¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {metrics['total_processed']} —ç–º–±–µ–¥–∏–Ω–≥–æ–≤")
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        processor.metrics.log_current_stats()
        
        return True, metrics
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        return False, {}


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ë–ê–ó–û–í–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø EMBEDDINGPROCESSOR (Phase 2.5)")
    logger.info("=" * 70)
    
    test_results = {
        "initialization": False,
        "single_processing": False,
        "batch_processing": False,
        "multiple_modes": False,
        "metrics_collection": False
    }
    
    similarities = []
    processor = None
    
    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    success, processor = test_embedding_processor_initialization()
    test_results["initialization"] = success
    
    if not success:
        logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä")
        return False
    
    # –¢–µ—Å—Ç 2: –û–¥–∏–Ω–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    success, similarity = test_single_embedding_processing(processor)
    test_results["single_processing"] = success
    if success:
        similarities.append(similarity)
    
    # –¢–µ—Å—Ç 3: –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    success, similarity = test_batch_processing(processor)
    test_results["batch_processing"] = success
    if success:
        similarities.append(similarity)
    
    # –¢–µ—Å—Ç 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    success, modes_results = test_multiple_modes(processor)
    test_results["multiple_modes"] = success
    if success:
        similarities.extend(modes_results.values())
    
    # –¢–µ—Å—Ç 5: –ú–µ—Ç—Ä–∏–∫–∏
    success, metrics = test_metrics_collection(processor)
    test_results["metrics_collection"] = success
    
    # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê ===
    logger.info("=" * 70)
    logger.info("üìã –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–û–í")
    logger.info("=" * 70)
    
    passed_tests = sum(test_results.values())
    total_tests = len(test_results)
    
    for test_name, result in test_results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{status} {test_name}")
    
    logger.info(f"\nüìä –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if similarities:
        avg_similarity = sum(similarities) / len(similarities)
        logger.info(f"üìà –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º: {avg_similarity:.3f}")
        
        # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Phase 2.5
        phase_2_5_ready = avg_similarity >= 0.90
        logger.info(f"üéØ Phase 2.5 –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {'‚úÖ –î–ê' if phase_2_5_ready else '‚ùå –ù–ï–¢'} (—Ü–µ–ª—å: >0.90)")
        
        if phase_2_5_ready:
            logger.info("üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! EmbeddingProcessor –≥–æ—Ç–æ–≤ –∫ Phase 3!")
        else:
            logger.info("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π Phase 2.5")
    
    all_passed = all(test_results.values())
    logger.info(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°: {'üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all_passed else '‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}")
    
    return all_passed


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 